[
    {
        "id": "3408b34b286dc17b",
        "type": "tab",
        "label": "Home",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b61ad1d4aecdd073",
        "type": "tab",
        "label": "smart-river",
        "disabled": false,
        "info": "// nrlint function-eslint:off, align-to-grid:off\n",
        "env": []
    },
    {
        "id": "241d6dd772dc326f",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "edc51ffb760624f6",
        "type": "tab",
        "label": "hdc",
        "disabled": false,
        "info": "// nrlint function-eslint:off, align-to-grid:off\n",
        "env": []
    },
    {
        "id": "38b54e049c9b78a2",
        "type": "tab",
        "label": "Temp Sensor",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b50396a4b33e90b1",
        "type": "tab",
        "label": "Soil Sensor",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bc70283693a5505d",
        "type": "tab",
        "label": "Temp Sensor Dashboard",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1c38872debedfd03",
        "type": "tab",
        "label": "Soil Sensor Dashboard",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "df521596.125698",
        "type": "subflow",
        "name": "Persistence Helper",
        "info": "",
        "in": [
            {
                "x": 45.5,
                "y": 85,
                "wires": [
                    {
                        "id": "37028a91.0b1ffe"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 749.5,
                "y": 53,
                "wires": [
                    {
                        "id": "230dfeb6.8ba792",
                        "port": 0
                    }
                ]
            },
            {
                "x": 755,
                "y": 169,
                "wires": [
                    {
                        "id": "856afee0.348098",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "8663c14927fd9226",
        "type": "group",
        "z": "b50396a4b33e90b1",
        "style": {
            "stroke": "#b2b3bd",
            "stroke-opacity": "1",
            "fill": "#f2f3fb",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#32333b"
        },
        "nodes": [
            "4563ed83471c21aa",
            "217978befbbbfa0c",
            "ad38ab9b71758c44",
            "fa31029b0d9ea44e",
            "264fdaff09f951a8",
            "70bd2598b3dc9752",
            "7aef85e93b48cfb8",
            "242be5c39dd97c35",
            "9d8ca530ce7a8fe6",
            "1d3c5cb12682fd44",
            "4be4a97e523353ae",
            "94ba9f44e774b5d3",
            "391e880e222365df",
            "89aef8527d89cfc8",
            "9dc3e010eb5a4c11",
            "10fd35a071370328"
        ],
        "x": 1234,
        "y": 79,
        "w": 1092,
        "h": 242
    },
    {
        "id": "b579cf62cb73e1e1",
        "type": "group",
        "z": "38b54e049c9b78a2",
        "style": {
            "stroke": "#b2b3bd",
            "stroke-opacity": "1",
            "fill": "#f2f3fb",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#32333b"
        },
        "nodes": [
            "23dd42192bdf3cf4",
            "8d7a1961e832891c",
            "799bcc55e75820dc",
            "76ebbd54e2baf821",
            "bbae8aa638ab6d0b",
            "9ff38aedb3461248",
            "1df72ec8bbe13c74",
            "ef49b06b9ba1298e",
            "9a4a4781b7edf8f1",
            "18e4b7323abfdf08",
            "ca404cad8bf90237",
            "9149f65032c6221d",
            "51e7019d0714e1f0",
            "7764c3f0ed2557de",
            "8fefa9fe35b1a077",
            "2c40b1a2f4e49291",
            "2de80bc2ac8215f6",
            "3f69e791f089a0e8",
            "cab53c3b4389de15"
        ],
        "x": 1154,
        "y": 379,
        "w": 1132,
        "h": 282
    },
    {
        "id": "a1a35ba9bcbdc331",
        "type": "group",
        "z": "38b54e049c9b78a2",
        "style": {
            "stroke": "#b2b3bd",
            "stroke-opacity": "1",
            "fill": "#f2f3fb",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#32333b"
        },
        "nodes": [
            "e4b5701c2af25847",
            "d2ea8d7d09775caf",
            "1ee5ef1877f7a6cd",
            "01f748f2247f3fbd",
            "f83e5a17e7b96060",
            "cd5582fe9aaa9c58",
            "5bc45162be3fbdfe",
            "5c8c21abeab89706",
            "ede1a343e8c12cb5",
            "d4bba6abb7c27db9",
            "3f95966b286876c7",
            "89595967d3511b93",
            "15146a27e6c92f35",
            "d84ba076229b2830",
            "e27baaab49f78a23",
            "562e28fbfd47b8ca",
            "080b6aa76dca3552",
            "0afb2dbcec7fde45",
            "75340353cad78e79",
            "1d1912f4b5053182"
        ],
        "x": 1154,
        "y": 19,
        "w": 1132,
        "h": 322
    },
    {
        "id": "f174edef7e963973",
        "type": "group",
        "z": "38b54e049c9b78a2",
        "style": {
            "stroke": "#b2b3bd",
            "stroke-opacity": "1",
            "fill": "#f2f3fb",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#32333b"
        },
        "nodes": [
            "ad5d2e99db98a319",
            "f9859fcd0162da68",
            "e6d1614092aeee47",
            "1d795f7f17004b3f",
            "9e00dcd57b8dc3df",
            "e86acecaedbe6f26",
            "72c7de4bc8c0125b",
            "645c15023fe95923",
            "64f78280055f842f",
            "939bff43d93b75a3",
            "d5883ff21740d3b0",
            "8e01da3a1c3b2bd8",
            "ea864569f7d43714",
            "f9e92c035abfb61e",
            "f06412d54e78e072",
            "0af80c47b97f60cb",
            "5fe47adc65b0071f",
            "3e6aba94f453fe80",
            "0c245a8ee8c75d5b"
        ],
        "x": 1154,
        "y": 699,
        "w": 1132,
        "h": 282
    },
    {
        "id": "12e64bef091f31a6",
        "type": "group",
        "z": "38b54e049c9b78a2",
        "style": {
            "stroke": "#b2b3bd",
            "stroke-opacity": "1",
            "fill": "#f2f3fb",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#32333b"
        },
        "nodes": [
            "09e3d8fe6c820bfe",
            "23461503ee4730b8",
            "b286a66e1d9fa3d1",
            "e10d35d4855771a0",
            "1127302d79646348",
            "f2dcc0d9114b4049",
            "3201a185c0e8d6ba",
            "de39a0e80e3378a0",
            "306f9e72d0d7c840",
            "1bac8573e9ff5f8b",
            "c812b645056f71e2",
            "d2d230cc2d2e4744",
            "d12cc7df152d7800",
            "03cd5477d9dd23ba",
            "8b0d9387585ffa40",
            "73085b29fa0e72df",
            "3cd212e77e7802bc",
            "5e25c3a5d274d92a",
            "8288b460598eefb0"
        ],
        "x": 2434,
        "y": 39,
        "w": 1132,
        "h": 282
    },
    {
        "id": "f990b6905dd85c4c",
        "type": "group",
        "z": "38b54e049c9b78a2",
        "style": {
            "stroke": "#b2b3bd",
            "stroke-opacity": "1",
            "fill": "#f2f3fb",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#32333b"
        },
        "nodes": [
            "9fcf62de1eba7bfc",
            "441c56c9f57e7c36",
            "cf7cc869e4d9663c",
            "ca3a885323f3881d",
            "4cbbb10b5bef62a6",
            "796c868acd497c17",
            "0eb24d51f30bfafd",
            "b6eb9600104634f6",
            "29f173870be67ad1",
            "abf8f289599ffdfd",
            "b99209d777bc5577",
            "87707e20c0c3035b",
            "0b66c7d7883240f8",
            "b72adbf962de8de5",
            "97e79c728e3d0213",
            "bba5bc60f950589a",
            "92588b5572afbe71",
            "da1a2f6f760b74ef",
            "7b820a5bfb247f11"
        ],
        "x": 2434,
        "y": 379,
        "w": 1132,
        "h": 282
    },
    {
        "id": "5c256e156f8f7362",
        "type": "group",
        "z": "38b54e049c9b78a2",
        "style": {
            "stroke": "#b2b3bd",
            "stroke-opacity": "1",
            "fill": "#f2f3fb",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#32333b"
        },
        "nodes": [
            "bec2ad6efeddf6e3",
            "5b6fa4bc1f13c595",
            "0a144ae50fb8d1f2",
            "4bf49a859678b174",
            "fcba1e6a9ccddb66",
            "2181e868a5d2732e",
            "f46caf3d6c12b818",
            "eb98eb6c3b2fc4f2",
            "e2f0dd099997f631",
            "288d8650647e8af6",
            "0c83c20e142a0b8a",
            "bce8ebc03dec8282",
            "b267bf0b99ce7948",
            "f13619bee97a5da0",
            "e736f70c11de29f0",
            "5e8944e8a99ef5b4",
            "e50335a07bed3da5",
            "2591a9a7a473e839",
            "3c1d872032da9754"
        ],
        "x": 2434,
        "y": 679,
        "w": 1132,
        "h": 282
    },
    {
        "id": "f769dfedbb3f9361",
        "type": "group",
        "z": "bc70283693a5505d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c73832561b1e097b",
            "55cd926a43f6b5d0",
            "a533cdabe25bbcc5",
            "615974c7a01d8948",
            "e803cd54e4e081bb",
            "ba536606976c0c0a",
            "cf93dd3c8d08bd3a",
            "64900bd708ae264e",
            "b0c5a11c65a04ec2",
            "f6fb98a8cd22d3c4",
            "488968eed61e42e8",
            "4a81730fede584ba",
            "ea871f71a3d935d8",
            "45fdb4ed620d56fd",
            "158d25ae0e8a9820",
            "eb2de4b416b6c175",
            "075370ce2d65b7ec",
            "9a23299a2b64b216",
            "68d822b4122c24bb",
            "d3b3aefe8cca83fd",
            "47364060440be65d",
            "cb0c185b3383d45e"
        ],
        "x": 74,
        "y": 39,
        "w": 1152,
        "h": 362
    },
    {
        "id": "9d38849303bb0904",
        "type": "group",
        "z": "bc70283693a5505d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "37746e402dc0d5a7",
            "f739b3407e613c41",
            "2e5027e76ceb2584",
            "2bcb830197212210",
            "80e5ddfad95928f1",
            "c122a3610a1271e5",
            "5cfdae0cc77b851d",
            "3089793277f46e05",
            "b118f0e7d18962f5",
            "82ce3dee15b00e14",
            "3582f6808561444a",
            "9cd7d11e0fce3d9e",
            "646e0f3f20368094",
            "ac419fa6bc36883d",
            "696de90e3f4df436",
            "1921553e58ddab82",
            "7c8bac1f47172ffc",
            "5442f02ddce54e30",
            "c6bab75f2731b4ed",
            "bdf2762e47c695e7",
            "e9098045e3568254",
            "91d695cf4709930b"
        ],
        "x": 74,
        "y": 439,
        "w": 1152,
        "h": 342
    },
    {
        "id": "c79106f3978724b1",
        "type": "group",
        "z": "bc70283693a5505d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "be1d88a54079f559",
            "514ca58e1a0b9998",
            "0e5467e442361569",
            "aff3462d9231303f",
            "ccc7c69b63ecc3fa",
            "0ef0e35ae2df7ddc",
            "866726cf10160da8",
            "ead5219c8c2a1df1",
            "9f7c0c947c02e812",
            "75ef07c4ad71a9e9",
            "eb3a677c65e3d43e",
            "35d1502c601fe8be",
            "5a365871cd4171e0",
            "e28a1b6545d8f88c",
            "8e40ffae6ceb8e0f",
            "30884a0e0ebc3033",
            "8b16c61e4b195406",
            "b3854f5585baa59f",
            "37b1a9417dfa9cd6",
            "a4d6887f660bba58",
            "218e18966a8f365b",
            "5fafe5d75a23c903"
        ],
        "x": 74,
        "y": 819,
        "w": 1152,
        "h": 322
    },
    {
        "id": "c95b710f0ef9ba35",
        "type": "group",
        "z": "bc70283693a5505d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a2da559b3aee3cac",
            "9bde71c0c7ae22d8",
            "3a6d8130dd111692",
            "843306742c87cca7",
            "808d79b4c881e393",
            "095a1ae08ec1140d",
            "b189cbe958ad48e9",
            "7a59773f3316ea80",
            "0eb2880ada7beaba",
            "f337f8a3e76df055",
            "9b99fda537e90599",
            "76e0d6f24975cb7f",
            "048740a15c8911a7",
            "29055774fb469802",
            "9219cc7811e28215",
            "7ab06038ed0756e5",
            "e9284fca82e50250",
            "74b19042c3d582f7",
            "279573798d1f7768",
            "0a95d8c7778bc1ad",
            "9c6dc8f57a553455",
            "2cd35d7dd0fab841"
        ],
        "x": 74,
        "y": 1179,
        "w": 1132,
        "h": 342
    },
    {
        "id": "3a9c1833b4c05e0a",
        "type": "group",
        "z": "bc70283693a5505d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "5046a6a15ee7d97f",
            "8c3839aadb02f512",
            "d9860eca5db39148",
            "5350d03e715d0051",
            "a813a186d13bed0a",
            "c0ba90ae9869a099",
            "8c9268612330ee5b",
            "9ea9c00b920c1124",
            "47fa8d2e317be4f5",
            "8bf11a9034adc962",
            "4483fc54dbd049b6",
            "0b9f735f39b341f7",
            "9d332d132e44a12b",
            "e4af75d969b4995d",
            "c01c18f5aa2a779e",
            "719a09cd5e971b30",
            "2e7cf8e7d19c94a6",
            "6b5f692ee5606eec",
            "8d88ac2e170a2a75",
            "9d1f13ee2846f197",
            "7ec0090c6fabb488",
            "9c0d310434edc650"
        ],
        "x": 74,
        "y": 1979,
        "w": 1152,
        "h": 342
    },
    {
        "id": "13194d74ba141af5",
        "type": "group",
        "z": "1c38872debedfd03",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e00f0f19ae85430c",
            "dbedad5f2aa1c47f",
            "18b7c18450f89d38",
            "e96480476f6148e8",
            "c2fb4250887a3bcf",
            "f186890926bb32cf",
            "8ab508fd187a76a7",
            "da735ea34c15aae7",
            "9364fc7a7b95f8fa",
            "1fff0d4839d3733f",
            "9b79e33ddd96600c",
            "ea75f5e8a67fd999",
            "616cdaebb11b70c2",
            "0b79eb54d4357784",
            "a0c409a0e98d077d",
            "786ac98442c97dbd",
            "a162f7827e4eba45",
            "24a63a3a845b9b18",
            "d787a026ead01c66",
            "62edc8a7a73d5ac5",
            "7ca135f2c347d9c2",
            "66b726f81813406e"
        ],
        "x": 94,
        "y": 59,
        "w": 1212,
        "h": 342
    },
    {
        "id": "220f83ebf102e7bf",
        "type": "group",
        "z": "1c38872debedfd03",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f32fdd924cba25ea",
            "ef5cc9004f0d11c0",
            "4d958da5dde3b87f",
            "c5603f384540afdf",
            "fe1357f062f19c0b",
            "4ebf79e0bb35e80c",
            "0afbf0b606022e64",
            "181351b71577372b",
            "9aeb3026fd8cb2c8",
            "7068949c7b8f75cf",
            "a782c5d65e93a488",
            "8d49cae4cd85336f",
            "40e17e7b437448d5",
            "9296969863a71256",
            "f575953f1065b21d",
            "e1d0560fe496fb2f",
            "4d8140ddb77db6f8",
            "692a313a9995febf",
            "37859277b31c3929",
            "90218ac850cdfa75",
            "625346b025c599b9",
            "b61c98bb5263e9fc"
        ],
        "x": 94,
        "y": 419,
        "w": 1212,
        "h": 342
    },
    {
        "id": "899d9b9e2b22d539",
        "type": "group",
        "z": "1c38872debedfd03",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "0835a79f9f026a5c",
            "0a33242b81c3aaab",
            "6138042e238c887a",
            "823baa25b683013b",
            "f54a20d23c9b844b",
            "2986385bc9c2db71",
            "3fb0a6501f8b0d8d",
            "8c61d14d7363bd9b",
            "97d4b26bd53d79ff",
            "a889d076333d1739",
            "e3e2e3c5b7fd7eca",
            "2d98ee66a4f0edf0",
            "908960c771344a49",
            "480f22d087345714",
            "d65df08e9bb56e6f",
            "d3607e2a7017495d",
            "828183f93bec7bdf",
            "9da01625e14bc862",
            "ed843ec4d5a1fba1",
            "a7d838d661e714ea",
            "6706c4602dbb65fc",
            "058035e3adfa90f2"
        ],
        "x": 94,
        "y": 779,
        "w": 1212,
        "h": 342
    },
    {
        "id": "2162d783c16cd16b",
        "type": "group",
        "z": "1c38872debedfd03",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "37cbbd7344bd9c13",
            "3be916bbf9ed6c64",
            "4bebbe95db146bd0",
            "1c17e83ab9d0ce91",
            "63cafb1db38492c6",
            "390be2e866892975",
            "1a114dc9544c98de",
            "9eed662a5c8f61b6",
            "920756b72688880c",
            "97c0df4690822f27",
            "c8b26d17098f772f",
            "5785e9b0d1305e49",
            "1aa148a2f7bebf9a",
            "31714ee08fa90aa4",
            "ed82df83cea119a5",
            "88d5d41b67325d09",
            "4c87f51099aa2c0a",
            "38a01fcf8fd63456",
            "97281af6ee6cd475",
            "b12104ace572564c",
            "017df30556722f8c",
            "b6628e5521baf231"
        ],
        "x": 94,
        "y": 1159,
        "w": 1212,
        "h": 342
    },
    {
        "id": "ef945f45d99b1f23",
        "type": "group",
        "z": "1c38872debedfd03",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a2576b5b5a7818c9",
            "cedc44a87f2a7ea0",
            "652ad9493fbda555",
            "12935e482d2dcd27",
            "72e785f783461f6b",
            "e08d9d3911020d7e",
            "3b39a85a4401bf3f",
            "09367483814a4375",
            "50052891df74f02b",
            "1708858422042adc",
            "8c52e8f5a76a03db",
            "62b661bb42354d96",
            "b7906842e32ca339",
            "683652e61fb6c32a",
            "1befddb440ebe0e1",
            "8de9768da415dad6",
            "c6c8965321be71a2",
            "512dc37d40698c7b",
            "063b562d2c8b6208",
            "35106a0763f0643c",
            "a21b6429ee7db35a",
            "9b82a7bef292b644"
        ],
        "x": 94,
        "y": 1539,
        "w": 1212,
        "h": 342
    },
    {
        "id": "ef9c31610e5d0f68",
        "type": "group",
        "z": "b50396a4b33e90b1",
        "style": {
            "stroke": "#b2b3bd",
            "stroke-opacity": "1",
            "fill": "#f2f3fb",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#32333b"
        },
        "nodes": [
            "88a84be3b64723e7",
            "ad4aee3aba9644c0",
            "12220c8934a8d5b7",
            "a095e490b16fab97",
            "e9b8eef01fd2a5c9",
            "e493a72b0bf83b5f",
            "80b4ef5975bb134d",
            "961598c082d2c47d",
            "762c98afb44e9aeb",
            "375460a0719dbc93",
            "9a48ef428dca614c",
            "44d300d3131f5218",
            "9a8a18d3d1c5c708",
            "bb4ad7e6772dd40e",
            "47f9e8ee14e9d134",
            "5d7ff1bd846c255a"
        ],
        "x": 1234,
        "y": 359,
        "w": 1092,
        "h": 242
    },
    {
        "id": "f9895c6258bd1c27",
        "type": "group",
        "z": "b50396a4b33e90b1",
        "style": {
            "stroke": "#b2b3bd",
            "stroke-opacity": "1",
            "fill": "#f2f3fb",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#32333b"
        },
        "nodes": [
            "7e794dc9e0edacb2",
            "2591a5c778a065c6",
            "e0abed3d2163abc6",
            "0c96686ab704d4a3",
            "a69916fc9b72e554",
            "a3049f0ee1b6c504",
            "a9ff9d312565c663",
            "7b23ca937567bd61",
            "92ede44d8f222de6",
            "5908878471cbcfc5",
            "3713f5157f517f7a",
            "5c4ab044b60a5b30",
            "549496de3c20a1cf",
            "253e08ddf55f68f1",
            "2e00a6a6c6c623e8",
            "31d3c9782a35c2d4"
        ],
        "x": 1234,
        "y": 639,
        "w": 1092,
        "h": 242
    },
    {
        "id": "bd7804f9d8f3f54e",
        "type": "group",
        "z": "b50396a4b33e90b1",
        "style": {
            "stroke": "#b2b3bd",
            "stroke-opacity": "1",
            "fill": "#f2f3fb",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#32333b"
        },
        "nodes": [
            "86380fd3535c869f",
            "715cee35d0775154",
            "3bfdc79cfb70fd0f",
            "fad6c8443ba2f065",
            "c52338ba3fc4c3aa",
            "68fbc9c76508433f",
            "e0b9619d3d14673a",
            "3f486393d495b909",
            "07f14f3959225a89",
            "1ef4d418fa92becc",
            "28da842ed89ac72d",
            "dc4024092f5ab783",
            "47b7ed85e8856128",
            "089a301aae5b4c15",
            "15dce1e5381b6d10",
            "5cdeb5c1a9860cf2"
        ],
        "x": 2354,
        "y": 79,
        "w": 1092,
        "h": 242
    },
    {
        "id": "2185f0a93b1a69a0",
        "type": "group",
        "z": "b50396a4b33e90b1",
        "style": {
            "stroke": "#b2b3bd",
            "stroke-opacity": "1",
            "fill": "#f2f3fb",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#32333b"
        },
        "nodes": [
            "6501355bea310b65",
            "aa4769aad8b6ad6a",
            "f253839774d062ac",
            "f37347ad4729ef61",
            "a63f09b922b31032",
            "102f9a8046479be3",
            "6186ef6303838264",
            "04e44647e56a6241",
            "0a69e6d48a811d85",
            "462212ccb183fc47",
            "4bda3f1fd6c91b56",
            "0991eff36f303ac4",
            "aecc06e6034e6e1a",
            "b73d41317baf1b0e",
            "5032bef450a8cca1",
            "4a378ff7ff3bf66f"
        ],
        "x": 2354,
        "y": 359,
        "w": 1092,
        "h": 242
    },
    {
        "id": "8585e7d2f0c26715",
        "type": "group",
        "z": "3408b34b286dc17b",
        "style": {
            "stroke": "#b2b3bd",
            "stroke-opacity": "1",
            "fill": "#f2f3fb",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#32333b"
        },
        "nodes": [
            "303bf9f9ce3ae11f",
            "bab20d9a406ccee4",
            "11ebed61c92a7369",
            "f6d261fb78bfe5dc",
            "9de5b63a873d3f8c"
        ],
        "x": 2214,
        "y": 179,
        "w": 532,
        "h": 202
    },
    {
        "id": "af1ea1044f640237",
        "type": "group",
        "z": "bc70283693a5505d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "bd372aed04631208",
            "1448fa4280994e6a",
            "39dc16886c52c3a3",
            "9f428113b4d17208",
            "cf11b0139d15f504",
            "137b5b4e82797e01",
            "c9d79a214925595f",
            "301139d4436286a3",
            "c7d3430d192cb84e",
            "e44ddd4d97874dec",
            "211389631c60578b",
            "bfbcaeb6808ae830",
            "443564a756d194e6",
            "e899a59139513804",
            "53c03897a3a1f2c4",
            "5d60d239aa85acc2",
            "b0e544a311df3473",
            "f65db1feef73dd2e",
            "f05f78990a018a2c",
            "ae4a84b5e1ae9dfa",
            "e919eb6c062e18d6",
            "2f286f0d2a063e1c"
        ],
        "x": 74,
        "y": 1579,
        "w": 1152,
        "h": 342
    },
    {
        "id": "3b9fb07e0e6380c8",
        "type": "mqtt-broker",
        "name": "Soil Sensor",
        "broker": "eu1.cloud.thethings.industries",
        "port": "8883",
        "tls": "",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "e6db278fd742bc22",
        "type": "mqtt-broker",
        "name": "Temp Sensor",
        "broker": "eu1.cloud.thethings.industries",
        "port": "8883",
        "tls": "",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "bb17fb7a.4f4c88",
        "type": "mqtt-broker",
        "name": "MQTT Broker",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "6c246c6eea0c6943",
        "type": "mongodb4-client",
        "name": "temp_sensor",
        "protocol": "mongodb",
        "hostname": "",
        "port": "",
        "dbName": "kommdigital",
        "appName": "",
        "authSource": "",
        "authMechanism": "DEFAULT",
        "tls": false,
        "tlsCAFile": "",
        "tlsCertificateKeyFile": "",
        "tlsInsecure": false,
        "connectTimeoutMS": "30000",
        "socketTimeoutMS": "0",
        "minPoolSize": "0",
        "maxPoolSize": "100",
        "maxIdleTimeMS": "0",
        "uri": "mongodb+srv://spekterbangla:bPbpqQtXGUh8sQc1@cluster0.ujhky.mongodb.net/atlashub-prod-clone?retryWrites=true&w=majority",
        "advanced": "{}",
        "uriTabActive": "tab-uri-advanced"
    },
    {
        "id": "56dcf10072e2a900",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#04a7c8",
                "baseFont": "Arial,Arial,Helvetica,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#000000",
                "baseFont": "Georgia,Georgia,serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "group1",
                "default": "#4B7930",
                "baseColor": "#88d75b",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#04a7c8",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1ed5fa",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#04a7c8",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "Arial,Arial,Helvetica,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Spekter Dashboards",
            "hideToolbar": "false",
            "allowSwipe": "true",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 15,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "7f69e995c3266c2c",
        "type": "mqtt-broker",
        "name": "Soil Sensor",
        "broker": "eu1.cloud.thethings.industries",
        "port": "8883",
        "tls": "",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "b0ba5a219f0523bb",
        "type": "ui_group",
        "name": "device1",
        "tab": "f806ccbe1d3a8e71",
        "order": 1,
        "disp": false,
        "width": "26",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f806ccbe1d3a8e71",
        "type": "ui_tab",
        "name": "Soil Sensor Dashboard",
        "icon": "dashboard",
        "order": 6,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d6de265f36f661c0",
        "type": "ui_group",
        "name": "sensebox1",
        "tab": "94ac640c96f08ba8",
        "order": 1,
        "disp": false,
        "width": "26",
        "collapse": false,
        "className": ""
    },
    {
        "id": "94ac640c96f08ba8",
        "type": "ui_tab",
        "name": "Temperature Sensor Dashboard",
        "icon": "mi-device_thermostat",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "4c0dae9a2cd86da7",
        "type": "ui_group",
        "name": "sensebox2",
        "tab": "94ac640c96f08ba8",
        "order": 2,
        "disp": false,
        "width": "26",
        "collapse": false,
        "className": ""
    },
    {
        "id": "2cfaf224e1791a9f",
        "type": "ui_group",
        "name": "sensebox3",
        "tab": "94ac640c96f08ba8",
        "order": 3,
        "disp": false,
        "width": "26",
        "collapse": false,
        "className": ""
    },
    {
        "id": "9bc8f00db1f06ac5",
        "type": "ui_group",
        "name": "sensebox4",
        "tab": "94ac640c96f08ba8",
        "order": 4,
        "disp": false,
        "width": "26",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e94fdd1c5dec442c",
        "type": "ui_group",
        "name": "sensebox6",
        "tab": "94ac640c96f08ba8",
        "order": 5,
        "disp": false,
        "width": "26",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4e8918bf6c385740",
        "type": "ui_group",
        "name": "sensebox7",
        "tab": "94ac640c96f08ba8",
        "order": 6,
        "disp": false,
        "width": "26",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ab874b0e93334cc4",
        "type": "ui_group",
        "name": "device2",
        "tab": "f806ccbe1d3a8e71",
        "order": 2,
        "disp": false,
        "width": "26",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a60134d115fb105c",
        "type": "ui_group",
        "name": "device3",
        "tab": "f806ccbe1d3a8e71",
        "order": 3,
        "disp": false,
        "width": "26",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f5ba2cb56977521d",
        "type": "ui_group",
        "name": "device4",
        "tab": "f806ccbe1d3a8e71",
        "order": 4,
        "disp": false,
        "width": "26",
        "collapse": false,
        "className": ""
    },
    {
        "id": "7e566a81e6655eca",
        "type": "ui_group",
        "name": "device5",
        "tab": "f806ccbe1d3a8e71",
        "order": 5,
        "disp": false,
        "width": "26",
        "collapse": false,
        "className": ""
    },
    {
        "id": "9f8ee35ccdb652f3",
        "type": "ui_tab",
        "name": "Smart-River Dashboard",
        "icon": "mi-water",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "eee0ecc5a875c595",
        "type": "ui_tab",
        "name": "HDC Dashboard",
        "icon": "mi-thunderstorm",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "c0210882ee87c013",
        "type": "ui_spacer",
        "z": "b61ad1d4aecdd073",
        "name": "spacer",
        "group": "",
        "order": 1,
        "width": 3,
        "height": 1
    },
    {
        "id": "267a204aac193fde",
        "type": "ui_spacer",
        "z": "b61ad1d4aecdd073",
        "name": "spacer",
        "group": "",
        "order": 8,
        "width": 3,
        "height": 1
    },
    {
        "id": "5430785f4c1c531e",
        "type": "ui_spacer",
        "z": "b61ad1d4aecdd073",
        "name": "spacer",
        "group": "",
        "order": 9,
        "width": 3,
        "height": 1
    },
    {
        "id": "15f2b98a96bbe1c6",
        "type": "ui_spacer",
        "z": "b61ad1d4aecdd073",
        "name": "spacer",
        "group": "",
        "order": 16,
        "width": 3,
        "height": 1
    },
    {
        "id": "b9b735c7cdd5be4b",
        "type": "ui_spacer",
        "z": "b61ad1d4aecdd073",
        "name": "spacer",
        "group": "",
        "order": 17,
        "width": 5,
        "height": 1
    },
    {
        "id": "9e4e45dfded7bb5e",
        "type": "ui_spacer",
        "z": "b61ad1d4aecdd073",
        "name": "spacer",
        "group": "",
        "order": 23,
        "width": 5,
        "height": 1
    },
    {
        "id": "531ff3ab73b06aba",
        "type": "ui_spacer",
        "z": "b61ad1d4aecdd073",
        "name": "spacer",
        "group": "",
        "order": 24,
        "width": 10,
        "height": 1
    },
    {
        "id": "fbe736cf84ff9dee",
        "type": "ui_spacer",
        "z": "b61ad1d4aecdd073",
        "name": "spacer",
        "group": "",
        "order": 26,
        "width": 10,
        "height": 1
    },
    {
        "id": "a18c4138916141d6",
        "type": "ui_spacer",
        "z": "b61ad1d4aecdd073",
        "name": "spacer",
        "group": "",
        "order": 40,
        "width": 12,
        "height": 1
    },
    {
        "id": "821e3b75b85938af",
        "type": "ui_spacer",
        "z": "b61ad1d4aecdd073",
        "name": "spacer",
        "group": "",
        "order": 44,
        "width": 3,
        "height": 1
    },
    {
        "id": "b5fa1a777c2679a8",
        "type": "ui_spacer",
        "z": "b61ad1d4aecdd073",
        "name": "spacer",
        "group": "",
        "order": 46,
        "width": 3,
        "height": 1
    },
    {
        "id": "30570aa036decf9d",
        "type": "ui_spacer",
        "z": "b61ad1d4aecdd073",
        "name": "spacer",
        "group": "",
        "order": 49,
        "width": 3,
        "height": 1
    },
    {
        "id": "3ddf9f8ea8adb086",
        "type": "ui_spacer",
        "z": "b61ad1d4aecdd073",
        "name": "spacer",
        "group": "",
        "order": 50,
        "width": 3,
        "height": 1
    },
    {
        "id": "07f013ba3585e2a0",
        "type": "ui_spacer",
        "z": "b61ad1d4aecdd073",
        "name": "spacer",
        "group": "",
        "order": 51,
        "width": 7,
        "height": 1
    },
    {
        "id": "93e6d1bdb37ffc4f",
        "type": "ui_spacer",
        "z": "b61ad1d4aecdd073",
        "name": "spacer",
        "group": "",
        "order": 52,
        "width": 7,
        "height": 1
    },
    {
        "id": "cfefd77163917f6c",
        "type": "ui_spacer",
        "z": "b61ad1d4aecdd073",
        "name": "spacer",
        "group": "",
        "order": 53,
        "width": 26,
        "height": 1
    },
    {
        "id": "0b6e79cdba66ec26",
        "type": "ui_spacer",
        "z": "b61ad1d4aecdd073",
        "name": "spacer",
        "group": "",
        "order": 56,
        "width": 1,
        "height": 1
    },
    {
        "id": "30d00759131d690d",
        "type": "ui_spacer",
        "z": "b61ad1d4aecdd073",
        "name": "spacer",
        "group": "",
        "order": 58,
        "width": 1,
        "height": 1
    },
    {
        "id": "b7cbb0c171c1300c",
        "type": "ui_spacer",
        "z": "b61ad1d4aecdd073",
        "name": "spacer",
        "group": "",
        "order": 59,
        "width": 5,
        "height": 1
    },
    {
        "id": "addf4768d215b15b",
        "type": "ui_spacer",
        "z": "b61ad1d4aecdd073",
        "name": "spacer",
        "group": "",
        "order": 60,
        "width": 1,
        "height": 1
    },
    {
        "id": "26c1415274d8e3aa",
        "type": "ui_spacer",
        "z": "b61ad1d4aecdd073",
        "name": "spacer",
        "group": "",
        "order": 61,
        "width": 5,
        "height": 1
    },
    {
        "id": "5591fc3386a7df28",
        "type": "ui_spacer",
        "z": "b61ad1d4aecdd073",
        "name": "spacer",
        "group": "",
        "order": 62,
        "width": 1,
        "height": 1
    },
    {
        "id": "d2ed9e4f7b38a759",
        "type": "ui_spacer",
        "z": "b61ad1d4aecdd073",
        "name": "spacer",
        "group": "",
        "order": 63,
        "width": 5,
        "height": 1
    },
    {
        "id": "bc9b3255e8789669",
        "type": "ui_spacer",
        "z": "b61ad1d4aecdd073",
        "name": "spacer",
        "group": "",
        "order": 64,
        "width": 1,
        "height": 1
    },
    {
        "id": "d711e139750ef4c4",
        "type": "ui_spacer",
        "z": "b61ad1d4aecdd073",
        "name": "spacer",
        "group": "",
        "order": 65,
        "width": 5,
        "height": 1
    },
    {
        "id": "2823e97b45a2dd8c",
        "type": "ui_spacer",
        "z": "b61ad1d4aecdd073",
        "name": "spacer",
        "group": "",
        "order": 66,
        "width": 1,
        "height": 1
    },
    {
        "id": "28e651723374d914",
        "type": "ui_spacer",
        "z": "b61ad1d4aecdd073",
        "name": "spacer",
        "group": "",
        "order": 68,
        "width": 1,
        "height": 1
    },
    {
        "id": "90c1e1f7a3106e4b",
        "type": "ui_spacer",
        "z": "b61ad1d4aecdd073",
        "name": "spacer",
        "group": "",
        "order": 69,
        "width": 1,
        "height": 1
    },
    {
        "id": "79ea0b78c8325566",
        "type": "ui_spacer",
        "z": "b61ad1d4aecdd073",
        "name": "spacer",
        "group": "",
        "order": 70,
        "width": 1,
        "height": 1
    },
    {
        "id": "83ee4e8253a98f58",
        "type": "ui_spacer",
        "z": "b61ad1d4aecdd073",
        "name": "spacer",
        "group": "",
        "order": 71,
        "width": 1,
        "height": 1
    },
    {
        "id": "77af4d02e467c4bd",
        "type": "ui_spacer",
        "z": "b61ad1d4aecdd073",
        "name": "spacer",
        "group": "",
        "order": 72,
        "width": 1,
        "height": 1
    },
    {
        "id": "da8795f2f0a0a784",
        "type": "ui_spacer",
        "z": "b61ad1d4aecdd073",
        "name": "spacer",
        "group": "",
        "order": 73,
        "width": 1,
        "height": 1
    },
    {
        "id": "fa71e4694d3ee150",
        "type": "ui_spacer",
        "z": "b61ad1d4aecdd073",
        "name": "spacer",
        "group": "",
        "order": 75,
        "width": 1,
        "height": 1
    },
    {
        "id": "c1cd88757972327e",
        "type": "ui_spacer",
        "z": "b61ad1d4aecdd073",
        "name": "spacer",
        "group": "",
        "order": 76,
        "width": 1,
        "height": 1
    },
    {
        "id": "fa04aadc97cc34b5",
        "type": "ui_spacer",
        "z": "b61ad1d4aecdd073",
        "name": "spacer",
        "group": "",
        "order": 77,
        "width": 1,
        "height": 1
    },
    {
        "id": "d5e6c385bacfd9f7",
        "type": "ui_spacer",
        "z": "b61ad1d4aecdd073",
        "name": "spacer",
        "group": "",
        "order": 78,
        "width": 1,
        "height": 1
    },
    {
        "id": "8e3f1b8732391855",
        "type": "ui_spacer",
        "z": "b61ad1d4aecdd073",
        "name": "spacer",
        "group": "",
        "order": 79,
        "width": 1,
        "height": 1
    },
    {
        "id": "09c59bc75b60d385",
        "type": "ui_spacer",
        "z": "b61ad1d4aecdd073",
        "name": "spacer",
        "group": "",
        "order": 80,
        "width": 1,
        "height": 1
    },
    {
        "id": "625d8c7324cc3ebd",
        "type": "ui_tab",
        "name": "Home",
        "icon": "mi-home",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "80171453c5dc622f",
        "type": "ui_group",
        "name": "temp_sensor",
        "tab": "625d8c7324cc3ebd",
        "order": 3,
        "disp": false,
        "width": "14",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b44e2d3b2bac6f8e",
        "type": "ui_group",
        "name": "soil_sensor",
        "tab": "625d8c7324cc3ebd",
        "order": 2,
        "disp": false,
        "width": "14",
        "collapse": false,
        "className": ""
    },
    {
        "id": "42506ef4f48f2238",
        "type": "ui_tab",
        "name": "Sensebox1",
        "icon": "dashboard",
        "order": 7,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "a5281de7acfee762",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "42506ef4f48f2238",
        "order": 1,
        "disp": false,
        "width": "26",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a9ef84d6f756cc63",
        "type": "ui_tab",
        "name": "Sensebox2",
        "icon": "dashboard",
        "order": 8,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "f22c80946683f6a8",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "a9ef84d6f756cc63",
        "order": 1,
        "disp": false,
        "width": "26",
        "collapse": false,
        "className": ""
    },
    {
        "id": "89004d97e0d2feca",
        "type": "ui_tab",
        "name": "Sensebox3",
        "icon": "dashboard",
        "order": 9,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "894ffb0a4bc5684d",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "89004d97e0d2feca",
        "order": 1,
        "disp": false,
        "width": "26",
        "collapse": false,
        "className": ""
    },
    {
        "id": "93250a0f08426bfd",
        "type": "ui_tab",
        "name": "Sensebox4",
        "icon": "dashboard",
        "order": 10,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "2227c2cd15473dbf",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "93250a0f08426bfd",
        "order": 1,
        "disp": false,
        "width": "26",
        "collapse": false,
        "className": ""
    },
    {
        "id": "872f34352fd8d2e6",
        "type": "ui_tab",
        "name": "Sensebox6",
        "icon": "dashboard",
        "order": 11,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "875b63263cbb26ab",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "872f34352fd8d2e6",
        "order": 1,
        "disp": false,
        "width": "26",
        "collapse": false,
        "className": ""
    },
    {
        "id": "85400c10e1d73267",
        "type": "ui_tab",
        "name": "Sensebox7",
        "icon": "dashboard",
        "order": 12,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "2f8d4cbc385125d3",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "85400c10e1d73267",
        "order": 1,
        "disp": false,
        "width": "26",
        "collapse": false,
        "className": ""
    },
    {
        "id": "0430059312e83e8c",
        "type": "ui_tab",
        "name": "Device1",
        "icon": "dashboard",
        "order": 13,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "07177cef4a16e738",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "0430059312e83e8c",
        "order": 1,
        "disp": false,
        "width": "26",
        "collapse": false,
        "className": ""
    },
    {
        "id": "5cee6376e1eb2a66",
        "type": "ui_tab",
        "name": "Device2",
        "icon": "dashboard",
        "order": 14,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "dcfb4c81b704c5b9",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "5cee6376e1eb2a66",
        "order": 1,
        "disp": false,
        "width": "26",
        "collapse": false,
        "className": ""
    },
    {
        "id": "58ee202118ef70c8",
        "type": "ui_tab",
        "name": "Device3",
        "icon": "dashboard",
        "order": 15,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "2ace20c313dc6130",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "58ee202118ef70c8",
        "order": 1,
        "disp": false,
        "width": "26",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a76c2a7653d64d6b",
        "type": "ui_tab",
        "name": "Device4",
        "icon": "dashboard",
        "order": 16,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "c9e43854125296e0",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "a76c2a7653d64d6b",
        "order": 1,
        "disp": false,
        "width": "26",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b0838b6eeeaeb895",
        "type": "ui_tab",
        "name": "Device5",
        "icon": "dashboard",
        "order": 17,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "3ab557bf8f377e10",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "b0838b6eeeaeb895",
        "order": 1,
        "disp": false,
        "width": "26",
        "collapse": false,
        "className": ""
    },
    {
        "id": "cb49bbcb751fd7de",
        "type": "ui_group",
        "name": "map",
        "tab": "625d8c7324cc3ebd",
        "order": 1,
        "disp": false,
        "width": "28",
        "collapse": false,
        "className": ""
    },
    {
        "id": "dcbd3f880159c553",
        "type": "ui_tab",
        "name": "Home2",
        "icon": "dashboard",
        "order": 1,
        "disabled": true,
        "hidden": true
    },
    {
        "id": "cfccbb32126b13e3",
        "type": "ui_spacer",
        "z": "3408b34b286dc17b",
        "name": "spacer",
        "group": "",
        "order": 2,
        "width": 1,
        "height": 1
    },
    {
        "id": "62f4f86bf22ea8a9",
        "type": "ui_spacer",
        "z": "3408b34b286dc17b",
        "name": "spacer",
        "group": "",
        "order": 3,
        "width": 1,
        "height": 1
    },
    {
        "id": "7ec452f1fbe309a7",
        "type": "ui_spacer",
        "z": "3408b34b286dc17b",
        "name": "spacer",
        "group": "",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "a0de0d1d864546a8",
        "type": "ui_spacer",
        "z": "3408b34b286dc17b",
        "name": "spacer",
        "group": "",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "eb61485204bd2867",
        "type": "ui_spacer",
        "z": "3408b34b286dc17b",
        "name": "spacer",
        "group": "",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "ed494590e048fad7",
        "type": "ui_spacer",
        "z": "3408b34b286dc17b",
        "name": "spacer",
        "group": "",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "54e69c1fa3d8bae5",
        "type": "ui_spacer",
        "z": "3408b34b286dc17b",
        "name": "spacer",
        "group": "",
        "order": 8,
        "width": 1,
        "height": 1
    },
    {
        "id": "bedf014b255370b7",
        "type": "ui_spacer",
        "z": "3408b34b286dc17b",
        "name": "spacer",
        "group": "",
        "order": 9,
        "width": 1,
        "height": 1
    },
    {
        "id": "34290e2d69e18151",
        "type": "ui_spacer",
        "z": "3408b34b286dc17b",
        "name": "spacer",
        "group": "",
        "order": 10,
        "width": 1,
        "height": 1
    },
    {
        "id": "bd4ebe213bee5f70",
        "type": "ui_spacer",
        "z": "3408b34b286dc17b",
        "name": "spacer",
        "group": "",
        "order": 11,
        "width": 1,
        "height": 1
    },
    {
        "id": "bb4d7818b2c3cf1a",
        "type": "ui_spacer",
        "z": "3408b34b286dc17b",
        "name": "spacer",
        "group": "",
        "order": 12,
        "width": 1,
        "height": 1
    },
    {
        "id": "df6620f3490217b1",
        "type": "ui_spacer",
        "z": "3408b34b286dc17b",
        "name": "spacer",
        "group": "",
        "order": 13,
        "width": 1,
        "height": 1
    },
    {
        "id": "53c8975070994810",
        "type": "ui_spacer",
        "z": "3408b34b286dc17b",
        "name": "spacer",
        "group": "",
        "order": 14,
        "width": 1,
        "height": 1
    },
    {
        "id": "5ca0a0b5adbad841",
        "type": "ui_spacer",
        "z": "3408b34b286dc17b",
        "name": "spacer",
        "group": "",
        "order": 15,
        "width": 11,
        "height": 1
    },
    {
        "id": "3722e10843175592",
        "type": "ui_spacer",
        "z": "3408b34b286dc17b",
        "name": "spacer",
        "group": "",
        "order": 17,
        "width": 11,
        "height": 1
    },
    {
        "id": "ab99718827299d91",
        "type": "ui_spacer",
        "z": "3408b34b286dc17b",
        "name": "spacer",
        "group": "",
        "order": 18,
        "width": 4,
        "height": 1
    },
    {
        "id": "a5b7e05544310606",
        "type": "ui_spacer",
        "z": "3408b34b286dc17b",
        "name": "spacer",
        "group": "",
        "order": 20,
        "width": 8,
        "height": 1
    },
    {
        "id": "b9b0e8bc687e9b9a",
        "type": "ui_spacer",
        "z": "3408b34b286dc17b",
        "name": "spacer",
        "group": "",
        "order": 22,
        "width": 4,
        "height": 1
    },
    {
        "id": "fc9199f7654b3c8f",
        "type": "ui_group",
        "name": "smart_river",
        "tab": "625d8c7324cc3ebd",
        "order": 4,
        "disp": false,
        "width": "14",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f7e86caabc74a42c",
        "type": "ui_group",
        "name": "hdc",
        "tab": "625d8c7324cc3ebd",
        "order": 5,
        "disp": false,
        "width": "14",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a1f1d55b4027e17f",
        "type": "ui_group",
        "name": "Default",
        "tab": "dcbd3f880159c553",
        "order": 2,
        "disp": false,
        "width": "14",
        "collapse": false,
        "className": ""
    },
    {
        "id": "274d48fc53ea185d",
        "type": "ui_spacer",
        "z": "edc51ffb760624f6",
        "name": "spacer",
        "group": "",
        "order": 1,
        "width": 7,
        "height": 1
    },
    {
        "id": "56b907fdf8fe1838",
        "type": "ui_spacer",
        "z": "edc51ffb760624f6",
        "name": "spacer",
        "group": "",
        "order": 3,
        "width": 6,
        "height": 1
    },
    {
        "id": "a8f8c812caffe2f3",
        "type": "ui_spacer",
        "z": "edc51ffb760624f6",
        "name": "spacer",
        "group": "",
        "order": 4,
        "width": 8,
        "height": 1
    },
    {
        "id": "9005d8917ad7f046",
        "type": "ui_spacer",
        "z": "edc51ffb760624f6",
        "name": "spacer",
        "group": "",
        "order": 6,
        "width": 7,
        "height": 1
    },
    {
        "id": "f21b304f1a2ea698",
        "type": "ui_spacer",
        "z": "edc51ffb760624f6",
        "name": "spacer",
        "group": "",
        "order": 14,
        "width": 5,
        "height": 1
    },
    {
        "id": "4102e5a8bd3385a7",
        "type": "ui_spacer",
        "z": "edc51ffb760624f6",
        "name": "spacer",
        "group": "",
        "order": 15,
        "width": 5,
        "height": 1
    },
    {
        "id": "2ae5dd7b35cf2691",
        "type": "ui_spacer",
        "z": "edc51ffb760624f6",
        "name": "spacer",
        "group": "",
        "order": 16,
        "width": 5,
        "height": 1
    },
    {
        "id": "0dfb6672c6b9d56d",
        "type": "ui_spacer",
        "z": "edc51ffb760624f6",
        "name": "spacer",
        "group": "",
        "order": 17,
        "width": 5,
        "height": 1
    },
    {
        "id": "35c7db09989a89bd",
        "type": "ui_spacer",
        "z": "edc51ffb760624f6",
        "name": "spacer",
        "group": "",
        "order": 18,
        "width": 5,
        "height": 1
    },
    {
        "id": "949fb570f9f1caaf",
        "type": "ui_spacer",
        "z": "edc51ffb760624f6",
        "name": "spacer",
        "group": "",
        "order": 19,
        "width": 5,
        "height": 1
    },
    {
        "id": "69191a2c9f95b121",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "eee0ecc5a875c595",
        "order": 3,
        "disp": false,
        "width": "28",
        "collapse": false,
        "className": "group1.css"
    },
    {
        "id": "bf886739ec761ed7",
        "type": "ui_group",
        "name": "DropDown",
        "tab": "eee0ecc5a875c595",
        "order": 1,
        "disp": false,
        "width": "28",
        "collapse": false,
        "className": ""
    },
    {
        "id": "53ba58bbd5a0e3ec",
        "type": "ui_group",
        "name": "Group 2",
        "tab": "eee0ecc5a875c595",
        "order": 4,
        "disp": false,
        "width": "14",
        "collapse": false,
        "className": ""
    },
    {
        "id": "97bdce66f3a73610",
        "type": "ui_group",
        "name": "Group 3",
        "tab": "eee0ecc5a875c595",
        "order": 5,
        "disp": false,
        "width": "14",
        "collapse": false,
        "className": ""
    },
    {
        "id": "09275a5a07d1edaf",
        "type": "ui_group",
        "name": "Group 5",
        "tab": "eee0ecc5a875c595",
        "order": 7,
        "disp": false,
        "width": "14",
        "collapse": false,
        "className": ""
    },
    {
        "id": "1073af88d25793d2",
        "type": "ui_group",
        "name": "Group 6",
        "tab": "eee0ecc5a875c595",
        "order": 8,
        "disp": false,
        "width": "14",
        "collapse": false,
        "className": ""
    },
    {
        "id": "bcafd918d66f900b",
        "type": "ui_group",
        "name": "Group 4",
        "tab": "eee0ecc5a875c595",
        "order": 6,
        "disp": false,
        "width": "28",
        "collapse": false,
        "className": ""
    },
    {
        "id": "fa0352a6804d5547",
        "type": "ui_group",
        "name": "Group 8",
        "tab": "eee0ecc5a875c595",
        "order": 10,
        "disp": false,
        "width": "14",
        "collapse": false,
        "className": ""
    },
    {
        "id": "dd23904b562f14af",
        "type": "ui_group",
        "name": "Group 9",
        "tab": "eee0ecc5a875c595",
        "order": 11,
        "disp": false,
        "width": "14",
        "collapse": false,
        "className": ""
    },
    {
        "id": "bf3fc684625c2252",
        "type": "ui_group",
        "name": "Group 10",
        "tab": "eee0ecc5a875c595",
        "order": 12,
        "disp": false,
        "width": "14",
        "collapse": false,
        "className": ""
    },
    {
        "id": "47179df655afd537",
        "type": "ui_group",
        "name": "Group 7",
        "tab": "eee0ecc5a875c595",
        "order": 9,
        "disp": false,
        "width": "14",
        "collapse": false,
        "className": ""
    },
    {
        "id": "5dedb706.b6d6a8",
        "type": "ui_group",
        "z": "edc51ffb760624f6",
        "name": "Default",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6"
    },
    {
        "id": "b1d9d1fa.350a38",
        "type": "ui_group",
        "name": "Chart with integer X axis",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "12"
    },
    {
        "id": "43a6bc36c8caaea6",
        "type": "ui_group",
        "name": "DropDown",
        "tab": "9f8ee35ccdb652f3",
        "order": 1,
        "disp": false,
        "width": "28",
        "collapse": false,
        "className": ""
    },
    {
        "id": "765c07f1cdaa9cd0",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "9f8ee35ccdb652f3",
        "order": 2,
        "disp": false,
        "width": "28",
        "collapse": false,
        "className": ""
    },
    {
        "id": "354af64960eaefb8",
        "type": "ui_group",
        "name": "Group 2",
        "tab": "9f8ee35ccdb652f3",
        "order": 3,
        "disp": false,
        "width": "14",
        "collapse": false,
        "className": ""
    },
    {
        "id": "1d6ed5f8495a93ed",
        "type": "ui_group",
        "name": "Group 3",
        "tab": "9f8ee35ccdb652f3",
        "order": 4,
        "disp": false,
        "width": "14",
        "collapse": false,
        "className": ""
    },
    {
        "id": "cb14f9b269b7b678",
        "type": "ui_group",
        "name": "Group 4",
        "tab": "9f8ee35ccdb652f3",
        "order": 5,
        "disp": false,
        "width": "28",
        "collapse": false,
        "className": ""
    },
    {
        "id": "16c0e5833a9d84b6",
        "type": "ui_group",
        "name": "Group 6",
        "tab": "9f8ee35ccdb652f3",
        "order": 7,
        "disp": false,
        "width": "14",
        "collapse": false,
        "className": ""
    },
    {
        "id": "48a7fed7fc7aea55",
        "type": "ui_group",
        "name": "Group 5",
        "tab": "9f8ee35ccdb652f3",
        "order": 6,
        "disp": false,
        "width": "14",
        "collapse": false,
        "className": ""
    },
    {
        "id": "236b027e738eafc6",
        "type": "ui_group",
        "name": "Group 8",
        "tab": "9f8ee35ccdb652f3",
        "order": 9,
        "disp": false,
        "width": "14",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f2cd648f5c75a0b2",
        "type": "ui_group",
        "name": "Group 9",
        "tab": "9f8ee35ccdb652f3",
        "order": 10,
        "disp": false,
        "width": "14",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f8dd96b87a2133e2",
        "type": "ui_group",
        "name": "Group 10",
        "tab": "9f8ee35ccdb652f3",
        "order": 11,
        "disp": false,
        "width": "14",
        "collapse": false,
        "className": ""
    },
    {
        "id": "9bf0d3ee6d4a7310",
        "type": "ui_group",
        "name": "Group 7",
        "tab": "9f8ee35ccdb652f3",
        "order": 8,
        "disp": false,
        "width": "14",
        "collapse": false,
        "className": ""
    },
    {
        "id": "230dfeb6.8ba792",
        "type": "change",
        "z": "df521596.125698",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "restore",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 589.5,
        "y": 53,
        "wires": [
            []
        ]
    },
    {
        "id": "37028a91.0b1ffe",
        "type": "json",
        "z": "df521596.125698",
        "name": "",
        "x": 175.5,
        "y": 85,
        "wires": [
            [
                "230dfeb6.8ba792"
            ]
        ]
    },
    {
        "id": "b78fb72d.ec3d78",
        "type": "catch",
        "z": "df521596.125698",
        "name": "",
        "scope": [
            "37028a91.0b1ffe"
        ],
        "x": 183.5,
        "y": 117,
        "wires": [
            [
                "c7f43b1c.b7b5d8"
            ]
        ]
    },
    {
        "id": "c7f43b1c.b7b5d8",
        "type": "change",
        "z": "df521596.125698",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 354.5,
        "y": 116,
        "wires": [
            [
                "230dfeb6.8ba792"
            ]
        ]
    },
    {
        "id": "856afee0.348098",
        "type": "inject",
        "z": "df521596.125698",
        "name": "Trigger restore",
        "repeat": "",
        "crontab": "",
        "once": true,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 618.5,
        "y": 169,
        "wires": [
            []
        ]
    },
    {
        "id": "6f13ecf5a60dd89f",
        "type": "inject",
        "z": "3408b34b286dc17b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 680,
        "y": 580,
        "wires": [
            [
                "80453639cd683d88",
                "2b59b873a65d882d",
                "6eec574c622e891e"
            ]
        ]
    },
    {
        "id": "80453639cd683d88",
        "type": "http request",
        "z": "3408b34b286dc17b",
        "name": "hdc",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://137.184.228.7:5007/hdc?ags=09274127&page=1&limit=10000&withData=true&timeFrame=1440",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 910,
        "y": 600,
        "wires": [
            [
                "e485c9673579ae6a"
            ]
        ]
    },
    {
        "id": "e485c9673579ae6a",
        "type": "json",
        "z": "3408b34b286dc17b",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1050,
        "y": 620,
        "wires": [
            [
                "92b461f3600619ca"
            ]
        ]
    },
    {
        "id": "92b461f3600619ca",
        "type": "function",
        "z": "3408b34b286dc17b",
        "name": "extract",
        "func": "// Extract the result object from the incoming message payload\nmsg.payload = msg.payload.data.result;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 620,
        "wires": [
            [
                "a0db091cad756707"
            ]
        ]
    },
    {
        "id": "0211f0a47c0e1f6c",
        "type": "function",
        "z": "3408b34b286dc17b",
        "name": "sensor_location_sr",
        "func": "var sensors = msg.payload;\nvar output = [];\n\nsensors.forEach(sensor => {\n    var name = sensor.name;\n    var lat = sensor.location.lat;\n    var lng = sensor.location.lng;\n    var solecorrectionvalue = sensor.soleCorrectionValue;\n\n    // Initialize variables\n    var lastValue = 0; // Default to 0 if no valid value is found\n    var water_level = 0; // Default to 0 if no valid value is found\n\n    // Check if the data array is not empty and contains valid data\n    if (sensor.data && sensor.data.length > 0) {\n        var lastDataEntry = sensor.data[sensor.data.length - 1];\n        if (lastDataEntry && lastDataEntry._value !== undefined && lastDataEntry._value !== null) {\n            lastValue = lastDataEntry._value;\n            // Calculate water_level\n            water_level = solecorrectionvalue - lastValue;\n\n            // Ensure water_level is not negative\n            if (water_level < 0) {\n                water_level = 0;\n            }\n        }\n    }\n\n    // Creating the tooltip string\n    var tooltip = \"Sensor Name: \" + name + \"<br>Latitude: \" + lat + \"<br>Longitude: \" + lng + \"<br>Sole Correction Value: \" + solecorrectionvalue +\n                  \"<br>Water Level: \" + water_level;\n\n    // Creating the popup with the provided URL\n    var popup = '<a href=\"http://78.46.151.191:1880/ui/#!/1?socketid=XO3Rr-BMPpSUzMmWAAdB\" target=\"_blank\">See Details in New Tab</a>';\n    \n    // Including the _id in the payload for later use\n    var payload = {\n        \"name\": name,\n        \"lat\": lat,\n        \"lon\": lng,\n        \"layer\": \"Smart-River\",\n        \"solecorrectionvalue\": solecorrectionvalue,\n        \"water_level\": water_level,\n        \"tooltip\": tooltip,\n        \"popup\": popup,\n        \"icon\": \"https://github.com/shamim237/assesment-spekter/raw/main/d8779b0c-b166-49ed-8780-1b095cdf76a4.png\",\n        \"_id\": sensor._id // Including the _id for click handling\n    };\n\n    // Pushing the payload to the output array\n    output.push(payload);\n});\n\nmsg.payload = output;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 660,
        "wires": [
            [
                "64c3f961a7eae8fc"
            ]
        ]
    },
    {
        "id": "2b59b873a65d882d",
        "type": "http request",
        "z": "3408b34b286dc17b",
        "name": "smart-river",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://137.184.228.7:5007/smartriver?ags=09274127&page=1&limit=10000&withData=true&timeFrame=120",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 890,
        "y": 640,
        "wires": [
            [
                "3edba8c197a192d8"
            ]
        ]
    },
    {
        "id": "3edba8c197a192d8",
        "type": "json",
        "z": "3408b34b286dc17b",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1050,
        "y": 660,
        "wires": [
            [
                "f6813f065491d9f9"
            ]
        ]
    },
    {
        "id": "f6813f065491d9f9",
        "type": "function",
        "z": "3408b34b286dc17b",
        "name": "extract",
        "func": "// Extract the result object from the incoming message payload\nmsg.payload = msg.payload.data.result;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 660,
        "wires": [
            [
                "0211f0a47c0e1f6c"
            ]
        ]
    },
    {
        "id": "64c3f961a7eae8fc",
        "type": "split",
        "z": "3408b34b286dc17b",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1650,
        "y": 660,
        "wires": [
            [
                "6eec574c622e891e"
            ]
        ]
    },
    {
        "id": "a0db091cad756707",
        "type": "function",
        "z": "3408b34b286dc17b",
        "name": "hdc_location",
        "func": "var sensors = msg.payload;\nvar output = [];\n\nsensors.forEach(sensor => {\n    var name = sensor.name;\n    var lat = sensor.location.lat;\n    var lon = sensor.location.lng;\n    var catchment = sensor.catchment;\n\n    // Extracting the last value from the data array\n    var lastValue = 0; // Default to 0 if no valid value is found\n    if (sensor.data && sensor.data.length > 0) {\n        var lastDataEntry = sensor.data[sensor.data.length - 1];\n        if (lastDataEntry && lastDataEntry._value !== undefined && lastDataEntry._value !== null) {\n            lastValue = lastDataEntry._value;\n        }\n    }\n\n    // Creating the tooltip string\n    var tooltip = \"Sensor Name: \" + name + \"<br>Latitude: \" + lat + \"<br>Longitude: \" + lon + \"<br>Catchment: \" + catchment +\n                  \"<br>Last Value: \" + lastValue;\n\n    // Creating the popup with the provided URL\n    var popup = '<a href=\"http://78.46.151.191:1880/ui/#!/2?socketid=XO3Rr-BMPpSUzMmWAAdB\" target=\"_blank\">See Details in New Tab</a>';\n    \n    // Including the _id in the payload for later use\n    var payload = {\n        \"name\": name,\n        \"lat\": lat,\n        \"lon\": lon,\n        \"layer\": \"HDC\",\n        \"catchment\": catchment,\n        \"lastValue\": lastValue,\n        \"tooltip\": tooltip,\n        \"popup\": popup,\n        \"icon\": \"https://raw.githubusercontent.com/shamim237/assesment-spekter/main/34b31a68-eb2b-4347-8f56-839e6d69e1a4.png\",\n        \"_id\": sensor._id // Including the _id for click handling\n    };\n\n    // Pushing the payload to the output array\n    output.push(payload);\n});\n\nmsg.payload = output;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 620,
        "wires": [
            [
                "ba407611b62a99d7"
            ]
        ]
    },
    {
        "id": "ba407611b62a99d7",
        "type": "split",
        "z": "3408b34b286dc17b",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1650,
        "y": 620,
        "wires": [
            [
                "6eec574c622e891e"
            ]
        ]
    },
    {
        "id": "bab20d9a406ccee4",
        "type": "mqtt in",
        "z": "3408b34b286dc17b",
        "g": "8585e7d2f0c26715",
        "name": "Temp Sensor",
        "topic": "#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e6db278fd742bc22",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 2310,
        "y": 280,
        "wires": [
            [
                "11ebed61c92a7369"
            ]
        ]
    },
    {
        "id": "11ebed61c92a7369",
        "type": "function",
        "z": "3408b34b286dc17b",
        "g": "8585e7d2f0c26715",
        "name": "Process Temp Sensor Data",
        "func": "var att = msg.payload.uplink_message.decoded_payload;\nvar device_id = msg.payload.end_device_ids.device_id;\nvar latitude = att.latitude.value;\nvar longitude = att.longitude.value;\nvar temperature = parseFloat(att.temperature.value).toFixed(2);\nvar humidity = att.humidity.value;\nvar illuminance = att.lux.value;\nvar pressure = parseFloat(att.pressure.value).toFixed(2);\nvar uv_intensity = att.uv.value;\n\nvar url;\nvar payload;\n\nvar icon = \"https://raw.githubusercontent.com/touhidurrahman/spekter_node_red/main/Pictures/temp_sensor.png\";\n\nif (device_id == 'sensebox-01') {\n    url = '<a href=\"http://78.46.151.191:1880/ui/#!/5?socketid=1sl4YbucrOoM13bMAAZ9\" target=\"_blank\">See Details in New Tab</a>';\n    payload = {\n        \"name\": \"Sensebox-1\",\n        \"lat\": latitude,\n        \"lon\": longitude,\n        \"layer\": \"Temperature Sensor\",\n        \"tooltip\": \"Sensor ID: \"+device_id + \"<br>Temperature: \" + temperature + \" °C\" + \"<br>Humidity: \" +humidity + \"%\"+\n        \"<br>Illuminance: \"+illuminance+\" lux<br>Pressure: \"+pressure+\" hPa<br>UV Intensity: \"+uv_intensity+\" µW⋅cm⁻²\",\n        \"popup\": url,\n        \"icon\": icon\n    }\n}\n\nif (device_id == 'sensebox-02') {\n    url = '<a href=\"http://78.46.151.191:1880/ui/#!/6?socketid=P6thRpRp8T7Or8VCAAaF\">See Details in New Tab</a>';\n    payload = {\n        \"name\": \"Sensebox-2\",\n        \"lat\": latitude,\n        \"lon\": longitude,\n        \"layer\": \"Temperature Sensor\",\n        \"tooltip\": \"Sensor ID: \"+device_id + \"<br>Temperature: \" + temperature + \" °C\" + \"<br>Humidity: \" +humidity + \"%\"+\n        \"<br>Illuminance: \"+illuminance+\" lux<br>Pressure: \"+pressure+\" hPa<br>UV Intensity: \"+uv_intensity+\" µW⋅cm⁻²\",\n        \"popup\": url,\n        \"icon\": icon\n    }\n}\n\nif (device_id == 'sensebox-03') {\n    url = '<a href=\"http://78.46.151.191:1880/ui/#!/7?socketid=P6thRpRp8T7Or8VCAAaF\">See Details in New Tab</a>';\n    payload = {\n        \"name\": \"Sensebox-3\",\n        \"lat\": latitude,\n        \"lon\": longitude,\n        \"layer\": \"Temperature Sensor\",\n        \"tooltip\": \"Sensor ID: \"+device_id + \"<br>Temperature: \" + temperature + \" °C\" + \"<br>Humidity: \" +humidity + \"%\"+\n        \"<br>Illuminance: \"+illuminance+\" lux<br>Pressure: \"+pressure+\" hPa<br>UV Intensity: \"+uv_intensity+\" µW⋅cm⁻²\",\n        \"popup\": url,\n        \"icon\": icon\n    }\n}\n\nif (device_id == 'sensebox-04') {\n    url = '<a href=\"http://78.46.151.191:1880/ui/#!/8?socketid=P6thRpRp8T7Or8VCAAaF\" target=\"_blank\">See Details in New Tab</a>';\n    payload = {\n        \"name\": \"Sensebox-4\",\n        \"lat\": latitude,\n        \"lon\": longitude,\n        \"layer\": \"Temperature Sensor\",\n        \"tooltip\": \"Sensor ID: \"+device_id + \"<br>Temperature: \" + temperature + \" °C\" + \"<br>Humidity: \" +humidity + \"%\"+\n        \"<br>Illuminance: \"+illuminance+\" lux<br>Pressure: \"+pressure+\" hPa<br>UV Intensity: \"+uv_intensity+\" µW⋅cm⁻²\",\n        \"popup\": url,\n        \"icon\": icon\n    }\n}\n\nif (device_id == 'sensebox-06') {\n    url = '<a href=\"http://78.46.151.191:1880/ui/#!/9?socketid=P6thRpRp8T7Or8VCAAaF\" target=\"_blank\">See Details in New Tab</a>';\n    payload = {\n        \"name\": \"Sensebox-6\",\n        \"lat\": latitude,\n        \"lon\": longitude,\n        \"layer\": \"Temperature Sensor\",\n        \"tooltip\": \"Sensor ID: \"+device_id + \"<br>Temperature: \" + temperature + \" °C\" + \"<br>Humidity: \" +humidity + \"%\"+\n        \"<br>Illuminance: \"+illuminance+\" lux<br>Pressure: \"+pressure+\" hPa<br>UV Intensity: \"+uv_intensity+\" µW⋅cm⁻²\",\n        \"popup\": url,\n        \"icon\": icon\n    }\n}\n\nif (device_id == 'sensebox-07') {\n    url = '<a href=\"http://78.46.151.191:1880/ui/#!/10?socketid=P6thRpRp8T7Or8VCAAaF\" target=\"_blank\">See Details in New Tab</a>';\n    payload = {\n        \"name\": \"Sensebox-7\",\n        \"lat\": latitude,\n        \"lon\": longitude,\n        \"layer\": \"Temperature Sensor\",\n        \"tooltip\": \"Sensor ID: \"+device_id + \"<br>Temperature: \" + temperature + \" °C\" + \"<br>Humidity: \" +humidity + \"%\"+\n        \"<br>Illuminance: \"+illuminance+\" lux<br>Pressure: \"+pressure+\" hPa<br>UV Intensity: \"+uv_intensity+\" µW⋅cm⁻²\",\n        \"popup\": url,\n        \"icon\": icon\n    }\n}\n\nmsg.payload = payload;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2600,
        "y": 280,
        "wires": [
            [
                "6eec574c622e891e"
            ]
        ]
    },
    {
        "id": "f6d261fb78bfe5dc",
        "type": "mqtt in",
        "z": "3408b34b286dc17b",
        "g": "8585e7d2f0c26715",
        "name": "Soil Sensor",
        "topic": "#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "3b9fb07e0e6380c8",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 2310,
        "y": 340,
        "wires": [
            [
                "9de5b63a873d3f8c"
            ]
        ]
    },
    {
        "id": "9de5b63a873d3f8c",
        "type": "function",
        "z": "3408b34b286dc17b",
        "g": "8585e7d2f0c26715",
        "name": "Process Soil Sensor Data",
        "func": "var att = msg.payload.uplink_message.decoded_payload;\nvar device_id = msg.payload.end_device_ids.device_id;\n\nvar latitude = msg.payload.uplink_message.locations.user.latitude;\nvar longitude = msg.payload.uplink_message.locations.user.longitude;\n\nvar temp_soil = att.temp_SOIL;\nvar water_soil = att.water_SOIL;\nvar battery_voltage = att.BatV;\nvar soil_conductivity = att.conduct_SOIL;\n\nvar url;\nvar payload;\n\nvar icon = \"https://raw.githubusercontent.com/touhidurrahman/spekter_node_red/main/Pictures/soil_sensor.png\";\n\nif (device_id == 'eui-a840412881881c6a') {\n    url = '<a href=\"http://78.46.151.191:1880/ui/#!/11?socketid=P6thRpRp8T7Or8VCAAaF\" target=\"_blank\">See Details in New Tab</a>';\n    payload = {\n        \"name\": \"Device-1\",\n        \"lat\": latitude,\n        \"lon\": longitude,\n        \"layer\": \"Soil Sensor\",\n        \"tooltip\": \"Sensor ID: \"+device_id + \"<br>Soil Temperature: \"+temp_soil+ \" °C<br>Soil Water: \"+water_soil+\n        \"<br>Battery Voltage: \"+battery_voltage+\"<br>Soil Conductivity: \"+soil_conductivity,\n        \"popup\": url,\n        \"icon\": icon\n    }\n}\n\nif (device_id == 'eui-a8404111d1881c80') {\n    url = '<a href=\"http://78.46.151.191:1880/ui/#!/12?socketid=P6thRpRp8T7Or8VCAAaF\" target=\"_blank\">See Details in New Tab</a>';\n    payload = {\n        \"name\": \"Device-2\",\n        \"lat\": latitude,\n        \"lon\": longitude,\n        \"layer\": \"Soil Sensor\",\n        \"tooltip\": \"Sensor ID: \" + device_id + \"<br>Soil Temperature: \" + temp_soil + \" °C<br>Soil Water: \" + water_soil +\n            \"<br>Battery Voltage: \" + battery_voltage + \"<br>Soil Conductivity: \" + soil_conductivity,\n        \"popup\": url,\n        \"icon\": icon\n    }\n}\n\nif (device_id == 'eui-a84041e0c1881c65') {\n    url = '<a href=\"http://78.46.151.191:1880/ui/#!/13?socketid=P6thRpRp8T7Or8VCAAaF\" target=\"_blank\">See Details in New Tab</a>';\n    payload = {\n        \"name\": \"Device-3\",\n        \"lat\": latitude,\n        \"lon\": longitude,\n        \"layer\": \"Soil Sensor\",\n        \"tooltip\": \"Sensor ID: \" + device_id + \"<br>Soil Temperature: \" + temp_soil + \" °C<br>Soil Water: \" + water_soil +\n            \"<br>Battery Voltage: \" + battery_voltage + \"<br>Soil Conductivity: \" + soil_conductivity,\n        \"popup\": url,\n        \"icon\": icon\n    }\n}\n\nif (device_id == 'eui-a84041ffb1881c77') {\n    url = '<a href=\"http://78.46.151.191:1880/ui/#!/14?socketid=P6thRpRp8T7Or8VCAAaF\" target=\"_blank\">See Details in New Tab</a>';\n    payload = {\n        \"name\": \"Device-4\",\n        \"lat\": latitude,\n        \"lon\": longitude,\n        \"layer\": \"Soil Sensor\",\n        \"tooltip\": \"Sensor ID: \" + device_id + \"<br>Soil Temperature: \" + temp_soil + \" °C<br>Soil Water: \" + water_soil +\n            \"<br>Battery Voltage: \" + battery_voltage + \"<br>Soil Conductivity: \" + soil_conductivity,\n        \"popup\": url,\n        \"icon\": icon\n    }\n}\n\nif (device_id == 'eui-a840416c21881c78') {\n    url = '<a href=\"http://78.46.151.191:1880/ui/#!/15?socketid=rPhLCHLGC2EpLY5gAAaQ\" target=\"_blank\">See Details in New Tab</a>';\n    payload = {\n        \"name\": \"Device-5\",\n        \"lat\": latitude,\n        \"lon\": longitude,\n        \"layer\": \"Soil Sensor\",\n        \"tooltip\": \"Sensor ID: \" + device_id + \"<br>Soil Temperature: \" + temp_soil + \" °C<br>Soil Water: \" + water_soil +\n            \"<br>Battery Voltage: \" + battery_voltage + \"<br>Soil Conductivity: \" + soil_conductivity,\n        \"popup\": url,\n        \"icon\": icon\n    }\n}\n\n\nmsg.payload = payload;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2570,
        "y": 340,
        "wires": [
            [
                "6eec574c622e891e"
            ]
        ]
    },
    {
        "id": "916ebbc77dc65d51",
        "type": "ui_text",
        "z": "3408b34b286dc17b",
        "group": "cb49bbcb751fd7de",
        "order": 1,
        "width": 28,
        "height": 1,
        "name": "",
        "label": "Location of Sensors",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "24",
        "color": "#0527b3",
        "x": 2120,
        "y": 460,
        "wires": []
    },
    {
        "id": "303bf9f9ce3ae11f",
        "type": "comment",
        "z": "3408b34b286dc17b",
        "g": "8585e7d2f0c26715",
        "name": "Temp Sensor and Soil Sensor Map",
        "info": "",
        "x": 2480,
        "y": 220,
        "wires": []
    },
    {
        "id": "6eec574c622e891e",
        "type": "ui_worldmap",
        "z": "3408b34b286dc17b",
        "group": "cb49bbcb751fd7de",
        "order": 2,
        "width": 28,
        "height": 14,
        "name": "",
        "lat": "48.69516",
        "lon": "12.21433",
        "zoom": "13",
        "layer": "EsriT",
        "cluster": "",
        "maxage": "",
        "usermenu": "hide",
        "layers": "show",
        "panit": "false",
        "panlock": "false",
        "zoomlock": "false",
        "hiderightclick": "true",
        "coords": "none",
        "showgrid": "false",
        "showruler": "false",
        "allowFileDrop": "false",
        "path": "/worldmap",
        "overlist": "",
        "maplist": "EsriC,EsriS,EsriT",
        "mapname": "",
        "mapurl": "",
        "mapopt": "",
        "mapwms": false,
        "x": 2120,
        "y": 580,
        "wires": []
    },
    {
        "id": "4f3fbbb9ea28705f",
        "type": "worldmap in",
        "z": "3408b34b286dc17b",
        "name": "",
        "path": "/worldmap",
        "events": "connect,disconnect,point,layer,bounds,files,draw,other",
        "x": 700,
        "y": 840,
        "wires": [
            [
                "9436efc112619656",
                "3b28f517dbfe564e"
            ]
        ]
    },
    {
        "id": "9436efc112619656",
        "type": "function",
        "z": "3408b34b286dc17b",
        "name": "function 630",
        "func": "// Check if the action in msg.payload is 'connected'\nif (msg.payload.action === 'connected') {\n    msg.payload = Math.floor(Date.now() / 1000);\n    return msg;\n} else {\n    msg.payload = false;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 920,
        "wires": [
            [
                "96f6ab8d42ec45bd"
            ]
        ]
    },
    {
        "id": "96f6ab8d42ec45bd",
        "type": "switch",
        "z": "3408b34b286dc17b",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "number",
                "vt": "number"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1050,
        "y": 920,
        "wires": [
            [
                "2b59b873a65d882d",
                "80453639cd683d88"
            ],
            []
        ]
    },
    {
        "id": "3b28f517dbfe564e",
        "type": "debug",
        "z": "3408b34b286dc17b",
        "name": "debug 58",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 760,
        "wires": []
    },
    {
        "id": "3bd60eb35cf32b8b",
        "type": "ui_text",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "group": "",
        "order": 27,
        "width": 5,
        "height": 2,
        "name": "",
        "label": "Sensor Name",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Times New Roman,Times,serif",
        "fontSize": "18",
        "color": "#000000",
        "x": 2080,
        "y": 640,
        "wires": []
    },
    {
        "id": "bb4e76d659eb926c",
        "type": "ui_gauge",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "name": "",
        "group": "",
        "order": 45,
        "width": 6,
        "height": 3,
        "gtype": "wave",
        "title": "Sole Correction Value",
        "label": "",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": "500",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 2100,
        "y": 800,
        "wires": []
    },
    {
        "id": "903fb6d0702ab9fb",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "function 565",
        "func": "// Extract the level and active values from the incoming message payload\nlet level = msg.payload.level;\n\n// Create a new payload containing only the extracted values\nmsg.payload = level\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 840,
        "wires": [
            [
                "f38a60508b9b82d9"
            ]
        ]
    },
    {
        "id": "e5749cefdfdd8268",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "function 566",
        "func": "// Extract the level and active values from the incoming message payload\nlet level = msg.payload.level;\n\n// Create a new payload containing only the extracted values\nmsg.payload = level\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 920,
        "wires": [
            [
                "6a70bf2a80440885"
            ]
        ]
    },
    {
        "id": "70352baf7276f5f7",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "function 567",
        "func": "// Check if msg.payload is true (boolean)\nif (msg.payload.active === true) {\n    // Set the payload to \"Active\"\n    msg.payload = \"On\";\n} else {\n    // Set the payload to \"Offline\"\n    msg.payload = \"Off\";\n}\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 880,
        "wires": [
            [
                "4bc3ff40fe743067"
            ]
        ]
    },
    {
        "id": "2efac930550cd3e1",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "function 568",
        "func": "// Check if msg.payload is true (boolean)\nif (msg.payload.active === true) {\n    // Set the payload to \"Active\"\n    msg.payload = \"On\";\n} else {\n    // Set the payload to \"Offline\"\n    msg.payload = \"Off\";\n}\n\n// Return the modified message\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 960,
        "wires": [
            [
                "910d56577a16e6c8"
            ]
        ]
    },
    {
        "id": "f38a60508b9b82d9",
        "type": "ui_gauge",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "name": "thres-1",
        "group": "",
        "order": 42,
        "width": 3,
        "height": 3,
        "gtype": "donut",
        "title": "Threshold Value 1",
        "label": "",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": "350",
        "colors": [
            "#00b500",
            "#eaea10",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 2060,
        "y": 840,
        "wires": []
    },
    {
        "id": "6a70bf2a80440885",
        "type": "ui_gauge",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "name": "thres-2",
        "group": "",
        "order": 48,
        "width": 3,
        "height": 3,
        "gtype": "donut",
        "title": "Threshold Value 2",
        "label": "",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": "350",
        "colors": [
            "#00b500",
            "#e6e600",
            "#c02a2a"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 2060,
        "y": 920,
        "wires": []
    },
    {
        "id": "e4486b5c8d296d94",
        "type": "ui_text",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "group": "",
        "order": 39,
        "width": 7,
        "height": 1,
        "name": "Warning 1",
        "label": "",
        "format": "Warning Stage 1",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "Times New Roman,Times,serif",
        "fontSize": "19",
        "color": "#15f312",
        "x": 2200,
        "y": 840,
        "wires": []
    },
    {
        "id": "1587343e2aabf9d9",
        "type": "ui_text",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "group": "",
        "order": 41,
        "width": 7,
        "height": 1,
        "name": "Warning 2",
        "label": "",
        "format": "Warning Stage 2",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "Times New Roman,Times,serif",
        "fontSize": "19",
        "color": "#f80d0d",
        "x": 2200,
        "y": 920,
        "wires": []
    },
    {
        "id": "68c11d58383a359d",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "function 569",
        "func": "// Function to format data for Node-RED chart node\nfunction formatDataForChart(inputData) {\n    // Initialize an array to hold the formatted data points\n    let chartData = [];\n\n    // Loop through each data point in the input data\n    inputData.forEach(dataPoint => {\n        // Create a new object for the chart data point\n        let chartDataPoint = {\n            x: new Date(dataPoint.timestamp), // Convert timestamp to Date object for chart\n            y: dataPoint.level // Use the level value for the y-axis\n        };\n\n        // Add the formatted data point to the chart data array\n        chartData.push(chartDataPoint);\n    });\n\n    // Return the formatted chart data\n    return chartData;\n}\n\n// Assume the incoming message payload contains the data array\nlet inputData = msg.payload[0];\n\n// Format the input data\nlet formattedData = formatDataForChart(inputData);\n\n// Set the payload to the formatted chart data\nmsg.payload = [\n    {\n        \"series\": [\"Level\"], // Name of the series\n        \"data\": [formattedData], // The formatted data points\n        \"labels\": [\"Level Data\"] // Labels for the series\n    }\n];\n\n// Return the message to be sent to the next node\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 1000,
        "wires": [
            [
                "0a9305742fb96fa1"
            ]
        ]
    },
    {
        "id": "0a9305742fb96fa1",
        "type": "ui_chart",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "name": "mes-1",
        "group": "",
        "order": 55,
        "width": 20,
        "height": 6,
        "label": "Sensor Measurements",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": true,
        "ymin": "0",
        "ymax": "6000",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2050,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "de42091583e0a754",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "function 570",
        "func": "// Function to format data for Node-RED chart node\nfunction formatDataForChart(inputData) {\n    // Initialize an array to hold the formatted data points\n    let chartData = [];\n\n    // Loop through each data point in the input data\n    inputData.forEach(dataPoint => {\n        // Create a new object for the chart data point\n        let chartDataPoint = {\n            x: new Date(dataPoint.start), // Convert timestamp to Date object for chart\n            y: dataPoint.value // Use the level value for the y-axis\n        };\n\n        // Add the formatted data point to the chart data array\n        chartData.push(chartDataPoint);\n    });\n\n    // Return the formatted chart data\n    return chartData;\n}\n\n// Assume the incoming message payload contains the data array\nlet inputData = msg.payload[0];\n\n// Format the input data\nlet formattedData = formatDataForChart(inputData);\n\n// Set the payload to the formatted chart data\nmsg.payload = [\n    {\n        \"series\": [\"Value\"], // Name of the series\n        \"data\": [formattedData], // The formatted data points\n        \"labels\": [\"Sensor Data\"] // Labels for the series\n    }\n];\n\n// Return the message to be sent to the next node\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 1040,
        "wires": [
            [
                "2de3feb1758e73aa"
            ]
        ]
    },
    {
        "id": "2de3feb1758e73aa",
        "type": "ui_chart",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "name": "data-1",
        "group": "",
        "order": 67,
        "width": 25,
        "height": 6,
        "label": "Sensor Value (last 24 hours)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": true,
        "ymin": "0",
        "ymax": "600",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#fa7500",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2050,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "b6c693c028c963a0",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "function 572",
        "func": "// Input data\nvar inputData = msg.payload;\n\n// Convert the input data to the desired format\nvar outputData = {\n    series: [\"Value\"],\n    data: [[]], // Array to hold the data points\n    labels: [\"Water Level\"]\n};\n\n// Iterate through the input data and convert each item\ninputData.forEach(function(item) {\n    var date = new Date(item.date); // Convert timestamp to a Date object\n    var isoString = date.toISOString(); // Convert the Date object to an ISO string\n    \n    // Ensure no negative values are considered\n    var value = item.water_level < 0 ? 0 : item.water_level;\n    \n    // Create the data point in the required format\n    var dataPoint = {\n        x: isoString,\n        y: value\n    };\n    \n    // Add the data point to the output data array\n    outputData.data[0].push(dataPoint);\n});\n\n// Set the output payload\nmsg.payload = [outputData];\n\n// Return the message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2070,
        "y": 1160,
        "wires": [
            [
                "ecdd89e0185bf8ea"
            ]
        ]
    },
    {
        "id": "ecdd89e0185bf8ea",
        "type": "ui_chart",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "name": "water-level",
        "group": "",
        "order": 74,
        "width": 25,
        "height": 6,
        "label": "Water Levels (cm)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "cubic",
        "nodata": "",
        "dot": true,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#fa7500",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2270,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "66a070e1ee8cf027",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "function 573",
        "func": "// Check if msg.payload is true (boolean)\nif (msg.payload === true) {\n    // Set the payload to \"Active\"\n    msg.payload = \"Active\";\n} else {\n    // Set the payload to \"Offline\"\n    msg.payload = \"Offline\";\n}\n\n// Return the modified message\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 680,
        "wires": [
            [
                "181287146ad7f055"
            ]
        ]
    },
    {
        "id": "805984c5af7431fb",
        "type": "ui_form",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "name": "",
        "label": "Select Date",
        "group": "",
        "order": 54,
        "width": 5,
        "height": 1,
        "options": [
            {
                "label": "From",
                "value": "startDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "To",
                "value": "endDate",
                "type": "date",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "startDate": "",
            "endDate": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": true,
        "className": "",
        "x": 1230,
        "y": 1340,
        "wires": [
            [
                "6dcf713d44d4171a"
            ]
        ]
    },
    {
        "id": "6dcf713d44d4171a",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "function 576",
        "func": "var endDate = new Date(msg.payload.endDate);\nvar startDate = new Date(msg.payload.startDate);\nvar start = startDate.toISOString();\nvar end = endDate.toISOString();\n\nvar storedNames = flow.get('storedPayload');\nnode.warn(\"Retrieved Stored Names: \" + storedNames); // Debug statement\n\nmsg.names = storedNames;\nvar searchTerm = msg.names;\n\nmsg.search = searchTerm;\nmsg.start = start;\nmsg.end = end;\n\nnode.warn(\"Output Message: \" + JSON.stringify(msg)); // Debug statement\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 1380,
        "wires": [
            [
                "7ed83f7401b76320",
                "5765d1319e1eedc6"
            ]
        ]
    },
    {
        "id": "7ed83f7401b76320",
        "type": "http request",
        "z": "b61ad1d4aecdd073",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "body",
        "url": "http://137.184.228.7:5007/smartriver?ags=09274127&page=1&limit=10000&withData=true&resolution=60&searchTerm={{search}}&start={{start}}&end={{end}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1230,
        "y": 1420,
        "wires": [
            [
                "f52a8b07cb0649d3"
            ]
        ]
    },
    {
        "id": "f52a8b07cb0649d3",
        "type": "json",
        "z": "b61ad1d4aecdd073",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1430,
        "y": 1240,
        "wires": [
            [
                "50128d1447ff0906",
                "d35cce8b215a403c",
                "eb14669fea9ca7cc"
            ]
        ]
    },
    {
        "id": "50128d1447ff0906",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "function 577",
        "func": "// Extract the relevant data from the input message\nlet inputData = msg.payload.data.result[0].measurements;\nlet deviceId = msg.payload.data.result[0]._id;\n\n// Initialize an empty array to hold the converted data\nlet outputData = [];\n\n// Loop through the input data and create the required output format\ninputData.forEach(measurement => {\n    outputData.push({\n        ids: deviceId,\n        timestamp: measurement.timestamp,\n        level: measurement.level\n    });\n});\n\n// Set the converted data as the payload of the message\nmsg.payload = outputData;\n\n// Return the message to continue processing in the flow\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 1200,
        "wires": [
            [
                "ffdb851e2cebda12"
            ]
        ]
    },
    {
        "id": "d35cce8b215a403c",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "function 578",
        "func": "// Extract the relevant data from the input message\nlet inputData = msg.payload.data.result[0].data;\n\n// Initialize an empty array to hold the converted data\nlet outputData = [];\n\n// Loop through the input data and create the required output format\ninputData.forEach(dataPoint => {\n    outputData.push({\n        date: dataPoint.end,\n        value: dataPoint.value\n    });\n});\n\n// Set the converted data as the payload of the message\nmsg.payload = outputData;\n\n// Return the message to continue processing in the flow\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 1240,
        "wires": [
            [
                "88849b5581ecbeb8",
                "4838872b7e13bda9"
            ]
        ]
    },
    {
        "id": "eb14669fea9ca7cc",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "function 579",
        "func": "// Extract the soleCorrectionValue from the input message\nlet soleCorrectionValue = msg.payload.data.result[0].soleCorrectionValue;\n\n// Set the soleCorrectionValue as the payload of the message\nmsg.payload = soleCorrectionValue;\n\n// Return the message to continue processing in the flow\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 1280,
        "wires": [
            [
                "4838872b7e13bda9"
            ]
        ]
    },
    {
        "id": "24120a561b0381da",
        "type": "ui_text",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "group": "",
        "order": 25,
        "width": 6,
        "height": 1,
        "name": "nameSensor",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "22",
        "color": "#0f22ae",
        "x": 2070,
        "y": 600,
        "wires": []
    },
    {
        "id": "181287146ad7f055",
        "type": "ui_text",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "group": "",
        "order": 28,
        "width": 4,
        "height": 2,
        "name": "",
        "label": "Activation Status",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Times New Roman,Times,serif",
        "fontSize": "18",
        "color": "#000000",
        "x": 2090,
        "y": 680,
        "wires": []
    },
    {
        "id": "747b568bd2460da6",
        "type": "ui_text",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "group": "",
        "order": 30,
        "width": 4,
        "height": 2,
        "name": "",
        "label": "Maintenance",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Times New Roman,Times,serif",
        "fontSize": "18",
        "color": "#000000",
        "x": 2070,
        "y": 760,
        "wires": []
    },
    {
        "id": "721c95d7341dd5c5",
        "type": "ui_text",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "group": "",
        "order": 29,
        "width": 4,
        "height": 2,
        "name": "",
        "label": "Protocol Type",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Times New Roman,Times,serif",
        "fontSize": "18",
        "color": "#000000",
        "x": 2080,
        "y": 720,
        "wires": []
    },
    {
        "id": "4bc3ff40fe743067",
        "type": "ui_text",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "group": "",
        "order": 43,
        "width": 4,
        "height": 2,
        "name": "alarm-1",
        "label": "Alarm Status",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Times New Roman,Times,serif",
        "fontSize": "18",
        "color": "#000000",
        "x": 2060,
        "y": 880,
        "wires": []
    },
    {
        "id": "910d56577a16e6c8",
        "type": "ui_text",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "group": "",
        "order": 47,
        "width": 4,
        "height": 2,
        "name": "alarm-2",
        "label": "Alarm Status",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Times New Roman,Times,serif",
        "fontSize": "18",
        "color": "#000000",
        "x": 2060,
        "y": 960,
        "wires": []
    },
    {
        "id": "f33c0abfa680c587",
        "type": "http request",
        "z": "b61ad1d4aecdd073",
        "name": "smart-river",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://137.184.228.7:5007/smartriver?ags=09274127&page=1&limit=10000&withData=true&timeFrame=1440&resolution=60&filter=true&searchTerm={{payload}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 730,
        "y": 1040,
        "wires": [
            [
                "209efa11591803ed"
            ]
        ]
    },
    {
        "id": "209efa11591803ed",
        "type": "json",
        "z": "b61ad1d4aecdd073",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 930,
        "y": 1040,
        "wires": [
            [
                "aba83fd2b4a84b96"
            ]
        ]
    },
    {
        "id": "aba83fd2b4a84b96",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "extract",
        "func": "// Extract the result object from the incoming message payload\nmsg.payload = msg.payload.data.result;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 1040,
        "wires": [
            [
                "9d60f5844c45fd64",
                "dd907892309beb88",
                "f302a1ede3cd3152",
                "f62147471e75c988",
                "a90eef5fd27a4064",
                "a93455145afdf1e1",
                "339abbfb64b019c5",
                "819d55738bd13bf9",
                "dd5d8be88820ed17",
                "d8f8c6ea014f5aa8"
            ]
        ]
    },
    {
        "id": "f302a1ede3cd3152",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "name",
        "func": "// Assuming msg.payload is an array with one object\nconst payload = msg.payload[0];\n\n// Extract the name from the object\nmsg.payload = payload.name;\n\n// Return the updated message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 640,
        "wires": [
            [
                "3bd60eb35cf32b8b",
                "41399f7647ec7521"
            ]
        ]
    },
    {
        "id": "a93455145afdf1e1",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "activation",
        "func": "// Assuming msg.payload is an array with one object\nconst payload = msg.payload[0];\n\n// Extract the name from the object\nmsg.payload = payload.activation.status;\n\n// Return the updated message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 680,
        "wires": [
            [
                "66a070e1ee8cf027"
            ]
        ]
    },
    {
        "id": "339abbfb64b019c5",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "protocol",
        "func": "// Assuming msg.payload is an array with one object\nconst payload = msg.payload[0];\n\n// Extract the name from the object\nmsg.payload = payload.protocolType;\n\n// Return the updated message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 720,
        "wires": [
            [
                "721c95d7341dd5c5"
            ]
        ]
    },
    {
        "id": "819d55738bd13bf9",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "maintenance",
        "func": "// Assuming msg.payload is an array with one object\nconst payload = msg.payload[0];\n\n// Extract the name from the object\nmsg.payload = payload.maintenance;\n\n// Return the updated message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 760,
        "wires": [
            [
                "a91f2700407c8e0b"
            ]
        ]
    },
    {
        "id": "f62147471e75c988",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "soleCorrectionValue",
        "func": "// Assuming msg.payload is an array with one object\nconst payload = msg.payload[0];\n\n// Extract the name from the object\nmsg.payload = payload.soleCorrectionValue;\n\n// Return the updated message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 800,
        "wires": [
            [
                "bb4e76d659eb926c",
                "36b4c0b818dc34fa"
            ]
        ]
    },
    {
        "id": "a90eef5fd27a4064",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "threshold-check",
        "func": "// Assuming msg.payload is an array with one object\nconst payload = msg.payload[0];\n\n// Extract the name from the object\nmsg.payload.level = payload.thresholds[0].level;\nmsg.payload.active = payload.thresholds[0].active;\n// Return the updated message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 840,
        "wires": [
            [
                "903fb6d0702ab9fb",
                "70352baf7276f5f7"
            ]
        ]
    },
    {
        "id": "9d60f5844c45fd64",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "measurements",
        "func": "// Initialize an array to hold the extracted data\nlet extractedData = [];\n\n// Loop through each object in the msg.payload array\nfor (let i = 0; i < msg.payload.length; i++) {\n    let obj = msg.payload[i];\n\n    // Check if the object has a measurements array\n    if (obj.measurements && Array.isArray(obj.measurements)) {\n        // Extract the last 20 measurements\n        let lastMeasurements = obj.measurements.slice(-24);\n\n        // Extract _id, timestamp, and level from each measurement\n        let measurementsData = lastMeasurements.map(measurement => {\n            return {\n                ids: obj._id, // Include the _id\n                timestamp: measurement.timestamp,\n                level: measurement.level\n            };\n        });\n\n        // Add the extracted measurements data to the extractedData array\n        extractedData.push(measurementsData);\n    }\n}\n\n// Set the new payload to the extracted data\nmsg.payload = extractedData;\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 1000,
        "wires": [
            [
                "68c11d58383a359d"
            ]
        ]
    },
    {
        "id": "dd907892309beb88",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "data values",
        "func": "// Initialize an array to hold the extracted data\nlet extractedData = [];\n\n// Loop through each object in the msg.payload array\nfor (let i = 0; i < msg.payload.length; i++) {\n    let obj = msg.payload[i];\n\n    // Check if the object has a data array\n    if (obj.data && Array.isArray(obj.data)) {\n        // Extract value and start from each object in the data array\n        let dataValues = obj.data.map(dataObj => {\n            return {\n                ids: obj._id,\n                value: dataObj.value,\n                start: dataObj.end\n            };\n        });\n\n        // Add the extracted values to the extractedData array\n        extractedData.push(dataValues);\n    }\n}\n\n// Set the new payload to the extracted data\nmsg.payload = extractedData;\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 1040,
        "wires": [
            [
                "de42091583e0a754",
                "36b4c0b818dc34fa"
            ]
        ]
    },
    {
        "id": "bc5fd966bcb9db07",
        "type": "ui_template",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "group": "",
        "name": "sen1",
        "order": 2,
        "width": 4,
        "height": 1,
        "format": "<style>\n    @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap');\n\n    .sensor-button {\n        background-color: #2196F3;\n        color: white;\n        padding: 10px 24px;\n        font-size: 16px;\n        font-family: 'Roboto', sans-serif;\n        font-weight: 500; /* Semi-bold */\n        border: none;\n        border-radius: 8px;\n        cursor: pointer;\n        transition: background-color 0.3s, transform 0.2s, box-shadow 0.2s;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n\n    .sensor-button:hover {\n        background-color: #39ff08 !important;\n        box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);\n    }\n\n    .sensor-button:active {\n        transform: scale(0.98);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    }\n\n    .sensor-button.pressed {\n        background-color: #FF5722 !important; /* Change color to indicate press */\n    }\n</style>\n\n<md-button class=\"sensor-button\" ng-class=\"{'pressed': isPressed}\" ng-click=\"pressButton()\">\n    Sensor 1\n</md-button>\n\n<script>\n    (function(scope) {\n        scope.isPressed = false;\n\n        scope.pressButton = function() {\n            scope.isPressed = true;\n\n            // Send the payload\n            scope.send({payload: 'sensor1_pressed'});\n\n            // Optionally, reset the button state after some time\n            setTimeout(function() {\n                scope.isPressed = false;\n                scope.$apply(); // Update the view\n            }, 10000); // 2 seconds delay before resetting\n        };\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 330,
        "y": 740,
        "wires": [
            [
                "624d8ab9f1bd1ca7"
            ]
        ]
    },
    {
        "id": "3be4277cdabcfafe",
        "type": "ui_template",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "group": "",
        "name": "sen2",
        "order": 3,
        "width": 3,
        "height": 1,
        "format": "<style>\n    @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap');\n\n    .sensor-button {\n        background-color: #2196F3;\n        color: white;\n        padding: 10px 24px;\n        font-size: 16px;\n        font-family: 'Roboto', sans-serif;\n        font-weight: 500;\n        /* Semi-bold */\n        border: none;\n        border-radius: 8px;\n        cursor: pointer;\n        transition: background-color 0.3s, transform 0.2s, box-shadow 0.2s;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n\n    .sensor-button:hover {\n        background-color: #39ff08 !important;\n        box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);\n    }\n\n    .sensor-button:active {\n        transform: scale(0.98);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    }\n\n    .sensor-button.pressed {\n        background-color: #FF5722 !important;\n        /* Change color to indicate press */\n    }\n</style>\n\n<md-button class=\"sensor-button\" ng-class=\"{'pressed': isPressed}\" ng-click=\"pressButton()\">\n    Sensor 2\n</md-button>\n\n<script>\n    (function(scope) {\n        scope.isPressed = false;\n\n        scope.pressButton = function() {\n            scope.isPressed = true;\n\n            // Send the payload\n            scope.send({payload: 'sensor2_pressed'});\n\n            // Optionally, reset the button state after some time\n            setTimeout(function() {\n                scope.isPressed = false;\n                scope.$apply(); // Update the view\n            }, 10000); // 2 seconds delay before resetting\n        };\n    })(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 330,
        "y": 780,
        "wires": [
            [
                "624d8ab9f1bd1ca7"
            ]
        ]
    },
    {
        "id": "624d8ab9f1bd1ca7",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "function 580",
        "func": "// Create a mapping of sensor inputs to their corresponding names\nconst sensorMapping = {\n    \"sensor1_pressed\": \"Goldbach - Siegensdorf\",\n    \"sensor2_pressed\": \"Rottenburger Becken - Ergoldsbach\",\n    \"sensor3_pressed\": \"Dörnbach - Unterdörnbach\",\n    \"sensor4_pressed\": \"Seitengraben Hettenbach\",\n    \"sensor5_pressed\": \"Goldbach - Kläham\",\n    \"sensor6_pressed\": \"B15n - Poschenhofer Straße\",\n    \"sensor7_pressed\": \"Kiefernstraße Einlauf\",\n    \"sensor8_pressed\": \"Grabensystem - Poschenhofer Straße\",\n    \"sensor9_pressed\": \"Hettenbach - LA42\",\n    \"sensor10_pressed\": \"Stockaer Bach\",\n    \"sensor11_pressed\": \"Gewässer Iffelkofen\",\n    \"sensor12_pressed\": \"Goldbach Ergoldsbach\",\n    \"sensor13_pressed\": \"Mühllastgraben - Bayerbacher Straße\",\n    \"sensor14_pressed\": \"Dörnbach - Oberdörnbach\",\n    \"sensor15_pressed\": \"Seitelgraben - Kreisverkehr\",\n    \"sensor16_pressed\": \"Seitelgraben - Überfahrt\",\n    \"sensor17_pressed\": \"Bayerbacher Bach - Ortsstraße\"\n};\n\n// Check the incoming payload\nif (sensorMapping.hasOwnProperty(msg.payload)) {\n    // Set the output payload to the corresponding name\n    msg.payload = sensorMapping[msg.payload];\n} else {\n    // Handle unexpected payload values if necessary\n    msg.payload = \"Unknown sensor\";\n}\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1040,
        "wires": [
            [
                "f33c0abfa680c587",
                "27fdbc2da777a606"
            ]
        ]
    },
    {
        "id": "7951618def332b51",
        "type": "ui_button",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "name": "reset-1",
        "group": "",
        "order": 57,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "white",
        "bgcolor": "",
        "className": "",
        "icon": "fa-refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 560,
        "y": 1160,
        "wires": [
            [
                "ac8869c59484f5d0"
            ]
        ]
    },
    {
        "id": "dd5d8be88820ed17",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "threshold-check-2",
        "func": "// Assuming msg.payload is an array with one object\nconst payload = msg.payload[0];\n\n// Extract the name from the object\nmsg.payload.level = payload.thresholds[1].level;\nmsg.payload.active = payload.thresholds[1].active;\n// Return the updated message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 880,
        "wires": [
            [
                "e5749cefdfdd8268",
                "2efac930550cd3e1"
            ]
        ]
    },
    {
        "id": "6a0e8e49db639001",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "name2",
        "func": "// Store the payload in the flow context with a key\nflow.set('storedPayload', msg.names);\nnode.warn(\"Stored Payload: \" + flow.get('storedPayload')); // Debug statement\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 1280,
        "wires": [
            [
                "6dcf713d44d4171a"
            ]
        ]
    },
    {
        "id": "41399f7647ec7521",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "function 581",
        "func": "// Assuming msg.payload is an array with one object\nconst nam = msg.payload;\n\n// Extract the name from the object\nmsg.names = nam;\n\n// Return the updated message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 1240,
        "wires": [
            [
                "6a0e8e49db639001"
            ]
        ]
    },
    {
        "id": "ffdb851e2cebda12",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "function 582",
        "func": "// Function to format data for Node-RED chart node\nfunction formatDataForChart(inputData) {\n    // Initialize an array to hold the formatted data points\n    let chartData = [];\n\n    // Loop through each data point in the input data\n    inputData.forEach(dataPoint => {\n        // Create a new object for the chart data point\n        let chartDataPoint = {\n            x: new Date(dataPoint.timestamp), // Convert timestamp to Date object for chart\n            y: dataPoint.level // Use the level value for the y-axis\n        };\n\n        // Add the formatted data point to the chart data array\n        chartData.push(chartDataPoint);\n    });\n\n    // Return the formatted chart data\n    return chartData;\n}\n\n// Assume the incoming message payload contains the data array\nlet inputData = msg.payload;\n\n// Format the input data\nlet formattedData = formatDataForChart(inputData);\n\n// Set the payload to the formatted chart data\nmsg.payload = [\n    {\n        \"series\": [\"Level\"], // Name of the series\n        \"data\": [formattedData], // The formatted data points\n        \"labels\": [\"Level Data\"] // Labels for the series\n    }\n];\n\n// Return the message to be sent to the next node\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 1080,
        "wires": [
            [
                "0a9305742fb96fa1"
            ]
        ]
    },
    {
        "id": "88849b5581ecbeb8",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "function 583",
        "func": "// Function to format data for Node-RED chart node\nfunction formatDataForChart(inputData) {\n    // Initialize an array to hold the formatted data points\n    let chartData = [];\n\n    // Loop through each data point in the input data\n    inputData.forEach(dataPoint => {\n        // Create a new object for the chart data point\n        let chartDataPoint = {\n            x: new Date(dataPoint.date), // Convert timestamp to Date object for chart\n            y: dataPoint.value // Use the level value for the y-axis\n        };\n\n        // Add the formatted data point to the chart data array\n        chartData.push(chartDataPoint);\n    });\n\n    // Return the formatted chart data\n    return chartData;\n}\n\n// Assume the incoming message payload contains the data array\nlet inputData = msg.payload;\n\n// Format the input data\nlet formattedData = formatDataForChart(inputData);\n\n// Set the payload to the formatted chart data\nmsg.payload = [\n    {\n        \"series\": [\"Value\"], // Name of the series\n        \"data\": [formattedData], // The formatted data points\n        \"labels\": [\"Sensor Data\"] // Labels for the series\n    }\n];\n\n// Return the message to be sent to the next node\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 1120,
        "wires": [
            [
                "2de3feb1758e73aa"
            ]
        ]
    },
    {
        "id": "4838872b7e13bda9",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "function 584",
        "func": "// Function Node\n// We will use context to store the incoming values\n\n// Check if the first payload (number) is received\nif (typeof msg.payload === 'number') {\n    context.set('numberValue', msg.payload);\n} \n\n// Check if the second payload (array) is received\nif (Array.isArray(msg.payload)) {\n    context.set('arrayValue', msg.payload);\n}\n\n// Retrieve the stored values\nlet numberValue = context.get('numberValue');\nlet arrayValue = context.get('arrayValue');\n\n// Proceed only if both values are available\nif (numberValue !== undefined && arrayValue !== undefined) {\n    let resultArray = arrayValue.map(item => {\n        return {\n            date: item.date,\n            water_level: numberValue - item.value\n        };\n    });\n    \n    // Clear context after use\n    context.set('numberValue', undefined);\n    context.set('arrayValue', undefined);\n    \n    // Return the result\n    return { payload: resultArray };\n} else {\n    // If one of the values is not yet available, do nothing\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 1200,
        "wires": [
            [
                "b6c693c028c963a0"
            ]
        ]
    },
    {
        "id": "a91f2700407c8e0b",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "function 585",
        "func": "// Check if msg.payload is true (boolean)\nif (msg.payload === true) {\n    // Set the payload to \"Active\"\n    msg.payload = \"On\";\n} else {\n    // Set the payload to \"Offline\"\n    msg.payload = \"Off\";\n}\n\n// Return the modified message\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 760,
        "wires": [
            [
                "747b568bd2460da6"
            ]
        ]
    },
    {
        "id": "36b4c0b818dc34fa",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "function 586",
        "func": "// Get the payloads from the two messages\nlet payload1 = context.get('payload1') || null;\nlet payload2 = context.get('payload2') || null;\n\n// Check if the first message has arrived\nif (typeof msg.payload === 'number') {\n    payload1 = msg.payload;\n    context.set('payload1', payload1);\n}\n\n// Check if the second message has arrived\nif (Array.isArray(msg.payload)) {\n    payload2 = msg.payload;\n    context.set('payload2', payload2);\n}\n\n// If both payloads are available, process them\nif (payload1 && payload2) {\n    let result = [];\n\n    // Assuming payload1 is a single value and payload2 is an array of objects\n    let firstValue = payload1;\n    let secondArray = payload2[0];\n\n    secondArray.forEach(item => {\n        let water_level = firstValue - item.value;\n        result.push({water_level: water_level, date: item.start});\n    });\n\n    // Reset the stored payloads\n    context.set('payload1', null);\n    context.set('payload2', null);\n\n    // Return the result\n    return { payload: result };\n}\n\n// Return nothing if both payloads are not yet available\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 1160,
        "wires": [
            [
                "b6c693c028c963a0",
                "7c3e8bd3de1c53b4"
            ]
        ]
    },
    {
        "id": "ac8869c59484f5d0",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "function 588",
        "func": "msg.payload = flow.get('storedPayload');\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1100,
        "wires": [
            [
                "f33c0abfa680c587"
            ]
        ]
    },
    {
        "id": "564e4cfb0b372a40",
        "type": "http request",
        "z": "b61ad1d4aecdd073",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://hydroops-server-dev.vercel.app/sensors/getMetadata",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1310,
        "y": 580,
        "wires": [
            [
                "5181cd82f95f7776"
            ]
        ]
    },
    {
        "id": "d8f8c6ea014f5aa8",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "sen-1",
        "func": "var sensor = \"smartriver\"\nvar id = msg.payload[0]._id\nmsg.payload = {\n    \"measurement\": sensor,\n    \"deviceId\": id\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 600,
        "wires": [
            [
                "564e4cfb0b372a40"
            ]
        ]
    },
    {
        "id": "fc0bd1081c028ef3",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "temp",
        "func": "// The input message contains the JSON object in msg.payload\nlet data = msg.payload;\n\n// Check if msg.payload is empty or undefined\nif (!data || Object.keys(data).length === 0) {\n    msg.payload = \"NoData\";\n} else {\n    // Extract the level\n    let temp = data.internal_temperature;\n\n    // Set the extracted value in msg.payload\n    msg.payload = temp;\n}\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 280,
        "wires": [
            [
                "3761cf800e7ae4d1"
            ]
        ]
    },
    {
        "id": "1743d480ecf3f568",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "lastSent",
        "func": "// The input message contains the JSON object in msg.payload\nlet data = msg.payload;\n\n// Check if msg.payload is empty or undefined\nif (!data || !data.last_sent) {\n    msg.payload = \"NoData\";\n} else {\n    // Extract the level\n    let last = data.last_sent;\n\n    // Create a Date object from the timestamp\n    let date = new Date(last);\n\n    // Define an array of month names\n    let monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n\n    // Get the components of the date\n    let month = monthNames[date.getMonth()];\n    let day = date.getDate();\n    let year = date.getFullYear();\n\n    // Get the components of the time\n    let hours = date.getHours();\n    let minutes = date.getMinutes();\n\n    // Format the time to 12-hour format\n    let ampm = hours >= 12 ? 'PM' : 'AM';\n    hours = hours % 12;\n    hours = hours ? hours : 12; // the hour '0' should be '12'\n    minutes = minutes < 10 ? '0' + minutes : minutes;\n\n    // Construct the formatted date and time string\n    let formattedDate = month + ' ' + day + ', ' + hours + ':' + minutes + ' ' + ampm;\n\n    // Create a new message with the formatted date\n    msg.payload = formattedDate;\n}\n\n// Return the new message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 320,
        "wires": [
            [
                "601ae632e994b91d",
                "582af325593524ab"
            ]
        ]
    },
    {
        "id": "a86672395d1f0220",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "peak",
        "func": "// The input message contains the JSON object in msg.payload\nlet data = msg.payload;\n\n// Check if msg.payload is empty or undefined\nif (!data || !data.detected_peaks) {\n    msg.payload = \"NoData\";\n} else {\n    // Extract the level\n    let peak = data.detected_peaks;\n\n    // Set the extracted value in msg.payload\n    msg.payload = peak;\n}\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 360,
        "wires": [
            [
                "27afcf65bde0a971"
            ]
        ]
    },
    {
        "id": "e1940f26f52da386",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "radarAmp",
        "func": "// The input message contains the JSON object in msg.payload\nlet data = msg.payload;\n\n// Check if msg.payload is empty or undefined\nif (!data || !data.radarAmplitudes) {\n    msg.payload = \"NoData\";\n} else {\n    // Extract the level\n    let radaramp = data.radarAmplitudes;\n\n    // Check if the value is empty or undefined\n    if (!radaramp) {\n        radaramp = \"NoData\";\n    }\n\n    // Set the extracted value in msg.payload\n    msg.payload = radaramp;\n}\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 400,
        "wires": [
            [
                "9474aecb64ef6e5d"
            ]
        ]
    },
    {
        "id": "fa5c29762a851568",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "radarDis",
        "func": "// The input message contains the JSON object in msg.payload\nlet data = msg.payload;\n\n// Check if msg.payload is empty or undefined\nif (!data || !data.radarDistances) {\n    msg.payload = \"NoData\";\n} else {\n    // Extract the level\n    let radardis = data.radarDistances;\n\n    // Check if the value is empty or undefined\n    if (!radardis) {\n        radardis = \"NoData\";\n    }\n\n    // Set the extracted value in msg.payload\n    msg.payload = radardis;\n}\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 440,
        "wires": [
            [
                "0c4155576e46a5e5"
            ]
        ]
    },
    {
        "id": "88a3d68985c84403",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "battery",
        "func": "// The input message contains the JSON object in msg.payload\nlet data = msg.payload;\n\n// Check if msg.payload is empty or undefined\nif (!data || data.battery_voltage === undefined) {\n    msg.payload = \"NoData\";\n} else {\n    // Extract the level\n    let vol = data.battery_voltage;\n\n    // Set the extracted value in msg.payload\n    msg.payload = vol;\n}\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 480,
        "wires": [
            [
                "9383462e3f24bdba"
            ]
        ]
    },
    {
        "id": "a0013d4f06a694c1",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "detSuc",
        "func": "// Check if msg.payload is empty or undefined\nif (!msg.payload || msg.payload.detection_success === undefined) {\n    msg.payload = \"NoData\";\n} else {\n    // Check if msg.payload.detection_success is true (boolean)\n    if (msg.payload.detection_success === true) {\n        // Set the payload to \"Passed\"\n        msg.payload = \"Passed\";\n    } else {\n        // Set the payload to \"Failed\"\n        msg.payload = \"Failed\";\n    }\n}\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 520,
        "wires": [
            [
                "dabb23311fe180ae"
            ]
        ]
    },
    {
        "id": "04c20f96daddc752",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "disQuality",
        "func": "// The input message contains the JSON object in msg.payload\nlet data = msg.payload;\n\n// Check if msg.payload is empty or undefined\nif (!data || data.distance_quality === undefined) {\n    msg.payload = \"NoData\";\n} else {\n    // Extract the level\n    let dqual = data.distance_quality;\n\n    // Set the extracted value in msg.payload\n    msg.payload = dqual;\n}\n\n// Return the modified message\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 560,
        "wires": [
            [
                "6ecf9a65b65411e4"
            ]
        ]
    },
    {
        "id": "3761cf800e7ae4d1",
        "type": "ui_text",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "group": "",
        "order": 35,
        "width": 4,
        "height": 2,
        "name": "",
        "label": "Internal Temperature",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Times New Roman,Times,serif",
        "fontSize": "18",
        "color": "#000000",
        "x": 2100,
        "y": 280,
        "wires": []
    },
    {
        "id": "601ae632e994b91d",
        "type": "ui_text",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "group": "",
        "order": 31,
        "width": 4,
        "height": 2,
        "name": "",
        "label": "Last Sent",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Times New Roman,Times,serif",
        "fontSize": "18",
        "color": "#000000",
        "x": 2060,
        "y": 320,
        "wires": []
    },
    {
        "id": "27afcf65bde0a971",
        "type": "ui_text",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "group": "",
        "order": 37,
        "width": 4,
        "height": 2,
        "name": "",
        "label": "Detected Peaks",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Times New Roman,Times,serif",
        "fontSize": "18",
        "color": "#000000",
        "x": 2080,
        "y": 360,
        "wires": []
    },
    {
        "id": "9474aecb64ef6e5d",
        "type": "ui_text",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "group": "",
        "order": 32,
        "width": 5,
        "height": 2,
        "name": "",
        "label": "Radar Amplitudes",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Times New Roman,Times,serif",
        "fontSize": "18",
        "color": "#000000",
        "x": 2090,
        "y": 400,
        "wires": []
    },
    {
        "id": "0c4155576e46a5e5",
        "type": "ui_text",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "group": "",
        "order": 33,
        "width": 5,
        "height": 2,
        "name": "",
        "label": "Radar Distances",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Times New Roman,Times,serif",
        "fontSize": "18",
        "color": "#000000",
        "x": 2090,
        "y": 440,
        "wires": []
    },
    {
        "id": "9383462e3f24bdba",
        "type": "ui_text",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "group": "",
        "order": 34,
        "width": 4,
        "height": 2,
        "name": "",
        "label": "Battery Voltage",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Times New Roman,Times,serif",
        "fontSize": "18",
        "color": "#000000",
        "x": 2080,
        "y": 480,
        "wires": []
    },
    {
        "id": "dabb23311fe180ae",
        "type": "ui_text",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "group": "",
        "order": 36,
        "width": 4,
        "height": 2,
        "name": "",
        "label": "Detection Success",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Times New Roman,Times,serif",
        "fontSize": "18",
        "color": "#000000",
        "x": 2090,
        "y": 520,
        "wires": []
    },
    {
        "id": "6ecf9a65b65411e4",
        "type": "ui_text",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "group": "",
        "order": 38,
        "width": 5,
        "height": 2,
        "name": "",
        "label": "Distance Quality",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Times New Roman,Times,serif",
        "fontSize": "18",
        "color": "#000000",
        "x": 2080,
        "y": 560,
        "wires": []
    },
    {
        "id": "5181cd82f95f7776",
        "type": "json",
        "z": "b61ad1d4aecdd073",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1470,
        "y": 580,
        "wires": [
            [
                "fc0bd1081c028ef3",
                "1743d480ecf3f568",
                "a86672395d1f0220",
                "e1940f26f52da386",
                "fa5c29762a851568",
                "88a3d68985c84403",
                "a0013d4f06a694c1",
                "04c20f96daddc752",
                "060de59c3f2d6e98"
            ]
        ]
    },
    {
        "id": "27fdbc2da777a606",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "function 589",
        "func": "// Create a mapping of sensor inputs to their corresponding labels\nconst sensorMapping = {\n    \"Goldbach - Siegensdorf\": \"Sensor 1\",\n    \"Rottenburger Becken - Ergoldsbach\": \"Sensor 2\",\n    \"Dörnbach - Unterdörnbach\": \"Sensor 3\",\n    \"Seitengraben Hettenbach\": \"Sensor 4\",\n    \"Goldbach - Kläham\": \"Sensor 5\",\n    \"B15n - Poschenhofer Straße\": \"Sensor 6\",\n    \"Kiefernstraße Einlauf\": \"Sensor 7\",\n    \"Grabensystem - Poschenhofer Straße\": \"Sensor 8\",\n    \"Hettenbach - LA42\": \"Sensor 9\",\n    \"Stockaer Bach\": \"Sensor 10\",\n    \"Gewässer Iffelkofen\": \"Sensor 11\",\n    \"Goldbach Ergoldsbach\": \"Sensor 12\",\n    \"Mühllastgraben - Bayerbacher Straße\": \"Sensor 13\",\n    \"Dörnbach - Oberdörnbach\": \"Sensor 14\",\n    \"Seitelgraben - Kreisverkehr\": \"Sensor 15\",\n    \"Seitelgraben - Überfahrt\": \"Sensor 16\",\n    \"Bayerbacher Bach - Ortsstraße\": \"Sensor 17\"\n};\n\n// Get the input payload\nconst inputPayload = msg.payload;\n\n// Check if the payload matches a key in the sensorMapping\nif (sensorMapping.hasOwnProperty(inputPayload)) {\n    // Set the output payload to the corresponding sensor label\n    msg.payload = sensorMapping[inputPayload];\n} else {\n    // Handle unexpected payload values if necessary\n    msg.payload = \"Unknown sensor\";\n}\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 600,
        "wires": [
            [
                "24120a561b0381da"
            ]
        ]
    },
    {
        "id": "bf10a5536e172f92",
        "type": "ui_template",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "group": "",
        "name": "sen3",
        "order": 4,
        "width": 3,
        "height": 1,
        "format": "<style>\n    @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap');\n\n    .sensor-button {\n        background-color: #2196F3;\n        color: white;\n        padding: 10px 24px;\n        font-size: 16px;\n        font-family: 'Roboto', sans-serif;\n        font-weight: 500; /* Semi-bold */\n        border: none;\n        border-radius: 8px;\n        cursor: pointer;\n        transition: background-color 0.3s, transform 0.2s, box-shadow 0.2s;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n\n    .sensor-button:hover {\n        background-color: #39ff08 !important;\n        box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);\n    }\n\n    .sensor-button:active {\n        transform: scale(0.98);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    }\n\n    .sensor-button.pressed {\n        background-color: #FF5722 !important; /* Change color to indicate press */\n    }\n</style>\n\n<md-button class=\"sensor-button\" ng-class=\"{'pressed': isPressed}\" ng-click=\"pressButton()\">\n    Sensor 3\n</md-button>\n\n<script>\n    (function(scope) {\n        scope.isPressed = false;\n\n        scope.pressButton = function() {\n            scope.isPressed = true;\n\n            // Send the payload\n            scope.send({payload: 'sensor3_pressed'});\n\n            // Optionally, reset the button state after some time\n            setTimeout(function() {\n                scope.isPressed = false;\n                scope.$apply(); // Update the view\n            }, 10000); // 2 seconds delay before resetting\n        };\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 330,
        "y": 820,
        "wires": [
            [
                "624d8ab9f1bd1ca7"
            ]
        ]
    },
    {
        "id": "4941d581829187f5",
        "type": "ui_template",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "group": "",
        "name": "sen4",
        "order": 5,
        "width": 3,
        "height": 1,
        "format": "<style>\n    @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap');\n\n    .sensor-button {\n        background-color: #2196F3;\n        color: white;\n        padding: 10px 24px;\n        font-size: 16px;\n        font-family: 'Roboto', sans-serif;\n        font-weight: 500; /* Semi-bold */\n        border: none;\n        border-radius: 8px;\n        cursor: pointer;\n        transition: background-color 0.3s, transform 0.2s, box-shadow 0.2s;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n\n    .sensor-button:hover {\n        background-color: #39ff08 !important;\n        box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);\n    }\n\n    .sensor-button:active {\n        transform: scale(0.98);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    }\n\n    .sensor-button.pressed {\n        background-color: #FF5722 !important; /* Change color to indicate press */\n    }\n</style>\n\n<md-button class=\"sensor-button\" ng-class=\"{'pressed': isPressed}\" ng-click=\"pressButton()\">\n    Sensor 4\n</md-button>\n\n<script>\n    (function(scope) {\n        scope.isPressed = false;\n\n        scope.pressButton = function() {\n            scope.isPressed = true;\n\n            // Send the payload\n            scope.send({payload: 'sensor4_pressed'});\n\n            // Optionally, reset the button state after some time\n            setTimeout(function() {\n                scope.isPressed = false;\n                scope.$apply(); // Update the view\n            }, 10000); // 2 seconds delay before resetting\n        };\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 330,
        "y": 860,
        "wires": [
            [
                "624d8ab9f1bd1ca7"
            ]
        ]
    },
    {
        "id": "e7157d0c8465ed9f",
        "type": "ui_template",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "group": "",
        "name": "sen5",
        "order": 6,
        "width": 3,
        "height": 1,
        "format": "<style>\n    @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap');\n\n    .sensor-button {\n        background-color: #2196F3;\n        color: white;\n        padding: 10px 24px;\n        font-size: 16px;\n        font-family: 'Roboto', sans-serif;\n        font-weight: 500; /* Semi-bold */\n        border: none;\n        border-radius: 8px;\n        cursor: pointer;\n        transition: background-color 0.3s, transform 0.2s, box-shadow 0.2s;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n\n    .sensor-button:hover {\n        background-color: #39ff08 !important;\n        box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);\n    }\n\n    .sensor-button:active {\n        transform: scale(0.98);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    }\n\n    .sensor-button.pressed {\n        background-color: #FF5722 !important; /* Change color to indicate press */\n    }\n</style>\n\n<md-button class=\"sensor-button\" ng-class=\"{'pressed': isPressed}\" ng-click=\"pressButton()\">\n    Sensor 5\n</md-button>\n\n<script>\n    (function(scope) {\n        scope.isPressed = false;\n\n        scope.pressButton = function() {\n            scope.isPressed = true;\n\n            // Send the payload\n            scope.send({payload: 'sensor5_pressed'});\n\n            // Optionally, reset the button state after some time\n            setTimeout(function() {\n                scope.isPressed = false;\n                scope.$apply(); // Update the view\n            }, 10000); // 2 seconds delay before resetting\n        };\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 330,
        "y": 900,
        "wires": [
            [
                "624d8ab9f1bd1ca7"
            ]
        ]
    },
    {
        "id": "4b349dda95cfb413",
        "type": "ui_template",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "group": "",
        "name": "sen6",
        "order": 7,
        "width": 4,
        "height": 1,
        "format": "<style>\n    @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap');\n\n    .sensor-button {\n        background-color: #2196F3;\n        color: white;\n        padding: 10px 24px;\n        font-size: 16px;\n        font-family: 'Roboto', sans-serif;\n        font-weight: 500; /* Semi-bold */\n        border: none;\n        border-radius: 8px;\n        cursor: pointer;\n        transition: background-color 0.3s, transform 0.2s, box-shadow 0.2s;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n\n    .sensor-button:hover {\n        background-color: #39ff08 !important;\n        box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);\n    }\n\n    .sensor-button:active {\n        transform: scale(0.98);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    }\n\n    .sensor-button.pressed {\n        background-color: #FF5722 !important; /* Change color to indicate press */\n    }\n</style>\n\n<md-button class=\"sensor-button\" ng-class=\"{'pressed': isPressed}\" ng-click=\"pressButton()\">\n    Sensor 6\n</md-button>\n\n<script>\n    (function(scope) {\n        scope.isPressed = false;\n\n        scope.pressButton = function() {\n            scope.isPressed = true;\n\n            // Send the payload\n            scope.send({payload: 'sensor6_pressed'});\n\n            // Optionally, reset the button state after some time\n            setTimeout(function() {\n                scope.isPressed = false;\n                scope.$apply(); // Update the view\n            }, 10000); // 2 seconds delay before resetting\n        };\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 330,
        "y": 940,
        "wires": [
            [
                "624d8ab9f1bd1ca7"
            ]
        ]
    },
    {
        "id": "d844477d55171a3d",
        "type": "ui_template",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "group": "",
        "name": "sen7",
        "order": 10,
        "width": 4,
        "height": 1,
        "format": "<style>\n    @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap');\n\n    .sensor-button {\n        background-color: #2196F3;\n        color: white;\n        padding: 10px 24px;\n        font-size: 16px;\n        font-family: 'Roboto', sans-serif;\n        font-weight: 500; /* Semi-bold */\n        border: none;\n        border-radius: 8px;\n        cursor: pointer;\n        transition: background-color 0.3s, transform 0.2s, box-shadow 0.2s;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n\n    .sensor-button:hover {\n        background-color: #39ff08 !important;\n        box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);\n    }\n\n    .sensor-button:active {\n        transform: scale(0.98);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    }\n\n    .sensor-button.pressed {\n        background-color: #FF5722 !important; /* Change color to indicate press */\n    }\n</style>\n\n<md-button class=\"sensor-button\" ng-class=\"{'pressed': isPressed}\" ng-click=\"pressButton()\">\n    Sensor 7\n</md-button>\n\n<script>\n    (function(scope) {\n        scope.isPressed = false;\n\n        scope.pressButton = function() {\n            scope.isPressed = true;\n\n            // Send the payload\n            scope.send({payload: 'sensor7_pressed'});\n\n            // Optionally, reset the button state after some time\n            setTimeout(function() {\n                scope.isPressed = false;\n                scope.$apply(); // Update the view\n            }, 10000); // 2 seconds delay before resetting\n        };\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 330,
        "y": 980,
        "wires": [
            [
                "624d8ab9f1bd1ca7"
            ]
        ]
    },
    {
        "id": "9a902c5aa04d095d",
        "type": "ui_template",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "group": "",
        "name": "sen8",
        "order": 11,
        "width": 3,
        "height": 1,
        "format": "<style>\n    @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap');\n\n    .sensor-button {\n        background-color: #2196F3;\n        color: white;\n        padding: 10px 24px;\n        font-size: 16px;\n        font-family: 'Roboto', sans-serif;\n        font-weight: 500; /* Semi-bold */\n        border: none;\n        border-radius: 8px;\n        cursor: pointer;\n        transition: background-color 0.3s, transform 0.2s, box-shadow 0.2s;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n\n    .sensor-button:hover {\n        background-color: #39ff08 !important;\n        box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);\n    }\n\n    .sensor-button:active {\n        transform: scale(0.98);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    }\n\n    .sensor-button.pressed {\n        background-color: #FF5722 !important; /* Change color to indicate press */\n    }\n</style>\n\n<md-button class=\"sensor-button\" ng-class=\"{'pressed': isPressed}\" ng-click=\"pressButton()\">\n    Sensor 8\n</md-button>\n\n<script>\n    (function(scope) {\n        scope.isPressed = false;\n\n        scope.pressButton = function() {\n            scope.isPressed = true;\n\n            // Send the payload\n            scope.send({payload: 'sensor8_pressed'});\n\n            // Optionally, reset the button state after some time\n            setTimeout(function() {\n                scope.isPressed = false;\n                scope.$apply(); // Update the view\n            }, 10000); // 2 seconds delay before resetting\n        };\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 330,
        "y": 1020,
        "wires": [
            [
                "624d8ab9f1bd1ca7"
            ]
        ]
    },
    {
        "id": "b1c02a49f7d802fe",
        "type": "ui_template",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "group": "",
        "name": "sen9",
        "order": 12,
        "width": 3,
        "height": 1,
        "format": "<style>\n    @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap');\n\n    .sensor-button {\n        background-color: #2196F3;\n        color: white;\n        padding: 10px 24px;\n        font-size: 16px;\n        font-family: 'Roboto', sans-serif;\n        font-weight: 500; /* Semi-bold */\n        border: none;\n        border-radius: 8px;\n        cursor: pointer;\n        transition: background-color 0.3s, transform 0.2s, box-shadow 0.2s;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n\n    .sensor-button:hover {\n        background-color: #39ff08 !important;\n        box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);\n    }\n\n    .sensor-button:active {\n        transform: scale(0.98);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    }\n\n    .sensor-button.pressed {\n        background-color: #FF5722 !important; /* Change color to indicate press */\n    }\n</style>\n\n<md-button class=\"sensor-button\" ng-class=\"{'pressed': isPressed}\" ng-click=\"pressButton()\">\n    Sensor 9\n</md-button>\n\n<script>\n    (function(scope) {\n        scope.isPressed = false;\n\n        scope.pressButton = function() {\n            scope.isPressed = true;\n\n            // Send the payload\n            scope.send({payload: 'sensor9_pressed'});\n\n            // Optionally, reset the button state after some time\n            setTimeout(function() {\n                scope.isPressed = false;\n                scope.$apply(); // Update the view\n            }, 10000); // 2 seconds delay before resetting\n        };\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 330,
        "y": 1060,
        "wires": [
            [
                "624d8ab9f1bd1ca7"
            ]
        ]
    },
    {
        "id": "b3b4581d06d0a888",
        "type": "ui_template",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "group": "",
        "name": "sen10",
        "order": 13,
        "width": 3,
        "height": 1,
        "format": "<style>\n    @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap');\n\n    .sensor-button {\n        background-color: #2196F3;\n        color: white;\n        padding: 10px 24px;\n        font-size: 16px;\n        font-family: 'Roboto', sans-serif;\n        font-weight: 500; /* Semi-bold */\n        border: none;\n        border-radius: 8px;\n        cursor: pointer;\n        transition: background-color 0.3s, transform 0.2s, box-shadow 0.2s;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n\n    .sensor-button:hover {\n        background-color: #39ff08 !important;\n        box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);\n    }\n\n    .sensor-button:active {\n        transform: scale(0.98);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    }\n\n    .sensor-button.pressed {\n        background-color: #FF5722 !important; /* Change color to indicate press */\n    }\n</style>\n\n<md-button class=\"sensor-button\" ng-class=\"{'pressed': isPressed}\" ng-click=\"pressButton()\">\n    Sensor 10\n</md-button>\n\n<script>\n    (function(scope) {\n        scope.isPressed = false;\n\n        scope.pressButton = function() {\n            scope.isPressed = true;\n\n            // Send the payload\n            scope.send({payload: 'sensor10_pressed'});\n\n            // Optionally, reset the button state after some time\n            setTimeout(function() {\n                scope.isPressed = false;\n                scope.$apply(); // Update the view\n            }, 10000); // 2 seconds delay before resetting\n        };\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 330,
        "y": 1100,
        "wires": [
            [
                "624d8ab9f1bd1ca7"
            ]
        ]
    },
    {
        "id": "309d5b8cba601eb0",
        "type": "ui_template",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "group": "",
        "name": "sen11",
        "order": 14,
        "width": 3,
        "height": 1,
        "format": "<style>\n    @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap');\n\n    .sensor-button {\n        background-color: #2196F3;\n        color: white;\n        padding: 10px 24px;\n        font-size: 16px;\n        font-family: 'Roboto', sans-serif;\n        font-weight: 500; /* Semi-bold */\n        border: none;\n        border-radius: 8px;\n        cursor: pointer;\n        transition: background-color 0.3s, transform 0.2s, box-shadow 0.2s;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n\n    .sensor-button:hover {\n        background-color: #39ff08 !important;\n        box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);\n    }\n\n    .sensor-button:active {\n        transform: scale(0.98);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    }\n\n    .sensor-button.pressed {\n        background-color: #FF5722 !important; /* Change color to indicate press */\n    }\n</style>\n\n<md-button class=\"sensor-button\" ng-class=\"{'pressed': isPressed}\" ng-click=\"pressButton()\">\n    Sensor 11\n</md-button>\n\n<script>\n    (function(scope) {\n        scope.isPressed = false;\n\n        scope.pressButton = function() {\n            scope.isPressed = true;\n\n            // Send the payload\n            scope.send({payload: 'sensor11_pressed'});\n\n            // Optionally, reset the button state after some time\n            setTimeout(function() {\n                scope.isPressed = false;\n                scope.$apply(); // Update the view\n            }, 10000); // 2 seconds delay before resetting\n        };\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 330,
        "y": 1140,
        "wires": [
            [
                "624d8ab9f1bd1ca7"
            ]
        ]
    },
    {
        "id": "6c476d52b2d086d3",
        "type": "ui_template",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "group": "",
        "name": "sen12",
        "order": 15,
        "width": 4,
        "height": 1,
        "format": "<style>\n    @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap');\n\n    .sensor-button {\n        background-color: #2196F3;\n        color: white;\n        padding: 10px 24px;\n        font-size: 16px;\n        font-family: 'Roboto', sans-serif;\n        font-weight: 500; /* Semi-bold */\n        border: none;\n        border-radius: 8px;\n        cursor: pointer;\n        transition: background-color 0.3s, transform 0.2s, box-shadow 0.2s;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n\n    .sensor-button:hover {\n        background-color: #39ff08 !important;\n        box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);\n    }\n\n    .sensor-button:active {\n        transform: scale(0.98);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    }\n\n    .sensor-button.pressed {\n        background-color: #FF5722 !important; /* Change color to indicate press */\n    }\n</style>\n\n<md-button class=\"sensor-button\" ng-class=\"{'pressed': isPressed}\" ng-click=\"pressButton()\">\n    Sensor 12\n</md-button>\n\n<script>\n    (function(scope) {\n        scope.isPressed = false;\n\n        scope.pressButton = function() {\n            scope.isPressed = true;\n\n            // Send the payload\n            scope.send({payload: 'sensor12_pressed'});\n\n            // Optionally, reset the button state after some time\n            setTimeout(function() {\n                scope.isPressed = false;\n                scope.$apply(); // Update the view\n            }, 10000); // 2 seconds delay before resetting\n        };\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 330,
        "y": 1180,
        "wires": [
            [
                "624d8ab9f1bd1ca7"
            ]
        ]
    },
    {
        "id": "24b4599ec02fe4a4",
        "type": "ui_template",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "group": "",
        "name": "sen13",
        "order": 18,
        "width": 3,
        "height": 1,
        "format": "<style>\n    @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap');\n\n    .sensor-button {\n        background-color: #2196F3;\n        color: white;\n        padding: 10px 24px;\n        font-size: 16px;\n        font-family: 'Roboto', sans-serif;\n        font-weight: 500; /* Semi-bold */\n        border: none;\n        border-radius: 8px;\n        cursor: pointer;\n        transition: background-color 0.3s, transform 0.2s, box-shadow 0.2s;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n\n    .sensor-button:hover {\n        background-color: #39ff08 !important;\n        box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);\n    }\n\n    .sensor-button:active {\n        transform: scale(0.98);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    }\n\n    .sensor-button.pressed {\n        background-color: #FF5722 !important; /* Change color to indicate press */\n    }\n</style>\n\n<md-button class=\"sensor-button\" ng-class=\"{'pressed': isPressed}\" ng-click=\"pressButton()\">\n    Sensor 13\n</md-button>\n\n<script>\n    (function(scope) {\n        scope.isPressed = false;\n\n        scope.pressButton = function() {\n            scope.isPressed = true;\n\n            // Send the payload\n            scope.send({payload: 'sensor13_pressed'});\n\n            // Optionally, reset the button state after some time\n            setTimeout(function() {\n                scope.isPressed = false;\n                scope.$apply(); // Update the view\n            }, 10000); // 2 seconds delay before resetting\n        };\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 330,
        "y": 1220,
        "wires": [
            [
                "624d8ab9f1bd1ca7"
            ]
        ]
    },
    {
        "id": "817fccda1d424080",
        "type": "ui_template",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "group": "",
        "name": "sen14",
        "order": 19,
        "width": 3,
        "height": 1,
        "format": "<style>\n    @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap');\n\n    .sensor-button {\n        background-color: #2196F3;\n        color: white;\n        padding: 10px 24px;\n        font-size: 16px;\n        font-family: 'Roboto', sans-serif;\n        font-weight: 500; /* Semi-bold */\n        border: none;\n        border-radius: 8px;\n        cursor: pointer;\n        transition: background-color 0.3s, transform 0.2s, box-shadow 0.2s;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n\n    .sensor-button:hover {\n        background-color: #39ff08 !important;\n        box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);\n    }\n\n    .sensor-button:active {\n        transform: scale(0.98);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    }\n\n    .sensor-button.pressed {\n        background-color: #FF5722 !important; /* Change color to indicate press */\n    }\n</style>\n\n<md-button class=\"sensor-button\" ng-class=\"{'pressed': isPressed}\" ng-click=\"pressButton()\">\n    Sensor 14\n</md-button>\n\n<script>\n    (function(scope) {\n        scope.isPressed = false;\n\n        scope.pressButton = function() {\n            scope.isPressed = true;\n\n            // Send the payload\n            scope.send({payload: 'sensor14_pressed'});\n\n            // Optionally, reset the button state after some time\n            setTimeout(function() {\n                scope.isPressed = false;\n                scope.$apply(); // Update the view\n            }, 10000); // 2 seconds delay before resetting\n        };\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 330,
        "y": 1260,
        "wires": [
            [
                "624d8ab9f1bd1ca7"
            ]
        ]
    },
    {
        "id": "6931ae85aa3011ad",
        "type": "ui_template",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "group": "",
        "name": "sen15",
        "order": 20,
        "width": 4,
        "height": 1,
        "format": "<style>\n    @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap');\n\n    .sensor-button {\n        background-color: #2196F3;\n        color: white;\n        padding: 10px 24px;\n        font-size: 16px;\n        font-family: 'Roboto', sans-serif;\n        font-weight: 500; /* Semi-bold */\n        border: none;\n        border-radius: 8px;\n        cursor: pointer;\n        transition: background-color 0.3s, transform 0.2s, box-shadow 0.2s;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n\n    .sensor-button:hover {\n        background-color: #39ff08 !important;\n        box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);\n    }\n\n    .sensor-button:active {\n        transform: scale(0.98);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    }\n\n    .sensor-button.pressed {\n        background-color: #FF5722 !important; /* Change color to indicate press */\n    }\n</style>\n\n<md-button class=\"sensor-button\" ng-class=\"{'pressed': isPressed}\" ng-click=\"pressButton()\">\n    Sensor 15\n</md-button>\n\n<script>\n    (function(scope) {\n        scope.isPressed = false;\n\n        scope.pressButton = function() {\n            scope.isPressed = true;\n\n            // Send the payload\n            scope.send({payload: 'sensor15_pressed'});\n\n            // Optionally, reset the button state after some time\n            setTimeout(function() {\n                scope.isPressed = false;\n                scope.$apply(); // Update the view\n            }, 10000); // 2 seconds delay before resetting\n        };\n    })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 330,
        "y": 1300,
        "wires": [
            [
                "624d8ab9f1bd1ca7"
            ]
        ]
    },
    {
        "id": "898eb9daa3e9c1dd",
        "type": "ui_template",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "group": "",
        "name": "sen16",
        "order": 21,
        "width": 3,
        "height": 1,
        "format": "<style>\n    @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap');\n\n    .sensor-button {\n        background-color: #2196F3;\n        color: white;\n        padding: 10px 24px;\n        font-size: 16px;\n        font-family: 'Roboto', sans-serif;\n        font-weight: 500;\n        /* Semi-bold */\n        border: none;\n        border-radius: 8px;\n        cursor: pointer;\n        transition: background-color 0.3s, transform 0.2s, box-shadow 0.2s;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n\n    .sensor-button:hover {\n        background-color: #39ff08 !important;\n        box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);\n    }\n\n    .sensor-button:active {\n        transform: scale(0.98);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    }\n\n    .sensor-button.pressed {\n        background-color: #FF5722 !important;\n        /* Change color to indicate press */\n    }\n</style>\n\n<md-button class=\"sensor-button\" ng-class=\"{'pressed': isPressed}\" ng-click=\"pressButton()\">\n    Sensor 16\n</md-button>\n\n<script>\n    (function(scope) {\n        scope.isPressed = false;\n\n        scope.pressButton = function() {\n            scope.isPressed = true;\n\n            // Send the payload\n            scope.send({payload: 'sensor16_pressed'});\n\n            // Optionally, reset the button state after some time\n            setTimeout(function() {\n                scope.isPressed = false;\n                scope.$apply(); // Update the view\n            }, 10000); // 2 seconds delay before resetting\n        };\n    })(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 330,
        "y": 1340,
        "wires": [
            [
                "624d8ab9f1bd1ca7"
            ]
        ]
    },
    {
        "id": "1534c8d46571a604",
        "type": "ui_template",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "group": "",
        "name": "sen17",
        "order": 22,
        "width": 3,
        "height": 1,
        "format": "<style>\n    @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap');\n\n    .sensor-button {\n        background-color: #2196F3;\n        color: white;\n        padding: 10px 24px;\n        font-size: 16px;\n        font-family: 'Roboto', sans-serif;\n        font-weight: 500;\n        /* Semi-bold */\n        border: none;\n        border-radius: 8px;\n        cursor: pointer;\n        transition: background-color 0.3s, transform 0.2s, box-shadow 0.2s;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n\n    .sensor-button:hover {\n        background-color: #39ff08 !important;\n        box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);\n    }\n\n    .sensor-button:active {\n        transform: scale(0.98);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    }\n\n    .sensor-button.pressed {\n        background-color: #FF5722 !important;\n        /* Change color to indicate press */\n    }\n</style>\n\n<md-button class=\"sensor-button\" ng-class=\"{'pressed': isPressed}\" ng-click=\"pressButton()\">\n    Sensor 17\n</md-button>\n\n<script>\n    (function(scope) {\n        scope.isPressed = false;\n\n        scope.pressButton = function() {\n            scope.isPressed = true;\n\n            // Send the payload\n            scope.send({payload: 'sensor17_pressed'});\n\n            // Optionally, reset the button state after some time\n            setTimeout(function() {\n                scope.isPressed = false;\n                scope.$apply(); // Update the view\n            }, 10000); // 2 seconds delay before resetting\n        };\n    })(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 330,
        "y": 1380,
        "wires": [
            [
                "624d8ab9f1bd1ca7"
            ]
        ]
    },
    {
        "id": "7c3e8bd3de1c53b4",
        "type": "debug",
        "z": "b61ad1d4aecdd073",
        "name": "debug 19",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2080,
        "y": 1220,
        "wires": []
    },
    {
        "id": "5d04b36696e94a41",
        "type": "http request",
        "z": "b61ad1d4aecdd073",
        "name": "river (last hour)",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://137.184.228.7:5007/smartriver?ags=09274127&page=1&limit=10000&withData=true&timeFrame=120",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 740,
        "y": 1580,
        "wires": [
            [
                "5df7b9001aceedd3"
            ]
        ]
    },
    {
        "id": "5df7b9001aceedd3",
        "type": "json",
        "z": "b61ad1d4aecdd073",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 910,
        "y": 1580,
        "wires": [
            [
                "d5b36f5579d84fbe"
            ]
        ]
    },
    {
        "id": "d5b36f5579d84fbe",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "extract",
        "func": "// Extract the result object from the incoming message payload\nmsg.payload = msg.payload.data.result;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 1580,
        "wires": [
            [
                "07ad62cfa433ff04"
            ]
        ]
    },
    {
        "id": "07ad62cfa433ff04",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "function 605",
        "func": "// Initialize the result array\nlet result = [];\n\n// Iterate over each object in the payload array\nmsg.payload.forEach(sensor => {\n    // Extract the name\n    let name = sensor.name;\n    \n    // Extract the threshold levels\n    let threshold1 = sensor.thresholds[0]?.level || 0;\n    let threshold2 = sensor.thresholds[1]?.level || 0;\n    \n    // Get the sole correction value\n    let soleCorrectionValue = sensor.soleCorrectionValue || 0;\n    \n    // Initialize water_level\n    let water_level = 0;\n    \n    // Check if the data array is not empty\n    if (sensor.data && sensor.data.length > 0) {\n        // Extract the last value from the data array\n        let lastValue = sensor.data[sensor.data.length - 1]._value || 0;\n        \n        // Calculate the water level\n        water_level = soleCorrectionValue - lastValue;\n        \n        // If water_level is negative, set it to 0\n        if (water_level < 0) {\n            water_level = 0;\n        }\n    }\n    \n    // Push the extracted and calculated values to the result array\n    result.push({\n        name: name,\n        threshold1: threshold1,\n        threshold2: threshold2,\n        water_level: water_level\n    });\n});\n\n// Set the result array as the new payload\nmsg.payload = result;\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 1580,
        "wires": [
            [
                "0eda21aba734f407"
            ]
        ]
    },
    {
        "id": "ce87c24a64c176dc",
        "type": "ui_text",
        "z": "b61ad1d4aecdd073",
        "group": "fc9199f7654b3c8f",
        "order": 1,
        "width": 14,
        "height": 1,
        "name": "",
        "label": "Smart-River Sensor",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "20",
        "color": "#0527b3",
        "x": 1490,
        "y": 1540,
        "wires": []
    },
    {
        "id": "b676f386083a1d56",
        "type": "inject",
        "z": "b61ad1d4aecdd073",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 560,
        "y": 1580,
        "wires": [
            [
                "5d04b36696e94a41"
            ]
        ]
    },
    {
        "id": "a29ebea33e76100e",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "function 620",
        "func": "// List of matching names\nconst matchingNames = [\n    \"Goldbach - Siegensdorf\",\n    \"Rottenburger Becken - Ergoldsbach\",\n    \"Dörnbach - Unterdörnbach\",\n    \"Seitengraben Hettenbach\",\n    \"Goldbach - Kläham\",\n    \"B15n - Poschenhofer Straße\",\n    \"Kiefernstraße Einlauf\",\n    \"Grabensystem - Poschenhofer Straße\",\n    \"Hettenbach - LA42\",\n    \"Stockaer Bach\",\n    \"Gewässer Iffelkofen\",\n    \"Goldbach Ergoldsbach\",\n    \"Mühllastgraben - Bayerbacher Straße\",\n    \"Dörnbach - Oberdörnbach\",\n    \"Seitelgraben - Kreisverkehr\",\n    \"Seitelgraben - Überfahrt\",\n    \"Bayerbacher Bach - Ortsstraße\"\n];\n// To store in flow context\nflow.set('buttonToClick2', msg.payload);\n\n// Check if the payload matches any of the names\nif (matchingNames.includes(msg.payload)) {\n    msg.payload = {\"tab\": \"Smart-River (Test)\"};\n    return msg;\n} else {\n    // Return null to stop the flow if there's no match\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 1580,
        "wires": [
            [
                "c2f535b334abb4be"
            ]
        ]
    },
    {
        "id": "c2f535b334abb4be",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "function 621",
        "func": "// To retrieve from flow context\nmsg.payload = flow.get('buttonToClick2');\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2120,
        "y": 1620,
        "wires": [
            [
                "1b7d88435f0d4cf2"
            ]
        ]
    },
    {
        "id": "1b7d88435f0d4cf2",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "function 622",
        "func": "if (msg.payload === \"Goldbach - Siegensdorf\") {\n    msg.payload = \"sensor1_pressed\";\n} else if (msg.payload === \"Rottenburger Becken - Ergoldsbach\") {\n    msg.payload = \"sensor2_pressed\";\n} else if (msg.payload === \"Dörnbach - Unterdörnbach\") {\n    msg.payload = \"sensor3_pressed\";\n} else if (msg.payload === \"Seitengraben Hettenbach\") {\n    msg.payload = \"sensor4_pressed\";\n} else if (msg.payload === \"Goldbach - Kläham\") {\n    msg.payload = \"sensor5_pressed\";\n} else if (msg.payload === \"B15n - Poschenhofer Straße\") {\n    msg.payload = \"sensor6_pressed\";\n} else if (msg.payload === \"Kiefernstraße Einlauf\") {\n    msg.payload = \"sensor7_pressed\";\n} else if (msg.payload === \"Grabensystem - Poschenhofer Straße\") {\n    msg.payload = \"sensor8_pressed\";\n} else if (msg.payload === \"Hettenbach - LA42\") {\n    msg.payload = \"sensor9_pressed\";\n} else if (msg.payload === \"Stockaer Bach\") {\n    msg.payload = \"sensor10_pressed\";\n} else if (msg.payload === \"Gewässer Iffelkofen\") {\n    msg.payload = \"sensor11_pressed\";\n} else if (msg.payload === \"Goldbach Ergoldsbach\") {\n    msg.payload = \"sensor12_pressed\";\n} else if (msg.payload === \"Mühllastgraben - Bayerbacher Straße\") {\n    msg.payload = \"sensor13_pressed\";\n} else if (msg.payload === \"Dörnbach - Oberdörnbach\") {\n    msg.payload = \"sensor14_pressed\";\n} else if (msg.payload === \"Seitelgraben - Kreisverkehr\") {\n    msg.payload = \"sensor15_pressed\";\n} else if (msg.payload === \"Seitelgraben - Überfahrt\") {\n    msg.payload = \"sensor16_pressed\";\n} else if (msg.payload === \"Bayerbacher Bach - Ortsstraße\") {\n    msg.payload = \"sensor17_pressed\";\n} else {\n    return null;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 1460,
        "wires": [
            [
                "624d8ab9f1bd1ca7"
            ]
        ]
    },
    {
        "id": "41127cd6932c7d05",
        "type": "worldmap in",
        "z": "b61ad1d4aecdd073",
        "name": "",
        "path": "/worldmap",
        "events": "connect,disconnect,point,layer,bounds,files,draw,other",
        "x": 120,
        "y": 1620,
        "wires": [
            [
                "b5cbc4485fdc8300",
                "f33dfb7b9e6af7da"
            ]
        ]
    },
    {
        "id": "b5cbc4485fdc8300",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "function 627",
        "func": "if (msg.payload.name === \"Goldbach - Siegensdorf\") {\n    msg.payload = \"sensor1_pressed\";\n} else if (msg.payload.name === \"Rottenburger Becken - Ergoldsbach\") {\n    msg.payload = \"sensor2_pressed\";\n} else if (msg.payload.name === \"Dörnbach - Unterdörnbach\") {\n    msg.payload = \"sensor3_pressed\";\n} else if (msg.payload.name === \"Seitengraben Hettenbach\") {\n    msg.payload = \"sensor4_pressed\";\n} else if (msg.payload.name === \"Goldbach - Kläham\") {\n    msg.payload = \"sensor5_pressed\";\n} else if (msg.payload.name === \"B15n - Poschenhofer Straße\") {\n    msg.payload = \"sensor6_pressed\";\n} else if (msg.payload.name === \"Kiefernstraße Einlauf\") {\n    msg.payload = \"sensor7_pressed\";\n} else if (msg.payload.name === \"Grabensystem - Poschenhofer Straße\") {\n    msg.payload = \"sensor8_pressed\";\n} else if (msg.payload.name === \"Hettenbach - LA42\") {\n    msg.payload = \"sensor9_pressed\";\n} else if (msg.payload.name === \"Stockaer Bach\") {\n    msg.payload = \"sensor10_pressed\";\n} else if (msg.payload.name === \"Gewässer Iffelkofen\") {\n    msg.payload = \"sensor11_pressed\";\n} else if (msg.payload.name === \"Goldbach Ergoldsbach\") {\n    msg.payload = \"sensor12_pressed\";\n} else if (msg.payload.name === \"Mühllastgraben - Bayerbacher Straße\") {\n    msg.payload = \"sensor13_pressed\";\n} else if (msg.payload.name === \"Dörnbach - Oberdörnbach\") {\n    msg.payload = \"sensor14_pressed\";\n} else if (msg.payload.name === \"Seitelgraben - Kreisverkehr\") {\n    msg.payload = \"sensor15_pressed\";\n} else if (msg.payload.name === \"Seitelgraben - Überfahrt\") {\n    msg.payload = \"sensor16_pressed\";\n} else if (msg.payload.name === \"Bayerbacher Bach - Ortsstraße\") {\n    msg.payload = \"sensor17_pressed\";\n} else {\n    return null;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1620,
        "wires": [
            [
                "624d8ab9f1bd1ca7"
            ]
        ]
    },
    {
        "id": "f33dfb7b9e6af7da",
        "type": "function",
        "z": "b61ad1d4aecdd073",
        "name": "function 628",
        "func": "// Check if the action in msg.payload is 'connected'\nif (msg.payload.action === 'connected') {\n    msg.payload = Math.floor(Date.now() / 1000);\n    return msg;\n} else {\n    msg.payload = false;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1680,
        "wires": [
            [
                "1d5c9a2bde000623"
            ]
        ]
    },
    {
        "id": "1d5c9a2bde000623",
        "type": "switch",
        "z": "b61ad1d4aecdd073",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "number",
                "vt": "number"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 530,
        "y": 1680,
        "wires": [
            [
                "5d04b36696e94a41"
            ],
            []
        ]
    },
    {
        "id": "060de59c3f2d6e98",
        "type": "debug",
        "z": "b61ad1d4aecdd073",
        "name": "debug 20",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1530,
        "y": 420,
        "wires": []
    },
    {
        "id": "582af325593524ab",
        "type": "debug",
        "z": "b61ad1d4aecdd073",
        "d": true,
        "name": "debug 21",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2270,
        "y": 320,
        "wires": []
    },
    {
        "id": "0eda21aba734f407",
        "type": "ui_template",
        "z": "b61ad1d4aecdd073",
        "group": "fc9199f7654b3c8f",
        "name": "smart-river-table",
        "order": 2,
        "width": 14,
        "height": "20",
        "format": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Sensor Data</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <style>\n        /* Reset margin and padding to remove any extra space */\n        body,\n        html {\n            margin: 0;\n            padding: 0;\n        }\n\n        .lightgreen {\n            background-color: lightgreen !important;\n        }\n\n        .lightyellow {\n            background-color: lightyellow !important;\n        }\n\n        .lightcoral {\n            background-color: lightcoral !important;\n        }\n\n        .plum {\n            background-color: plum !important;\n        }\n\n        .col-name {\n            width: 50%;\n            /* Width for Sensor Name column */\n        }\n\n        .col-water-level {\n            width: 20%;\n            /* Width for Water Level column */\n        }\n\n        .col-t1 {\n            width: 15%;\n            /* Width for T1 column */\n        }\n\n        .col-t2 {\n            width: 15%;\n            /* Width for T2 column */\n        }\n\n        .table-container {\n            position: relative;\n            margin-top: 0;\n            /* Remove margin-top to eliminate space above the table */\n        }\n\n        table {\n            width: 100%;\n            text-align: center;\n            /* Center text horizontally in the table */\n            margin-top: 0;\n            /* Remove any default margin-top applied by Bootstrap or browsers */\n        }\n\n        th,\n        td {\n            vertical-align: middle;\n            /* Center text vertically in table cells */\n            padding: 0.5rem;\n            /* Optional: Add padding to ensure content doesn't touch the borders */\n        }\n\n        .btn-custom {\n            background-color: #f8f9fa;\n            /* Light background */\n            border: none;\n            /* Remove border */\n            color: black;\n            /* Font color */\n            text-decoration: none;\n            /* Remove underline */\n            padding: 0.5rem 1rem;\n            /* Adjust padding */\n            border-radius: 0.25rem;\n            /* Rounded corners */\n            display: inline-block;\n            /* Inline-block for button styling */\n        }\n\n        .btn-custom:hover {\n            background-color: #dbd9d7;\n            /* Hover background color */\n            color: black;\n            /* Ensure font color is black on hover */\n        }\n\n        .large-circle {\n            width: 20px;\n            /* Increased circle size */\n            height: 20px;\n            /* Increased circle size */\n            border-radius: 50%;\n            /* Make it a circle */\n            display: inline-block;\n            /* Inline-block for proper alignment */\n        }\n\n        .green-circle {\n            background-color: lightgreen;\n        }\n\n        .red-circle {\n            background-color: lightcoral;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"container table-container\">\n        <table class=\"table table-striped table-bordered table-hover\">\n            <thead class=\"table-primary\">\n                <tr>\n                    <th class=\"col-name\">Sensor Name</th>\n                    <th class=\"col-water-level\">Water Level</th>\n                    <th class=\"col-t1\">T1</th>\n                    <th class=\"col-t2\">T2</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr ng-repeat=\"item in msg.payload\">\n                    <td>\n                        <a href=\"http://78.46.151.191:1880/ui/#!/2?socketid=TfVN-GdZaHmU3Ox9AAFH\" target=\"_blank\"\n                            ng-click=\"sendClick(item.name, $event)\" class=\"btn btn-custom\">\n                            {{item.name}}\n                        </a>\n                    </td>\n                    <td>{{item.water_level}} cm</td>\n                    <td>\n                        <span ng-class=\"{\n                            'large-circle': true,\n                            'green-circle': item.water_level < item.threshold1,\n                            'red-circle': item.water_level >= item.threshold1\n                        }\"></span>\n                    </td>\n                    <td>\n                        <span ng-class=\"{\n                            'large-circle': true,\n                            'green-circle': item.water_level < item.threshold2,\n                            'red-circle': item.water_level >= item.threshold2\n                        }\"></span>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n\n    <script>\n        (function(scope) {\n            scope.sendClick = function(name, event) {\n                // Prevent the default behavior of the link\n                event.preventDefault();\n                // Send the payload with the sensor name\n                scope.send({payload: name});\n                // Open the URL in a new tab\n                window.open(event.target.href, '_blank');\n            };\n        })(scope);\n    </script>\n</body>\n\n</html>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1480,
        "y": 1580,
        "wires": [
            [
                "a29ebea33e76100e"
            ]
        ]
    },
    {
        "id": "5765d1319e1eedc6",
        "type": "debug",
        "z": "b61ad1d4aecdd073",
        "name": "debug 27",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 1420,
        "wires": []
    },
    {
        "id": "1e7547b80ebd5710",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "43a6bc36c8caaea6",
        "name": "Menu-river",
        "order": 1,
        "width": 28,
        "height": 2,
        "format": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\n    <!-- Google Fonts -->\n    <link href=\"https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap\" rel=\"stylesheet\">\n\n    <!-- Select2 CSS -->\n    <link href=\"https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css\" rel=\"stylesheet\" />\n\n    <!-- Daterangepicker CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css\">\n\n    <!-- Font Awesome for the calendar icon -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css\">\n\n    <!-- Custom Styles -->\n    <style>\n        body {\n            font-family: 'Poppins', sans-serif;\n            background-color: #f7f8fc;\n            color: #333;\n            margin: 0;\n            padding: 0;\n        }\n\n        .dropdown-container {\n            display: flex;\n            align-items: center;\n            width: 100%;\n            padding: 15px;\n            box-sizing: border-box;\n            background-color: #fff;\n            border-radius: 10px;\n            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\n            margin-bottom: 10px;\n        }\n\n        .dropdown-container .select2-container {\n            flex: 1;\n            margin-right: 10px;\n            min-width: 200px;\n        }\n\n        .select2-container--default .select2-selection--multiple {\n            padding: 8px 10px;\n            width: 80%;\n            max-height: 60px;\n            overflow-y: auto;\n            background-color: #f1f3f5;\n            border: 1px solid #ced4da;\n            border-radius: 8px;\n            font-size: 14px;\n            font-family: 'Poppins', sans-serif;\n            position: relative;\n        }\n\n        .select2-container--default .select2-selection--multiple .select2-selection__rendered {\n            font-size: 14px;\n            color: #495057;\n        }\n\n        .select2-container--default .select2-selection--multiple .select2-selection__choice {\n            font-size: 14px;\n            background-color: #007bff;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            margin-right: 5px;\n        }\n\n        .select2-container--default .select2-selection--multiple .select2-selection_choice_remove {\n            color: #fff;\n            margin-left: 8px;\n            cursor: pointer;\n        }\n\n        .select2-container--default .select2-selection--multiple:after {\n            content: '\\25BC';\n            position: absolute;\n            top: 50%;\n            right: 12px;\n            transform: translateY(-50%);\n            pointer-events: none;\n            font-size: 16px;\n            color: #495057;\n        }\n\n        .date-range-container {\n            display: flex;\n            align-items: center;\n            position: relative;\n            width: 250px;\n            background: #f1f3f5;\n            border: 1px solid #ced4da;\n            border-radius: 8px;\n            margin-left: 15px;\n            margin-right: 15px;\n            box-sizing: border-box;\n        }\n\n        .date-range-container .calendar-icon {\n            position: absolute;\n            left: 10px;\n            color: #495057;\n            font-size: 16px;\n        }\n\n        .date-range-container .date-range-input {\n            width: 100%;\n            padding: 8px 12px 8px 35px; /* Add padding to the left to accommodate the icon */\n            border: none;\n            background: transparent;\n            font-family: 'Poppins', sans-serif;\n            color: #495057;\n            box-sizing: border-box;\n        }\n\n        .date-range-container .date-range-input:focus {\n            outline: none;\n        }\n\n        .show-button,\n        .download-button {\n            padding: 8px 15px;\n            color: white;\n            border: none;\n            border-radius: 8px;\n            cursor: pointer;\n            font-size: 13px;\n            font-weight: 500;\n            height: 40px;\n            font-family: 'Poppins', sans-serif;\n            transition: background-color 0.3s ease;\n        }\n\n        .show-button {\n            background-color: #007bff;\n            margin-right: 15px;\n        }\n\n        .show-button:hover {\n            background-color: #0056b3;\n        }\n\n        .download-button {\n            background-color: #28a745;\n            display: none;\n        }\n\n        .download-button:hover {\n            background-color: #218838;\n        }\n\n        .popup-message {\n            position: fixed;\n            top: 10px;\n            left: 50%;\n            transform: translateX(-50%);\n            background-color: #dc3545;\n            color: white;\n            padding: 10px 20px;\n            border-radius: 8px;\n            font-size: 14px;\n            font-family: 'Poppins', sans-serif;\n            z-index: 9999;\n            display: none;\n            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\n        }\n\n        /* Ensure Daterangepicker calendar is properly displayed above other elements */\n        .daterangepicker {\n            z-index: 1050 !important;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"dropdown-container\">\n        <select id=\"nameDropdown\" multiple=\"multiple\">\n            <option value=\"Goldbach - Siegensdorf\">Goldbach - Siegensdorf</option>\n            <option value=\"Rottenburger Becken - Ergoldsbach\">Rottenburger Becken - Ergoldsbach</option>\n            <option value=\"Dörnbach - Unterdörnbach\">Dörnbach - Unterdörnbach</option>\n            <option value=\"Seitengraben Hettenbach\">Seitengraben Hettenbach</option>\n            <option value=\"Goldbach - Kläham\">Goldbach - Kläham</option>\n            <option value=\"B15n - Poschenhofer Straße\">B15n - Poschenhofer Straße</option>\n            <option value=\"Kiefernstraße Einlauf\">Kiefernstraße Einlauf</option>\n            <option value=\"Grabensystem - Poschenhofer Straße\">Grabensystem - Poschenhofer Straße</option>\n            <option value=\"Hettenbach - LA42\">Hettenbach - LA42</option>\n            <option value=\"Stockaer Bach\">Stockaer Bach</option>\n            <option value=\"Gewässer Iffelkofen\">Gewässer Iffelkofen</option>\n            <option value=\"Goldbach Ergoldsbach\">Goldbach Ergoldsbach</option>\n            <option value=\"Mühllastgraben - Bayerbacher Straße\">Mühllastgraben - Bayerbacher Straße</option>\n            <option value=\"Dörnbach - Oberdörnbach\">Dörnbach - Oberdörnbach</option>\n            <option value=\"Seitelgraben - Kreisverkehr\">Seitelgraben - Kreisverkehr</option>\n            <option value=\"Seitelgraben - Überfahrt\">Seitelgraben - Überfahrt</option>\n            <option value=\"Bayerbacher Bach - Ortsstraße\">Bayerbacher Bach - Ortsstraße</option>\n        </select>\n\n        <div class=\"date-range-container\">\n            <i class=\"fas fa-calendar-alt calendar-icon\"></i>\n            <input type=\"text\" id=\"daterange\" class=\"date-range-input\" placeholder=\"Select Date Range\">\n        </div>\n\n        <button id=\"showButton\" class=\"show-button\">Show</button>\n        <button id=\"downloadButton\" class=\"download-button\">Download .csv</button>\n    </div>\n\n    <div id=\"popupMessage\" class=\"popup-message\">Maximum selections of sensor is 4!</div>\n\n    <!-- jQuery -->\n    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n\n    <!-- Select2 JS -->\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js\"></script>\n\n    <!-- Daterangepicker JS -->\n    <script src=\"https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js\"></script>\n\n    <!-- Custom Script -->\n    <script>\n        (function(scope) {\n            $(document).ready(function() {\n                $('#nameDropdown').select2({\n                    placeholder: \"Select sensors\",\n                    tags: true,\n                    tokenSeparators: [',', ' '],\n                    dropdownAutoWidth: true,\n                    width: 'resolve'\n                });\n\n                $('#nameDropdown').on('select2:select', function (e) {\n                    var selectedValues = $('#nameDropdown').val();\n                    if (selectedValues.length > 4) {\n                        $('#nameDropdown').val(selectedValues.slice(0, 4)).trigger('change');\n                        showPopupMessage();\n                    }\n                });\n\n                $('#showButton').click(function(event) {\n                    event.preventDefault();\n                    var selectedValues = $('#nameDropdown').val();\n                    var selectedDates = $('#daterange').val();\n                    scope.send({\n                        payload: {\n                            names: selectedValues,\n                            dates: selectedDates\n                        }\n                    });\n                    // Show the download button after clicking Show\n                    $('#downloadButton').show();\n                });\n\n                $('#daterange').daterangepicker({\n                    autoUpdateInput: false,\n                    locale: {\n                        cancelLabel: 'Clear',\n                    },\n                    maxDate: moment(),\n                    opens: 'left',\n                    showDropdowns: true\n                });\n\n                $('#daterange').on('apply.daterangepicker', function(ev, picker) {\n                    $(this).val(picker.startDate.format('MM.DD.YYYY') + ' - ' + picker.endDate.format('MM.DD.YYYY'));\n                });\n\n                $('#daterange').on('cancel.daterangepicker', function(ev, picker) {\n                    $(this).val('');\n                });\n\n                function showPopupMessage() {\n                    $('#popupMessage').fadeIn(300).delay(3000).fadeOut(300);\n                }\n            });\n        })(scope);\n    </script>\n</body>\n\n</html>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 170,
        "y": 900,
        "wires": [
            [
                "014fed1404867844",
                "075a5cc6c224c433",
                "305eca75cdb63ed8"
            ]
        ]
    },
    {
        "id": "343a0f706b199f73",
        "type": "ui_ui_control",
        "z": "241d6dd772dc326f",
        "name": "",
        "events": "change",
        "x": 360,
        "y": 740,
        "wires": [
            [
                "075a5cc6c224c433"
            ]
        ]
    },
    {
        "id": "014fed1404867844",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "function 680",
        "func": "flow.set(\"NumberOfSensorsR\", msg.payload.names)\n// Check if msg.payload is an array\nif (Array.isArray(msg.payload.names)) {\n    // Get the length of the array\n    let arrayLength = msg.payload.names.length;\n    \n    // Return the length if it's between 1 and 4\n    if (arrayLength >= 1 && arrayLength <= 4) {\n        msg.payload = arrayLength;\n    } else {\n        msg.payload = \"Array length is out of range\";\n    }\n} else {\n    // Handle case where msg.payload is not an array\n    msg.payload = \"msg.payload is not an array\";\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 900,
        "wires": [
            [
                "30b3beefd985b984",
                "db469babb03bd144",
                "5a316bed2c3e7a5f",
                "5dbb45543ad30a56"
            ]
        ]
    },
    {
        "id": "305eca75cdb63ed8",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "function 681",
        "func": "// Extract the dates string from msg.payload\nvar dates = msg.payload.dates;\n\n// Split the string into start and end dates\nvar dateRange = dates.split(\" - \");\n\n// Define a function to convert a date string to the desired format\nfunction formatDate(dateString) {\n    // Split the date string into parts: MM/DD/YYYY\n    var dateParts = dateString.split(\".\");\n    var month = parseInt(dateParts[0], 10) - 1; // Month is zero-based in JavaScript Date\n    var day = parseInt(dateParts[1], 10);\n    var year = parseInt(dateParts[2], 10);\n\n    // Create a new Date object using the parsed values\n    var date = new Date(year, month, day);\n    \n    // Format the date to ISO 8601 string with timezone\n    return date.toISOString();\n}\n\n// Format the start and end dates\nvar startDate = formatDate(dateRange[0]);\nvar endDate = formatDate(dateRange[1]);\n\n// Adjust start date to start of the day and end date to end of the day\nstartDate = new Date(startDate).setUTCHours(0,0,0,0);\nendDate = new Date(endDate).setUTCHours(0,0,0,0);\n\n// Convert back to ISO string\nstartDate = new Date(startDate).toISOString();\nendDate = new Date(endDate).toISOString();\n\n// Create a new payload with the desired format\nmsg.payload = {\n    startDate: startDate,\n    endDate: endDate\n};\n\nflow.set(\"startDate\", startDate);\nflow.set(\"endDate\", endDate);\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "30b3beefd985b984",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "function 682",
        "func": "if (msg.payload === 1) {\n    return {payload: true};\n} else {\n    return {payload: false};\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 840,
        "wires": [
            [
                "6b6d3cad23999af0"
            ]
        ]
    },
    {
        "id": "db469babb03bd144",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "function 683",
        "func": "if (msg.payload === 2) {\n    return {payload: true};\n} else {\n    return {payload: false};\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 880,
        "wires": [
            [
                "e4fad0ddf629545d"
            ]
        ]
    },
    {
        "id": "5a316bed2c3e7a5f",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "function 684",
        "func": "if (msg.payload === 3) {\n    return {payload: true};\n} else {\n    return {payload: false};\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 920,
        "wires": [
            [
                "9dabc4b96fd08db3"
            ]
        ]
    },
    {
        "id": "5dbb45543ad30a56",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "function 685",
        "func": "if (msg.payload === 4) {\n    return {payload: true};\n} else {\n    return {payload: false};\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 960,
        "wires": [
            [
                "83f650436341f309"
            ]
        ]
    },
    {
        "id": "6b6d3cad23999af0",
        "type": "switch",
        "z": "241d6dd772dc326f",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 930,
        "y": 480,
        "wires": [
            [
                "c208415a788dc0bb"
            ],
            []
        ]
    },
    {
        "id": "e4fad0ddf629545d",
        "type": "switch",
        "z": "241d6dd772dc326f",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 970,
        "y": 680,
        "wires": [
            [
                "da337b64a6eb6f5f"
            ],
            []
        ]
    },
    {
        "id": "9dabc4b96fd08db3",
        "type": "switch",
        "z": "241d6dd772dc326f",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 950,
        "y": 1200,
        "wires": [
            [
                "10c7ac5092c117e7"
            ],
            []
        ]
    },
    {
        "id": "83f650436341f309",
        "type": "switch",
        "z": "241d6dd772dc326f",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 950,
        "y": 1260,
        "wires": [
            [
                "66a58f137fa18279"
            ],
            []
        ]
    },
    {
        "id": "66a58f137fa18279",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "function 686",
        "func": "msg.payload = {\n    \"group\": {\n        \"show\": [\"Smart-River_Dashboard_Group_7\", \"Smart-River_Dashboard_Group_8\", \"Smart-River_Dashboard_Group_9\", \"Smart-River_Dashboard_Group_10\"],\n        \"hide\": [\"Smart-River_Dashboard_Group_1\", \"Smart-River_Dashboard_Group_2\", \"Smart-River_Dashboard_Group_3\", \"Smart-River_Dashboard_Group_4\", \"Smart-River_Dashboard_Group_5\", \"Smart-River_Dashboard_Group_6\"]\n    }\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 1260,
        "wires": [
            [
                "5048a5b82f18c0d5",
                "8d3278ee3d5939b5",
                "1ad51bdbaa509d48",
                "9a90cb847a889470",
                "6051555d75a13d26"
            ]
        ]
    },
    {
        "id": "10c7ac5092c117e7",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "function 687",
        "func": "msg.payload = {\n    \"group\": {\n        \"show\": [\"Smart-River_Dashboard_Group_4\", \"Smart-River_Dashboard_Group_5\", \"Smart-River_Dashboard_Group_6\"],\n        \"hide\": [\"Smart-River_Dashboard_Group_1\", \"Smart-River_Dashboard_Group_2\", \"Smart-River_Dashboard_Group_3\", \"Smart-River_Dashboard_Group_7\", \"Smart-River_Dashboard_Group_8\", \"Smart-River_Dashboard_Group_9\", \"Smart-River_Dashboard_Group_10\"]\n    }\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 1180,
        "wires": [
            [
                "46869175d77cace4",
                "963179d96fc4ff4f",
                "5c5b01665dd1914b",
                "80193e85f99ae79c"
            ]
        ]
    },
    {
        "id": "da337b64a6eb6f5f",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "function 688",
        "func": "msg.payload = {\n    \"group\": {\n        \"show\": [\"Smart-River_Dashboard_Group_2\", \"Smart-River_Dashboard_Group_3\"],\n        \"hide\": [\"Smart-River_Dashboard_Group_1\", \"Smart-River_Dashboard_Group_4\", \"Smart-River_Dashboard_Group_5\", \"Smart-River_Dashboard_Group_6\", \"Smart-River_Dashboard_Group_7\", \"Smart-River_Dashboard_Group_8\", \"Smart-River_Dashboard_Group_9\", \"Smart-River_Dashboard_Group_10\"]\n    }\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 600,
        "wires": [
            [
                "c20d1bfac3eb7e0b",
                "082a48f8fd412823",
                "a0a198a3500f822b"
            ]
        ]
    },
    {
        "id": "c208415a788dc0bb",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "Control Group Visibility",
        "func": "msg.payload = {\n    \"group\": {\n        \"show\": [\"Smart-River_Dashboard_Group_1\"],\n        \"hide\": [\"Smart-River_Dashboard_Group_2\", \"Smart-River_Dashboard_Group_3\", \"Smart-River_Dashboard_Group_4\", \"Smart-River_Dashboard_Group_5\", \"Smart-River_Dashboard_Group_6\", \"Smart-River_Dashboard_Group_7\", \"Smart-River_Dashboard_Group_8\", \"Smart-River_Dashboard_Group_9\", \"Smart-River_Dashboard_Group_10\"]\n    }\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 400,
        "wires": [
            [
                "ed2566ce35603ceb",
                "7ab17dafb8a16760"
            ]
        ]
    },
    {
        "id": "7ab17dafb8a16760",
        "type": "ui_ui_control",
        "z": "241d6dd772dc326f",
        "name": "",
        "events": "change",
        "x": 1400,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "ed2566ce35603ceb",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "function 689",
        "func": "var sensor = flow.get(\"NumberOfSensorsR\");\nvar start = flow.get(\"startDate\");\nvar end = flow.get(\"endDate\");\nmsg.name = sensor[0];\nmsg.start = start;\nmsg.end = end;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 360,
        "wires": [
            [
                "e9574d1eb56a9c0b"
            ]
        ]
    },
    {
        "id": "c20d1bfac3eb7e0b",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "function 690",
        "func": "var sensor = flow.get(\"NumberOfSensorsR\");\nvar start = flow.get(\"startDate\");\nvar end = flow.get(\"endDate\");\nmsg.name = sensor[0];\nmsg.start = start;\nmsg.end = end;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 560,
        "wires": [
            [
                "ec2f8c52c5a6c0c9"
            ]
        ]
    },
    {
        "id": "a0a198a3500f822b",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "function 691",
        "func": "var sensor = flow.get(\"NumberOfSensorsR\");\nvar start = flow.get(\"startDate\");\nvar end = flow.get(\"endDate\");\nmsg.name = sensor[1];\nmsg.start = start;\nmsg.end = end;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 640,
        "wires": [
            [
                "6c2baa1e044638da"
            ]
        ]
    },
    {
        "id": "082a48f8fd412823",
        "type": "ui_ui_control",
        "z": "241d6dd772dc326f",
        "name": "",
        "events": "change",
        "x": 1320,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "963179d96fc4ff4f",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "function 692",
        "func": "var sensor = flow.get(\"NumberOfSensorsR\");\nvar start = flow.get(\"startDate\");\nvar end = flow.get(\"endDate\");\nmsg.name = sensor[0];\nmsg.start = start;\nmsg.end = end;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 1120,
        "wires": [
            [
                "1dce905adabd07b3"
            ]
        ]
    },
    {
        "id": "5c5b01665dd1914b",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "function 693",
        "func": "var sensor = flow.get(\"NumberOfSensorsR\");\nvar start = flow.get(\"startDate\");\nvar end = flow.get(\"endDate\");\nmsg.name = sensor[1];\nmsg.start = start;\nmsg.end = end;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 1160,
        "wires": [
            [
                "b5b26b8abef6c3aa"
            ]
        ]
    },
    {
        "id": "80193e85f99ae79c",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "function 694",
        "func": "var sensor = flow.get(\"NumberOfSensorsR\");\nvar start = flow.get(\"startDate\");\nvar end = flow.get(\"endDate\");\nmsg.name = sensor[2];\nmsg.start = start;\nmsg.end = end;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 1200,
        "wires": [
            [
                "9388e8b99535fec2"
            ]
        ]
    },
    {
        "id": "46869175d77cace4",
        "type": "ui_ui_control",
        "z": "241d6dd772dc326f",
        "name": "",
        "events": "all",
        "x": 1320,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "075a5cc6c224c433",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "Hide All Groups",
        "func": "if (msg.tab === 1) {\n    msg.payload = {\n        \"group\": {\n            \"hide\": [\"Smart-River_Dashboard_Group_1\", \"Smart-River_Dashboard_Group_2\", \"Smart-River_Dashboard_Group_3\", \"Smart-River_Dashboard_Group_4\", \"Smart-River_Dashboard_Group_5\", \"Smart-River_Dashboard_Group_6\", \"Smart-River_Dashboard_Group_7\", \"Smart-River_Dashboard_Group_8\", \"Smart-River_Dashboard_Group_9\", \"Smart-River_Dashboard_Group_10\"]\n        }\n    };\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 740,
        "wires": [
            [
                "eb0c35660ed67a13"
            ]
        ]
    },
    {
        "id": "eb0c35660ed67a13",
        "type": "ui_ui_control",
        "z": "241d6dd772dc326f",
        "name": "",
        "events": "change",
        "x": 760,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "5048a5b82f18c0d5",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "function 695",
        "func": "var sensor = flow.get(\"NumberOfSensorsR\");\nvar start = flow.get(\"startDate\");\nvar end = flow.get(\"endDate\");\nmsg.name = sensor[0];\nmsg.start = start;\nmsg.end = end;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 1420,
        "wires": [
            [
                "03a7abae0fd22b7b"
            ]
        ]
    },
    {
        "id": "8d3278ee3d5939b5",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "function 696",
        "func": "var sensor = flow.get(\"NumberOfSensorsR\");\nvar start = flow.get(\"startDate\");\nvar end = flow.get(\"endDate\");\nmsg.name = sensor[1];\nmsg.start = start;\nmsg.end = end;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 1460,
        "wires": [
            [
                "c5f431a0cde79053"
            ]
        ]
    },
    {
        "id": "1ad51bdbaa509d48",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "function 697",
        "func": "var sensor = flow.get(\"NumberOfSensorsR\");\nvar start = flow.get(\"startDate\");\nvar end = flow.get(\"endDate\");\nmsg.name = sensor[2];\nmsg.start = start;\nmsg.end = end;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 1500,
        "wires": [
            [
                "6286c0ce90304ed5"
            ]
        ]
    },
    {
        "id": "9a90cb847a889470",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "function 698",
        "func": "var sensor = flow.get(\"NumberOfSensorsR\");\nvar start = flow.get(\"startDate\");\nvar end = flow.get(\"endDate\");\nmsg.name = sensor[3];\nmsg.start = start;\nmsg.end = end;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 1540,
        "wires": [
            [
                "7683224910c8cf92"
            ]
        ]
    },
    {
        "id": "6051555d75a13d26",
        "type": "ui_ui_control",
        "z": "241d6dd772dc326f",
        "name": "",
        "events": "change",
        "x": 1320,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "e9574d1eb56a9c0b",
        "type": "http request",
        "z": "241d6dd772dc326f",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://137.184.228.7:5007/smartriver?ags=09274127&page=1&limit=10000&withData=true&resolution=60&searchTerm={{name}}&start={{start}}&end={{end}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1590,
        "y": 360,
        "wires": [
            [
                "3f22d97dd8f74177"
            ]
        ]
    },
    {
        "id": "286da6fb198ce7b3",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "protocol",
        "func": "// Assuming msg.payload is an array with one object\nconst payload = msg.payload[0];\n\n// Extract the name from the object\nmsg.payload = payload.protocolType;\n\n// Return the updated message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3740,
        "y": 140,
        "wires": [
            [
                "a1307fa6569c84f3"
            ]
        ]
    },
    {
        "id": "3f22d97dd8f74177",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "extract",
        "func": "// Extract the result object from the incoming message payload\nmsg.payload = msg.payload.data.result;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 360,
        "wires": [
            [
                "286da6fb198ce7b3",
                "5e7432d3b6c89a46",
                "dcb38a42b36acbf3",
                "23ac727ef7409320",
                "c0fc8c0d46c3bf44"
            ]
        ]
    },
    {
        "id": "5e7432d3b6c89a46",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "name",
        "func": "// Assuming msg.payload is an array with one object\nconst payload = msg.payload[0];\n\n// Extract the name from the object\nmsg.payload = payload.name;\n\n// Return the updated message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 100,
        "wires": [
            [
                "790af7ba5f64be83"
            ]
        ]
    },
    {
        "id": "67a2597a60263d4c",
        "type": "http request",
        "z": "241d6dd772dc326f",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://hydroops-server-dev.vercel.app/sensors/getMetadata",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 2870,
        "y": 120,
        "wires": [
            [
                "80b3337b2009016f",
                "652faf8f371a6752"
            ]
        ]
    },
    {
        "id": "652faf8f371a6752",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "temp",
        "func": "// The input message contains the JSON object in msg.payload\nlet data = msg.payload;\n\n// Check if msg.payload is empty or undefined\nif (!data || Object.keys(data).length === 0) {\n    msg.payload = \"NoData\";\n} else {\n    // Extract the level\n    let temp = data.internal_temperature;\n\n    // Set the extracted value in msg.payload\n    msg.payload = temp;\n}\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 220,
        "wires": [
            [
                "75a6ee91717a9daa"
            ]
        ]
    },
    {
        "id": "80b3337b2009016f",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "battery",
        "func": "// The input message contains the JSON object in msg.payload\nlet data = msg.payload;\n\n// Check if msg.payload is empty or undefined\nif (!data || data.battery_voltage === undefined) {\n    msg.payload = \"NoData\";\n} else {\n    // Extract the level\n    let vol = data.battery_voltage;\n\n    // Set the extracted value in msg.payload\n    msg.payload = vol;\n}\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 180,
        "wires": [
            [
                "6f346e86dc990ceb"
            ]
        ]
    },
    {
        "id": "dcb38a42b36acbf3",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "function 699",
        "func": "var sensor = \"smartriver\"\nvar id = msg.payload[0]._id\nmsg.payload = {\n    \"measurement\": sensor,\n    \"deviceId\": id\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2690,
        "y": 120,
        "wires": [
            [
                "67a2597a60263d4c"
            ]
        ]
    },
    {
        "id": "790af7ba5f64be83",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "765c07f1cdaa9cd0",
        "name": "name",
        "order": 1,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9;\n        /* Light background color */\n        border-radius: 15px;\n        /* Rounded corners */\n        padding: 15px;\n        width: 300px;\n        /* Adjust the width as needed */\n        height: auto;\n        /* Allow height to adjust based on content */\n        max-height: 150px;\n        /* Set a maximum height */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center;\n        /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);\n        /* Optional: shadow effect */\n        overflow: hidden;\n        /* Hide overflow */\n    }\n\n    .sensor-key {\n        font-size: 12px;\n        /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333;\n        /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n        white-space: nowrap;\n        /* Prevent text wrapping */\n        overflow: hidden;\n        /* Hide overflow */\n        text-overflow: ellipsis;\n        /* Show ellipsis for overflow text */\n    }\n\n    .divider {\n        width: 80%;\n        /* Slim line width */\n        height: 1px;\n        /* Slim line height */\n        background-color: #ccc;\n        /* Ash-colored line */\n        margin: 5px 0 15px 0;\n        /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px;\n        /* Font size for values */\n        font-weight: bold;\n        text-align: center;\n        /* Center-align the text */\n        width: 100%;\n        /* Ensure the text takes up the full width */\n        white-space: nowrap;\n        /* Prevent text wrapping */\n        overflow: hidden;\n        /* Hide overflow */\n        text-overflow: ellipsis;\n        /* Show ellipsis for overflow text */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\" title=\"name\">Sensor Name</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\" title=\"{{msg.payload}}\">{{msg.payload}}</div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3910,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "a1307fa6569c84f3",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "765c07f1cdaa9cd0",
        "name": "protocol",
        "order": 2,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Protocol Type</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3920,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "6f346e86dc990ceb",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "765c07f1cdaa9cd0",
        "name": "battery",
        "order": 3,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Battery Voltage</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3910,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "75a6ee91717a9daa",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "765c07f1cdaa9cd0",
        "name": "temp",
        "order": 4,
        "width": 7,
        "height": 2,
        "format": "<style>\n.sensor-box {\n    background-color: #f9f9f9; /* Light background color */\n    border-radius: 15px; /* Rounded corners */\n    padding: 15px;\n    width: 300px; /* Adjust the width as needed */\n    height: 100px; /* Adjust the height as needed */\n    font-family: 'Poppins', sans-serif;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: center; /* Center content horizontally */\n    position: relative;\n    box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    border: 2px solid rgba(75, 192, 192, 0.2); /* Border color */\n    box-sizing: border-box; /* Include padding and border in element's total width and height */\n    margin: 0 auto; /* Center the card within its container */\n}\n\n.sensor-key {\n    font-size: 12px; /* Smaller font size for keys */\n    font-weight: bold;\n    color: #333; /* Dark text color for visibility on light background */\n    text-align: center;\n    width: 100%;\n}\n\n.divider {\n    width: 80%; /* Slim line width */\n    height: 1px; /* Slim line height */\n    background-color: #ccc; /* Ash-colored line */\n    margin: 5px 0 15px 0; /* Spacing around the line */\n}\n\n.sensor-value {\n    font-size: 15px; /* Font size for values */\n    font-weight: bold;\n    text-align: center; /* Center-align the text */\n    width: 100%; /* Ensure the text takes up the full width */\n}\n\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Internal Temperature</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3910,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "23ac727ef7409320",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "function 700",
        "func": "let data = msg.payload[0].data;\nlet soleValue = msg.payload[0].soleCorrectionValue;\nlet thresh1 = msg.payload[0].thresholds[0].level;\nlet thresh2 = msg.payload[0].thresholds[1].level;\n\n// Create a new array to store the subtracted values with converted timestamps\nlet extractedData = data.map(item => {\n    let subtractedValue = soleValue - item.value;\n    // If the subtracted value is negative or zero, set it to 0\n    subtractedValue = subtractedValue <= 0 ? 0 : subtractedValue;\n\n    return {\n        time: new Date(item.end).toLocaleString(), // Convert the timestamp to a readable format\n        value: subtractedValue\n    };\n});\n\n// Set the extracted data along with threshold values as the new msg.payload\nmsg.payload = {\n    data: extractedData,\n    thresholds: {\n        thresh1: thresh1,\n        thresh2: thresh2\n    }\n};\n\n// Return the message object\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3730,
        "y": 280,
        "wires": [
            [
                "21d86aac471b6817"
            ]
        ]
    },
    {
        "id": "21d86aac471b6817",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "765c07f1cdaa9cd0",
        "name": "chart-line",
        "order": 4,
        "width": "28",
        "height": "8",
        "format": "<!-- Load Chart.js library and annotation plugin -->\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation@1.0.2\"></script>\n\n<div style=\"width: 100%; height: 500px;\"> <!-- Increased height to provide more space -->\n    <canvas id=\"tempLineChart\" style=\"height: 100%;\"></canvas>\n</div>\n\n<script>\n(function(scope) {\n    // Initialize the chart\n    let ctx = document.getElementById('tempLineChart').getContext('2d');\n\n    // Placeholder for the chart instance\n    let tempChart;\n\n    // Function to create the chart\n    function createChart(data, thresh1, thresh2) {\n        // If chart already exists, destroy it before creating a new one\n        if (tempChart) {\n            tempChart.destroy();\n        }\n\n        // Convert time from ISO format to a readable format\n        let labels = data.map(item => {\n            let date = new Date(item.time);\n            return date.toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'}); // Format as \"hh:mm AM/PM\"\n        });\n\n        let values = data.map(item => item.value);\n\n        // Create the chart\n        tempChart = new Chart(ctx, {\n            type: 'line', // Changed from 'bar' to 'line'\n            data: {\n                labels: labels,\n                datasets: [{\n                    label: 'Water Level (cm)',\n                    data: values,\n                    backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    borderWidth: 2,\n                    fill: false, // To avoid filling under the line\n                    tension: 0.1 // Smoothing the curve of the line\n                }]\n            },\n            options: {\n                scales: {\n                    y: {\n                        beginAtZero: true,\n                        suggestedMax: thresh2 + 5 // Add space above threshold 2\n                    }\n                },\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        display: true\n                    },\n                    tooltip: {\n                        callbacks: {\n                            label: function(context) {\n                                let date = new Date(data[context.dataIndex].time);\n                                let formattedDate = date.toLocaleString(); // Format as \"MM/DD/YYYY, hh:mm:ss AM/PM\"\n                                return 'Value: ' + context.parsed.y + ', Time: ' + formattedDate;\n                            }\n                        }\n                    },\n                    annotation: {\n                        annotations: {\n                            thresh1Line: {\n                                type: 'line',\n                                yMin: thresh1,\n                                yMax: thresh1,\n                                borderColor: 'yellow', // Set color to yellow\n                                borderWidth: 2,\n                                label: {\n                                    content: 'Warning Stage 1',\n                                    enabled: true,\n                                    position: 'center'\n                                }\n                            },\n                            thresh2Line: {\n                                type: 'line',\n                                yMin: thresh2,\n                                yMax: thresh2,\n                                borderColor: 'red', // Set color to red\n                                borderWidth: 2,\n                                label: {\n                                    content: 'Warning Stage 2',\n                                    enabled: true,\n                                    position: 'center'\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    // Watch for new incoming messages\n    scope.$watch('msg.payload', function(payload) {\n        if (payload && payload.data && Array.isArray(payload.data)) {\n            createChart(payload.data, payload.thresholds.thresh1, payload.thresholds.thresh2);\n        }\n    });\n\n})(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3920,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "145abdb188b032fb",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "protocol",
        "func": "// Assuming msg.payload is an array with one object\nconst payload = msg.payload[0];\n\n// Extract the name from the object\nmsg.payload = payload.protocolType;\n\n// Return the updated message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3740,
        "y": 420,
        "wires": [
            [
                "aeb666ceb8b6c52e"
            ]
        ]
    },
    {
        "id": "7f36a0fa1f9af77a",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "extract",
        "func": "// Extract the result object from the incoming message payload\nmsg.payload = msg.payload.data.result;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 560,
        "wires": [
            [
                "145abdb188b032fb",
                "f0da5e52badcd44b",
                "b33c5ee3a58b4395",
                "7971e3ce6472b1f7",
                "be2dd652a493b5d5"
            ]
        ]
    },
    {
        "id": "f0da5e52badcd44b",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "name",
        "func": "// Assuming msg.payload is an array with one object\nconst payload = msg.payload[0];\n\n// Extract the name from the object\nmsg.payload = payload.name;\n\n// Return the updated message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 380,
        "wires": [
            [
                "3d8bdb7437b86c3d"
            ]
        ]
    },
    {
        "id": "18f0eb2ae6f6dca5",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "temp",
        "func": "// The input message contains the JSON object in msg.payload\nlet data = msg.payload;\n\n// Check if msg.payload is empty or undefined\nif (!data || Object.keys(data).length === 0) {\n    msg.payload = \"NoData\";\n} else {\n    // Extract the level\n    let temp = data.internal_temperature;\n\n    // Set the extracted value in msg.payload\n    msg.payload = temp;\n}\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 500,
        "wires": [
            [
                "a42b1f13cdd33c7f"
            ]
        ]
    },
    {
        "id": "380e7271b6cd39f2",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "battery",
        "func": "// The input message contains the JSON object in msg.payload\nlet data = msg.payload;\n\n// Check if msg.payload is empty or undefined\nif (!data || data.battery_voltage === undefined) {\n    msg.payload = \"NoData\";\n} else {\n    // Extract the level\n    let vol = data.battery_voltage;\n\n    // Set the extracted value in msg.payload\n    msg.payload = vol;\n}\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 460,
        "wires": [
            [
                "ef7bb6cec458ea2c"
            ]
        ]
    },
    {
        "id": "3d8bdb7437b86c3d",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "354af64960eaefb8",
        "name": "name",
        "order": 1,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9;\n        /* Light background color */\n        border-radius: 15px;\n        /* Rounded corners */\n        padding: 15px;\n        width: 300px;\n        /* Adjust the width as needed */\n        height: auto;\n        /* Allow height to adjust based on content */\n        max-height: 150px;\n        /* Set a maximum height */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center;\n        /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);\n        /* Optional: shadow effect */\n        overflow: hidden;\n        /* Hide overflow */\n    }\n\n    .sensor-key {\n        font-size: 12px;\n        /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333;\n        /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n        white-space: nowrap;\n        /* Prevent text wrapping */\n        overflow: hidden;\n        /* Hide overflow */\n        text-overflow: ellipsis;\n        /* Show ellipsis for overflow text */\n    }\n\n    .divider {\n        width: 80%;\n        /* Slim line width */\n        height: 1px;\n        /* Slim line height */\n        background-color: #ccc;\n        /* Ash-colored line */\n        margin: 5px 0 15px 0;\n        /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px;\n        /* Font size for values */\n        font-weight: bold;\n        text-align: center;\n        /* Center-align the text */\n        width: 100%;\n        /* Ensure the text takes up the full width */\n        white-space: nowrap;\n        /* Prevent text wrapping */\n        overflow: hidden;\n        /* Hide overflow */\n        text-overflow: ellipsis;\n        /* Show ellipsis for overflow text */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\" title=\"name\">Sensor Name</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\" title=\"{{msg.payload}}\">{{msg.payload}}</div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3910,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "aeb666ceb8b6c52e",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "354af64960eaefb8",
        "name": "protocol",
        "order": 2,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Protocol Type</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3920,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "ef7bb6cec458ea2c",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "354af64960eaefb8",
        "name": "battery",
        "order": 3,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Battery Voltage</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3910,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "a42b1f13cdd33c7f",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "354af64960eaefb8",
        "name": "temp",
        "order": 4,
        "width": 7,
        "height": 2,
        "format": "<style>\n.sensor-box {\n    background-color: #f9f9f9; /* Light background color */\n    border-radius: 15px; /* Rounded corners */\n    padding: 15px;\n    width: 300px; /* Adjust the width as needed */\n    height: 100px; /* Adjust the height as needed */\n    font-family: 'Poppins', sans-serif;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: center; /* Center content horizontally */\n    position: relative;\n    box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    border: 2px solid rgba(75, 192, 192, 0.2); /* Border color */\n    box-sizing: border-box; /* Include padding and border in element's total width and height */\n    margin: 0 auto; /* Center the card within its container */\n}\n\n.sensor-key {\n    font-size: 12px; /* Smaller font size for keys */\n    font-weight: bold;\n    color: #333; /* Dark text color for visibility on light background */\n    text-align: center;\n    width: 100%;\n}\n\n.divider {\n    width: 80%; /* Slim line width */\n    height: 1px; /* Slim line height */\n    background-color: #ccc; /* Ash-colored line */\n    margin: 5px 0 15px 0; /* Spacing around the line */\n}\n\n.sensor-value {\n    font-size: 15px; /* Font size for values */\n    font-weight: bold;\n    text-align: center; /* Center-align the text */\n    width: 100%; /* Ensure the text takes up the full width */\n}\n\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Internal Temperature</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3910,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "b33c5ee3a58b4395",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "function 701",
        "func": "let data = msg.payload[0].data;\nlet soleValue = msg.payload[0].soleCorrectionValue;\nlet thresh1 = msg.payload[0].thresholds[0].level;\nlet thresh2 = msg.payload[0].thresholds[1].level;\n\n// Create a new array to store the subtracted values with converted timestamps\nlet extractedData = data.map(item => {\n    let subtractedValue = soleValue - item.value;\n    // If the subtracted value is negative or zero, set it to 0\n    subtractedValue = subtractedValue <= 0 ? 0 : subtractedValue;\n\n    return {\n        time: new Date(item.end).toLocaleString(), // Convert the timestamp to a readable format\n        value: subtractedValue\n    };\n});\n\n// Set the extracted data along with threshold values as the new msg.payload\nmsg.payload = {\n    data: extractedData,\n    thresholds: {\n        thresh1: thresh1,\n        thresh2: thresh2\n    }\n};\n\n// Return the message object\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3730,
        "y": 540,
        "wires": [
            [
                "12440c96e76cb4a7"
            ]
        ]
    },
    {
        "id": "12440c96e76cb4a7",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "354af64960eaefb8",
        "name": "chart-line",
        "order": 4,
        "width": "14",
        "height": "8",
        "format": "<!-- Load Chart.js library and annotation plugin -->\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation@1.0.2\"></script>\n\n<div style=\"width: 100%; height: 500px;\"> <!-- Increased height to provide more space -->\n    <canvas id=\"tempLineChart\" style=\"height: 100%;\"></canvas>\n</div>\n\n<script>\n(function(scope) {\n    // Initialize the chart\n    let ctx = document.getElementById('tempLineChart').getContext('2d');\n\n    // Placeholder for the chart instance\n    let tempChart;\n\n    // Function to create the chart\n    function createChart(data, thresh1, thresh2) {\n        // If chart already exists, destroy it before creating a new one\n        if (tempChart) {\n            tempChart.destroy();\n        }\n\n        // Convert time from ISO format to a readable format\n        let labels = data.map(item => {\n            let date = new Date(item.time);\n            return date.toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'}); // Format as \"hh:mm AM/PM\"\n        });\n\n        let values = data.map(item => item.value);\n\n        // Create the chart\n        tempChart = new Chart(ctx, {\n            type: 'line', // Changed from 'bar' to 'line'\n            data: {\n                labels: labels,\n                datasets: [{\n                    label: 'Water Level (cm)',\n                    data: values,\n                    backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    borderWidth: 2,\n                    fill: false, // To avoid filling under the line\n                    tension: 0.1 // Smoothing the curve of the line\n                }]\n            },\n            options: {\n                scales: {\n                    y: {\n                        beginAtZero: true,\n                        suggestedMax: thresh2 + 5 // Add space above threshold 2\n                    }\n                },\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        display: true\n                    },\n                    tooltip: {\n                        callbacks: {\n                            label: function(context) {\n                                let date = new Date(data[context.dataIndex].time);\n                                let formattedDate = date.toLocaleString(); // Format as \"MM/DD/YYYY, hh:mm:ss AM/PM\"\n                                return 'Value: ' + context.parsed.y + ', Time: ' + formattedDate;\n                            }\n                        }\n                    },\n                    annotation: {\n                        annotations: {\n                            thresh1Line: {\n                                type: 'line',\n                                yMin: thresh1,\n                                yMax: thresh1,\n                                borderColor: 'yellow', // Set color to yellow\n                                borderWidth: 2,\n                                label: {\n                                    content: 'Warning Stage 1',\n                                    enabled: true,\n                                    position: 'center'\n                                }\n                            },\n                            thresh2Line: {\n                                type: 'line',\n                                yMin: thresh2,\n                                yMax: thresh2,\n                                borderColor: 'red', // Set color to red\n                                borderWidth: 2,\n                                label: {\n                                    content: 'Warning Stage 2',\n                                    enabled: true,\n                                    position: 'center'\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    // Watch for new incoming messages\n    scope.$watch('msg.payload', function(payload) {\n        if (payload && payload.data && Array.isArray(payload.data)) {\n            createChart(payload.data, payload.thresholds.thresh1, payload.thresholds.thresh2);\n        }\n    });\n\n})(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3920,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "7971e3ce6472b1f7",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "function 702",
        "func": "var sensor = \"smartriver\"\nvar id = msg.payload[0]._id\nmsg.payload = {\n    \"measurement\": sensor,\n    \"deviceId\": id\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2690,
        "y": 400,
        "wires": [
            [
                "3d51255540d3b879"
            ]
        ]
    },
    {
        "id": "3d51255540d3b879",
        "type": "http request",
        "z": "241d6dd772dc326f",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://hydroops-server-dev.vercel.app/sensors/getMetadata",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 2870,
        "y": 400,
        "wires": [
            [
                "18f0eb2ae6f6dca5",
                "380e7271b6cd39f2"
            ]
        ]
    },
    {
        "id": "ec2f8c52c5a6c0c9",
        "type": "http request",
        "z": "241d6dd772dc326f",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://137.184.228.7:5007/smartriver?ags=09274127&page=1&limit=10000&withData=true&resolution=60&searchTerm={{name}}&start={{start}}&end={{end}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1590,
        "y": 560,
        "wires": [
            [
                "7f36a0fa1f9af77a"
            ]
        ]
    },
    {
        "id": "149e471d8762f2fa",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "protocol",
        "func": "// Assuming msg.payload is an array with one object\nconst payload = msg.payload[0];\n\n// Extract the name from the object\nmsg.payload = payload.protocolType;\n\n// Return the updated message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3740,
        "y": 640,
        "wires": [
            [
                "578e1af89213218f"
            ]
        ]
    },
    {
        "id": "7407c4917b66aedd",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "extract",
        "func": "// Extract the result object from the incoming message payload\nmsg.payload = msg.payload.data.result;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 720,
        "wires": [
            [
                "149e471d8762f2fa",
                "2101be56170c8f37",
                "09ed1650baf0307e",
                "c5c4ccd1681f5747",
                "3d62df6f4917724a"
            ]
        ]
    },
    {
        "id": "2101be56170c8f37",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "name",
        "func": "// Assuming msg.payload is an array with one object\nconst payload = msg.payload[0];\n\n// Extract the name from the object\nmsg.payload = payload.name;\n\n// Return the updated message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 600,
        "wires": [
            [
                "a3425c79f7509359"
            ]
        ]
    },
    {
        "id": "a25e49428ba591fe",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "temp",
        "func": "// The input message contains the JSON object in msg.payload\nlet data = msg.payload;\n\n// Check if msg.payload is empty or undefined\nif (!data || Object.keys(data).length === 0) {\n    msg.payload = \"NoData\";\n} else {\n    // Extract the level\n    let temp = data.internal_temperature;\n\n    // Set the extracted value in msg.payload\n    msg.payload = temp;\n}\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 720,
        "wires": [
            [
                "c515f1a635aac06e"
            ]
        ]
    },
    {
        "id": "af7c2646211fe18a",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "battery",
        "func": "// The input message contains the JSON object in msg.payload\nlet data = msg.payload;\n\n// Check if msg.payload is empty or undefined\nif (!data || data.battery_voltage === undefined) {\n    msg.payload = \"NoData\";\n} else {\n    // Extract the level\n    let vol = data.battery_voltage;\n\n    // Set the extracted value in msg.payload\n    msg.payload = vol;\n}\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 680,
        "wires": [
            [
                "22b4d843deb22fa4"
            ]
        ]
    },
    {
        "id": "a3425c79f7509359",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "1d6ed5f8495a93ed",
        "name": "name",
        "order": 1,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9;\n        /* Light background color */\n        border-radius: 15px;\n        /* Rounded corners */\n        padding: 15px;\n        width: 300px;\n        /* Adjust the width as needed */\n        height: auto;\n        /* Allow height to adjust based on content */\n        max-height: 150px;\n        /* Set a maximum height */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center;\n        /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);\n        /* Optional: shadow effect */\n        overflow: hidden;\n        /* Hide overflow */\n    }\n\n    .sensor-key {\n        font-size: 12px;\n        /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333;\n        /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n        white-space: nowrap;\n        /* Prevent text wrapping */\n        overflow: hidden;\n        /* Hide overflow */\n        text-overflow: ellipsis;\n        /* Show ellipsis for overflow text */\n    }\n\n    .divider {\n        width: 80%;\n        /* Slim line width */\n        height: 1px;\n        /* Slim line height */\n        background-color: #ccc;\n        /* Ash-colored line */\n        margin: 5px 0 15px 0;\n        /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px;\n        /* Font size for values */\n        font-weight: bold;\n        text-align: center;\n        /* Center-align the text */\n        width: 100%;\n        /* Ensure the text takes up the full width */\n        white-space: nowrap;\n        /* Prevent text wrapping */\n        overflow: hidden;\n        /* Hide overflow */\n        text-overflow: ellipsis;\n        /* Show ellipsis for overflow text */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\" title=\"name\">Sensor Name</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\" title=\"{{msg.payload}}\">{{msg.payload}}</div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3910,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "578e1af89213218f",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "1d6ed5f8495a93ed",
        "name": "protocol",
        "order": 2,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Protocol Type</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3920,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "22b4d843deb22fa4",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "1d6ed5f8495a93ed",
        "name": "battery",
        "order": 3,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Battery Voltage</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3910,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "c515f1a635aac06e",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "1d6ed5f8495a93ed",
        "name": "temp",
        "order": 4,
        "width": 7,
        "height": 2,
        "format": "<style>\n.sensor-box {\n    background-color: #f9f9f9; /* Light background color */\n    border-radius: 15px; /* Rounded corners */\n    padding: 15px;\n    width: 300px; /* Adjust the width as needed */\n    height: 100px; /* Adjust the height as needed */\n    font-family: 'Poppins', sans-serif;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: center; /* Center content horizontally */\n    position: relative;\n    box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    border: 2px solid rgba(75, 192, 192, 0.2); /* Border color */\n    box-sizing: border-box; /* Include padding and border in element's total width and height */\n    margin: 0 auto; /* Center the card within its container */\n}\n\n.sensor-key {\n    font-size: 12px; /* Smaller font size for keys */\n    font-weight: bold;\n    color: #333; /* Dark text color for visibility on light background */\n    text-align: center;\n    width: 100%;\n}\n\n.divider {\n    width: 80%; /* Slim line width */\n    height: 1px; /* Slim line height */\n    background-color: #ccc; /* Ash-colored line */\n    margin: 5px 0 15px 0; /* Spacing around the line */\n}\n\n.sensor-value {\n    font-size: 15px; /* Font size for values */\n    font-weight: bold;\n    text-align: center; /* Center-align the text */\n    width: 100%; /* Ensure the text takes up the full width */\n}\n\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Internal Temperature</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3910,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "09ed1650baf0307e",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "function 703",
        "func": "let data = msg.payload[0].data;\nlet soleValue = msg.payload[0].soleCorrectionValue;\nlet thresh1 = msg.payload[0].thresholds[0].level;\nlet thresh2 = msg.payload[0].thresholds[1].level;\n\n// Create a new array to store the subtracted values with converted timestamps\nlet extractedData = data.map(item => {\n    let subtractedValue = soleValue - item.value;\n    // If the subtracted value is negative or zero, set it to 0\n    subtractedValue = subtractedValue <= 0 ? 0 : subtractedValue;\n\n    return {\n        time: new Date(item.end).toLocaleString(), // Convert the timestamp to a readable format\n        value: subtractedValue\n    };\n});\n\n// Set the extracted data along with threshold values as the new msg.payload\nmsg.payload = {\n    data: extractedData,\n    thresholds: {\n        thresh1: thresh1,\n        thresh2: thresh2\n    }\n};\n\n// Return the message object\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3730,
        "y": 760,
        "wires": [
            [
                "d151f3138b335d15"
            ]
        ]
    },
    {
        "id": "d151f3138b335d15",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "1d6ed5f8495a93ed",
        "name": "chart-line",
        "order": 4,
        "width": "14",
        "height": "8",
        "format": "<!-- Load Chart.js library and annotation plugin -->\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation@1.0.2\"></script>\n\n<div style=\"width: 100%; height: 500px;\"> <!-- Increased height to provide more space -->\n    <canvas id=\"riverLineChart3\" style=\"height: 100%;\"></canvas>\n</div>\n\n<script>\n(function(scope) {\n    // Initialize the chart\n    let ctxx3 = document.getElementById('riverLineChart3').getContext('2d');\n\n    // Placeholder for the chart instance\n    let riverChart3;\n\n    // Function to create the chart\n    function createChartRiver(data, thresh1, thresh2) {\n        // If chart already exists, destroy it before creating a new one\n        if (riverChart3) {\n            riverChart3.destroy();\n        }\n\n        // Convert time from ISO format to a readable format\n        let labels = data.map(item => {\n            let date = new Date(item.time);\n            return date.toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'}); // Format as \"hh:mm AM/PM\"\n        });\n\n        let values = data.map(item => item.value);\n\n        // Create the chart\n        riverChart3 = new Chart(ctxx3, {\n            type: 'line', // Changed from 'bar' to 'line'\n            data: {\n                labels: labels,\n                datasets: [{\n                    label: 'Water Level (cm)',\n                    data: values,\n                    backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    borderWidth: 2,\n                    fill: false, // To avoid filling under the line\n                    tension: 0.1 // Smoothing the curve of the line\n                }]\n            },\n            options: {\n                scales: {\n                    y: {\n                        beginAtZero: true,\n                        suggestedMax: thresh2 + 5 // Add space above threshold 2\n                    }\n                },\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        display: true\n                    },\n                    tooltip: {\n                        callbacks: {\n                            label: function(context) {\n                                let date = new Date(data[context.dataIndex].time);\n                                let formattedDate = date.toLocaleString(); // Format as \"MM/DD/YYYY, hh:mm:ss AM/PM\"\n                                return 'Value: ' + context.parsed.y + ', Time: ' + formattedDate;\n                            }\n                        }\n                    },\n                    annotation: {\n                        annotations: {\n                            thresh1Line: {\n                                type: 'line',\n                                yMin: thresh1,\n                                yMax: thresh1,\n                                borderColor: 'yellow', // Set color to yellow\n                                borderWidth: 2,\n                                label: {\n                                    content: 'Warning Stage 1',\n                                    enabled: true,\n                                    position: 'center'\n                                }\n                            },\n                            thresh2Line: {\n                                type: 'line',\n                                yMin: thresh2,\n                                yMax: thresh2,\n                                borderColor: 'red', // Set color to red\n                                borderWidth: 2,\n                                label: {\n                                    content: 'Warning Stage 2',\n                                    enabled: true,\n                                    position: 'center'\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    // Watch for new incoming messages\n    scope.$watch('msg.payload', function(payload) {\n        if (payload && payload.data && Array.isArray(payload.data)) {\n            createChartRiver(payload.data, payload.thresholds.thresh1, payload.thresholds.thresh2);\n        }\n    });\n\n})(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3920,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "c5c4ccd1681f5747",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "function 704",
        "func": "var sensor = \"smartriver\"\nvar id = msg.payload[0]._id\nmsg.payload = {\n    \"measurement\": sensor,\n    \"deviceId\": id\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2690,
        "y": 620,
        "wires": [
            [
                "e9f2214a08503a10"
            ]
        ]
    },
    {
        "id": "e9f2214a08503a10",
        "type": "http request",
        "z": "241d6dd772dc326f",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://hydroops-server-dev.vercel.app/sensors/getMetadata",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 2870,
        "y": 620,
        "wires": [
            [
                "a25e49428ba591fe",
                "af7c2646211fe18a"
            ]
        ]
    },
    {
        "id": "6c2baa1e044638da",
        "type": "http request",
        "z": "241d6dd772dc326f",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://137.184.228.7:5007/smartriver?ags=09274127&page=1&limit=10000&withData=true&resolution=60&searchTerm={{name}}&start={{start}}&end={{end}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1590,
        "y": 720,
        "wires": [
            [
                "7407c4917b66aedd"
            ]
        ]
    },
    {
        "id": "8dba84cc28a340f7",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "protocol",
        "func": "// Assuming msg.payload is an array with one object\nconst payload = msg.payload[0];\n\n// Extract the name from the object\nmsg.payload = payload.protocolType;\n\n// Return the updated message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3740,
        "y": 860,
        "wires": [
            [
                "f9da360b58dc267d"
            ]
        ]
    },
    {
        "id": "135971af445adc3e",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "extract",
        "func": "// Extract the result object from the incoming message payload\nmsg.payload = msg.payload.data.result;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 1000,
        "wires": [
            [
                "8dba84cc28a340f7",
                "38639e277fe8a882",
                "5b9885182a64108e",
                "836c890ce5f7d09c"
            ]
        ]
    },
    {
        "id": "38639e277fe8a882",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "name",
        "func": "// Assuming msg.payload is an array with one object\nconst payload = msg.payload[0];\n\n// Extract the name from the object\nmsg.payload = payload.name;\n\n// Return the updated message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 820,
        "wires": [
            [
                "64993821790dfb6e"
            ]
        ]
    },
    {
        "id": "be6a5c03a1e584f4",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "temp",
        "func": "// The input message contains the JSON object in msg.payload\nlet data = msg.payload;\n\n// Check if msg.payload is empty or undefined\nif (!data || Object.keys(data).length === 0) {\n    msg.payload = \"NoData\";\n} else {\n    // Extract the level\n    let temp = data.internal_temperature;\n\n    // Set the extracted value in msg.payload\n    msg.payload = temp;\n}\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 940,
        "wires": [
            [
                "488d5c0269fd8c65"
            ]
        ]
    },
    {
        "id": "effde02e8c01c40e",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "battery",
        "func": "// The input message contains the JSON object in msg.payload\nlet data = msg.payload;\n\n// Check if msg.payload is empty or undefined\nif (!data || data.battery_voltage === undefined) {\n    msg.payload = \"NoData\";\n} else {\n    // Extract the level\n    let vol = data.battery_voltage;\n\n    // Set the extracted value in msg.payload\n    msg.payload = vol;\n}\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 900,
        "wires": [
            [
                "59f74f149fa8a6f6"
            ]
        ]
    },
    {
        "id": "64993821790dfb6e",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "cb14f9b269b7b678",
        "name": "name",
        "order": 1,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9;\n        /* Light background color */\n        border-radius: 15px;\n        /* Rounded corners */\n        padding: 15px;\n        width: 300px;\n        /* Adjust the width as needed */\n        height: auto;\n        /* Allow height to adjust based on content */\n        max-height: 150px;\n        /* Set a maximum height */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center;\n        /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);\n        /* Optional: shadow effect */\n        overflow: hidden;\n        /* Hide overflow */\n    }\n\n    .sensor-key {\n        font-size: 12px;\n        /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333;\n        /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n        white-space: nowrap;\n        /* Prevent text wrapping */\n        overflow: hidden;\n        /* Hide overflow */\n        text-overflow: ellipsis;\n        /* Show ellipsis for overflow text */\n    }\n\n    .divider {\n        width: 80%;\n        /* Slim line width */\n        height: 1px;\n        /* Slim line height */\n        background-color: #ccc;\n        /* Ash-colored line */\n        margin: 5px 0 15px 0;\n        /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px;\n        /* Font size for values */\n        font-weight: bold;\n        text-align: center;\n        /* Center-align the text */\n        width: 100%;\n        /* Ensure the text takes up the full width */\n        white-space: nowrap;\n        /* Prevent text wrapping */\n        overflow: hidden;\n        /* Hide overflow */\n        text-overflow: ellipsis;\n        /* Show ellipsis for overflow text */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\" title=\"name\">Sensor Name</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\" title=\"{{msg.payload}}\">{{msg.payload}}</div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3910,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "f9da360b58dc267d",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "cb14f9b269b7b678",
        "name": "protocol",
        "order": 2,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Protocol Type</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3920,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "59f74f149fa8a6f6",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "cb14f9b269b7b678",
        "name": "battery",
        "order": 3,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Battery Voltage</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3910,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "488d5c0269fd8c65",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "cb14f9b269b7b678",
        "name": "temp",
        "order": 4,
        "width": 7,
        "height": 2,
        "format": "<style>\n.sensor-box {\n    background-color: #f9f9f9; /* Light background color */\n    border-radius: 15px; /* Rounded corners */\n    padding: 15px;\n    width: 300px; /* Adjust the width as needed */\n    height: 100px; /* Adjust the height as needed */\n    font-family: 'Poppins', sans-serif;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: center; /* Center content horizontally */\n    position: relative;\n    box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    border: 2px solid rgba(75, 192, 192, 0.2); /* Border color */\n    box-sizing: border-box; /* Include padding and border in element's total width and height */\n    margin: 0 auto; /* Center the card within its container */\n}\n\n.sensor-key {\n    font-size: 12px; /* Smaller font size for keys */\n    font-weight: bold;\n    color: #333; /* Dark text color for visibility on light background */\n    text-align: center;\n    width: 100%;\n}\n\n.divider {\n    width: 80%; /* Slim line width */\n    height: 1px; /* Slim line height */\n    background-color: #ccc; /* Ash-colored line */\n    margin: 5px 0 15px 0; /* Spacing around the line */\n}\n\n.sensor-value {\n    font-size: 15px; /* Font size for values */\n    font-weight: bold;\n    text-align: center; /* Center-align the text */\n    width: 100%; /* Ensure the text takes up the full width */\n}\n\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Internal Temperature</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3910,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "5b9885182a64108e",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "function 705",
        "func": "let data = msg.payload[0].data;\nlet soleValue = msg.payload[0].soleCorrectionValue;\nlet thresh1 = msg.payload[0].thresholds[0].level;\nlet thresh2 = msg.payload[0].thresholds[1].level;\n\n// Create a new array to store the subtracted values with converted timestamps\nlet extractedData = data.map(item => {\n    let subtractedValue = soleValue - item.value;\n    // If the subtracted value is negative or zero, set it to 0\n    subtractedValue = subtractedValue <= 0 ? 0 : subtractedValue;\n\n    return {\n        time: new Date(item.end).toLocaleString(), // Convert the timestamp to a readable format\n        value: subtractedValue\n    };\n});\n\n// Set the extracted data along with threshold values as the new msg.payload\nmsg.payload = {\n    data: extractedData,\n    thresholds: {\n        thresh1: thresh1,\n        thresh2: thresh2\n    }\n};\n\n// Return the message object\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3730,
        "y": 980,
        "wires": [
            [
                "77214696f650419b"
            ]
        ]
    },
    {
        "id": "77214696f650419b",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "cb14f9b269b7b678",
        "name": "chart-line",
        "order": 4,
        "width": "28",
        "height": "8",
        "format": "<!-- Load Chart.js library and annotation plugin -->\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation@1.0.2\"></script>\n\n<div style=\"width: 100%; height: 500px;\"> <!-- Increased height to provide more space -->\n    <canvas id=\"riverLineChart4\" style=\"height: 100%;\"></canvas>\n</div>\n\n<script>\n(function(scope) {\n    // Initialize the chart\n    let ctx4 = document.getElementById('riverLineChart4').getContext('2d');\n\n    // Placeholder for the chart instance\n    let riverChart4;\n\n    // Function to create the chart\n    function createChart(data, thresh1, thresh2) {\n        // If chart already exists, destroy it before creating a new one\n        if (riverChart4) {\n            riverChart4.destroy();\n        }\n\n        // Convert time from ISO format to a readable format\n        let labels = data.map(item => {\n            let date = new Date(item.time);\n            return date.toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'}); // Format as \"hh:mm AM/PM\"\n        });\n\n        let values = data.map(item => item.value);\n\n        // Create the chart\n        riverChart4 = new Chart(ctx4, {\n            type: 'line', // Changed from 'bar' to 'line'\n            data: {\n                labels: labels,\n                datasets: [{\n                    label: 'Water Level (cm)',\n                    data: values,\n                    backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    borderWidth: 2,\n                    fill: false, // To avoid filling under the line\n                    tension: 0.1 // Smoothing the curve of the line\n                }]\n            },\n            options: {\n                scales: {\n                    y: {\n                        beginAtZero: true,\n                        suggestedMax: thresh2 + 5 // Add space above threshold 2\n                    }\n                },\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        display: true\n                    },\n                    tooltip: {\n                        callbacks: {\n                            label: function(context) {\n                                let date = new Date(data[context.dataIndex].time);\n                                let formattedDate = date.toLocaleString(); // Format as \"MM/DD/YYYY, hh:mm:ss AM/PM\"\n                                return 'Value: ' + context.parsed.y + ', Time: ' + formattedDate;\n                            }\n                        }\n                    },\n                    annotation: {\n                        annotations: {\n                            thresh1Line: {\n                                type: 'line',\n                                yMin: thresh1,\n                                yMax: thresh1,\n                                borderColor: 'yellow', // Set color to yellow\n                                borderWidth: 2,\n                                label: {\n                                    content: 'Warning Stage 1',\n                                    enabled: true,\n                                    position: 'center'\n                                }\n                            },\n                            thresh2Line: {\n                                type: 'line',\n                                yMin: thresh2,\n                                yMax: thresh2,\n                                borderColor: 'red', // Set color to red\n                                borderWidth: 2,\n                                label: {\n                                    content: 'Warning Stage 2',\n                                    enabled: true,\n                                    position: 'center'\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    // Watch for new incoming messages\n    scope.$watch('msg.payload', function(payload) {\n        if (payload && payload.data && Array.isArray(payload.data)) {\n            createChart(payload.data, payload.thresholds.thresh1, payload.thresholds.thresh2);\n        }\n    });\n\n})(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3920,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "836c890ce5f7d09c",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "function 706",
        "func": "var sensor = \"smartriver\"\nvar id = msg.payload[0]._id\nmsg.payload = {\n    \"measurement\": sensor,\n    \"deviceId\": id\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2690,
        "y": 840,
        "wires": [
            [
                "a550619c6e9eacd3"
            ]
        ]
    },
    {
        "id": "a550619c6e9eacd3",
        "type": "http request",
        "z": "241d6dd772dc326f",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://hydroops-server-dev.vercel.app/sensors/getMetadata",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 2870,
        "y": 840,
        "wires": [
            [
                "be6a5c03a1e584f4",
                "effde02e8c01c40e"
            ]
        ]
    },
    {
        "id": "1dce905adabd07b3",
        "type": "http request",
        "z": "241d6dd772dc326f",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://137.184.228.7:5007/smartriver?ags=09274127&page=1&limit=10000&withData=true&resolution=60&searchTerm={{name}}&start={{start}}&end={{end}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1590,
        "y": 1000,
        "wires": [
            [
                "135971af445adc3e"
            ]
        ]
    },
    {
        "id": "e524728b2c835f3b",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "protocol",
        "func": "// Assuming msg.payload is an array with one object\nconst payload = msg.payload[0];\n\n// Extract the name from the object\nmsg.payload = payload.protocolType;\n\n// Return the updated message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3740,
        "y": 1080,
        "wires": [
            [
                "6847cdeec2062d41"
            ]
        ]
    },
    {
        "id": "9c86cc0afffa82e2",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "extract",
        "func": "// Extract the result object from the incoming message payload\nmsg.payload = msg.payload.data.result;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 1160,
        "wires": [
            [
                "e524728b2c835f3b",
                "53adb44f5e4eef76",
                "ecca68301ac7c815",
                "6a5ff26dd14f76f4"
            ]
        ]
    },
    {
        "id": "53adb44f5e4eef76",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "name",
        "func": "// Assuming msg.payload is an array with one object\nconst payload = msg.payload[0];\n\n// Extract the name from the object\nmsg.payload = payload.name;\n\n// Return the updated message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 1040,
        "wires": [
            [
                "f14d4f5633a3ea43"
            ]
        ]
    },
    {
        "id": "3d887f7b7e2927b6",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "temp",
        "func": "// The input message contains the JSON object in msg.payload\nlet data = msg.payload;\n\n// Check if msg.payload is empty or undefined\nif (!data || Object.keys(data).length === 0) {\n    msg.payload = \"NoData\";\n} else {\n    // Extract the level\n    let temp = data.internal_temperature;\n\n    // Set the extracted value in msg.payload\n    msg.payload = temp;\n}\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 1160,
        "wires": [
            [
                "a6b8b6e331b433c6"
            ]
        ]
    },
    {
        "id": "e024b24558d63e0d",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "battery",
        "func": "// The input message contains the JSON object in msg.payload\nlet data = msg.payload;\n\n// Check if msg.payload is empty or undefined\nif (!data || data.battery_voltage === undefined) {\n    msg.payload = \"NoData\";\n} else {\n    // Extract the level\n    let vol = data.battery_voltage;\n\n    // Set the extracted value in msg.payload\n    msg.payload = vol;\n}\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 1120,
        "wires": [
            [
                "f9c87e75c17e42f9"
            ]
        ]
    },
    {
        "id": "f14d4f5633a3ea43",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "48a7fed7fc7aea55",
        "name": "name",
        "order": 1,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9;\n        /* Light background color */\n        border-radius: 15px;\n        /* Rounded corners */\n        padding: 15px;\n        width: 300px;\n        /* Adjust the width as needed */\n        height: auto;\n        /* Allow height to adjust based on content */\n        max-height: 150px;\n        /* Set a maximum height */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center;\n        /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);\n        /* Optional: shadow effect */\n        overflow: hidden;\n        /* Hide overflow */\n    }\n\n    .sensor-key {\n        font-size: 12px;\n        /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333;\n        /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n        white-space: nowrap;\n        /* Prevent text wrapping */\n        overflow: hidden;\n        /* Hide overflow */\n        text-overflow: ellipsis;\n        /* Show ellipsis for overflow text */\n    }\n\n    .divider {\n        width: 80%;\n        /* Slim line width */\n        height: 1px;\n        /* Slim line height */\n        background-color: #ccc;\n        /* Ash-colored line */\n        margin: 5px 0 15px 0;\n        /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px;\n        /* Font size for values */\n        font-weight: bold;\n        text-align: center;\n        /* Center-align the text */\n        width: 100%;\n        /* Ensure the text takes up the full width */\n        white-space: nowrap;\n        /* Prevent text wrapping */\n        overflow: hidden;\n        /* Hide overflow */\n        text-overflow: ellipsis;\n        /* Show ellipsis for overflow text */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\" title=\"name\">Sensor Name</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\" title=\"{{msg.payload}}\">{{msg.payload}}</div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3910,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "6847cdeec2062d41",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "48a7fed7fc7aea55",
        "name": "protocol",
        "order": 2,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Protocol Type</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3920,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "f9c87e75c17e42f9",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "48a7fed7fc7aea55",
        "name": "battery",
        "order": 3,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Battery Voltage</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3910,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "a6b8b6e331b433c6",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "48a7fed7fc7aea55",
        "name": "temp",
        "order": 4,
        "width": 7,
        "height": 2,
        "format": "<style>\n.sensor-box {\n    background-color: #f9f9f9; /* Light background color */\n    border-radius: 15px; /* Rounded corners */\n    padding: 15px;\n    width: 300px; /* Adjust the width as needed */\n    height: 100px; /* Adjust the height as needed */\n    font-family: 'Poppins', sans-serif;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: center; /* Center content horizontally */\n    position: relative;\n    box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    border: 2px solid rgba(75, 192, 192, 0.2); /* Border color */\n    box-sizing: border-box; /* Include padding and border in element's total width and height */\n    margin: 0 auto; /* Center the card within its container */\n}\n\n.sensor-key {\n    font-size: 12px; /* Smaller font size for keys */\n    font-weight: bold;\n    color: #333; /* Dark text color for visibility on light background */\n    text-align: center;\n    width: 100%;\n}\n\n.divider {\n    width: 80%; /* Slim line width */\n    height: 1px; /* Slim line height */\n    background-color: #ccc; /* Ash-colored line */\n    margin: 5px 0 15px 0; /* Spacing around the line */\n}\n\n.sensor-value {\n    font-size: 15px; /* Font size for values */\n    font-weight: bold;\n    text-align: center; /* Center-align the text */\n    width: 100%; /* Ensure the text takes up the full width */\n}\n\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Internal Temperature</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3910,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "ecca68301ac7c815",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "function 707",
        "func": "let data = msg.payload[0].data;\nlet soleValue = msg.payload[0].soleCorrectionValue;\nlet thresh1 = msg.payload[0].thresholds[0].level;\nlet thresh2 = msg.payload[0].thresholds[1].level;\n\n// Create a new array to store the subtracted values with converted timestamps\nlet extractedData = data.map(item => {\n    let subtractedValue = soleValue - item.value;\n    // If the subtracted value is negative or zero, set it to 0\n    subtractedValue = subtractedValue <= 0 ? 0 : subtractedValue;\n\n    return {\n        time: new Date(item.end).toLocaleString(), // Convert the timestamp to a readable format\n        value: subtractedValue\n    };\n});\n\n// Set the extracted data along with threshold values as the new msg.payload\nmsg.payload = {\n    data: extractedData,\n    thresholds: {\n        thresh1: thresh1,\n        thresh2: thresh2\n    }\n};\n\n// Return the message object\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3730,
        "y": 1200,
        "wires": [
            [
                "48909a94accf4a3b"
            ]
        ]
    },
    {
        "id": "48909a94accf4a3b",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "48a7fed7fc7aea55",
        "name": "chart-line",
        "order": 4,
        "width": "14",
        "height": "8",
        "format": "<!-- Load Chart.js library and annotation plugin -->\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation@1.0.2\"></script>\n\n<div style=\"width: 100%; height: 500px;\"> <!-- Increased height to provide more space -->\n    <canvas id=\"riverLineChart5\" style=\"height: 100%;\"></canvas>\n</div>\n\n<script>\n(function(scope) {\n    // Initialize the chart\n    let ctx5 = document.getElementById('riverLineChart5').getContext('2d');\n\n    // Placeholder for the chart instance\n    let riverChart5;\n\n    // Function to create the chart\n    function createChartRiver(data, thresh1, thresh2) {\n        // If chart already exists, destroy it before creating a new one\n        if (riverChart5) {\n            riverChart5.destroy();\n        }\n\n        // Convert time from ISO format to a readable format\n        let labels = data.map(item => {\n            let date = new Date(item.time);\n            return date.toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'}); // Format as \"hh:mm AM/PM\"\n        });\n\n        let values = data.map(item => item.value);\n\n        // Create the chart\n        riverChart5 = new Chart(ctx5, {\n            type: 'line', // Changed from 'bar' to 'line'\n            data: {\n                labels: labels,\n                datasets: [{\n                    label: 'Water Level (cm)',\n                    data: values,\n                    backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    borderWidth: 2,\n                    fill: false, // To avoid filling under the line\n                    tension: 0.1 // Smoothing the curve of the line\n                }]\n            },\n            options: {\n                scales: {\n                    y: {\n                        beginAtZero: true,\n                        suggestedMax: thresh2 + 5 // Add space above threshold 2\n                    }\n                },\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        display: true\n                    },\n                    tooltip: {\n                        callbacks: {\n                            label: function(context) {\n                                let date = new Date(data[context.dataIndex].time);\n                                let formattedDate = date.toLocaleString(); // Format as \"MM/DD/YYYY, hh:mm:ss AM/PM\"\n                                return 'Value: ' + context.parsed.y + ', Time: ' + formattedDate;\n                            }\n                        }\n                    },\n                    annotation: {\n                        annotations: {\n                            thresh1Line: {\n                                type: 'line',\n                                yMin: thresh1,\n                                yMax: thresh1,\n                                borderColor: 'yellow', // Set color to yellow\n                                borderWidth: 2,\n                                label: {\n                                    content: 'Warning Stage 1',\n                                    enabled: true,\n                                    position: 'center'\n                                }\n                            },\n                            thresh2Line: {\n                                type: 'line',\n                                yMin: thresh2,\n                                yMax: thresh2,\n                                borderColor: 'red', // Set color to red\n                                borderWidth: 2,\n                                label: {\n                                    content: 'Warning Stage 2',\n                                    enabled: true,\n                                    position: 'center'\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    // Watch for new incoming messages\n    scope.$watch('msg.payload', function(payload) {\n        if (payload && payload.data && Array.isArray(payload.data)) {\n            createChartRiver(payload.data, payload.thresholds.thresh1, payload.thresholds.thresh2);\n        }\n    });\n\n})(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3920,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "6a5ff26dd14f76f4",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "function 708",
        "func": "var sensor = \"smartriver\"\nvar id = msg.payload[0]._id\nmsg.payload = {\n    \"measurement\": sensor,\n    \"deviceId\": id\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2690,
        "y": 1060,
        "wires": [
            [
                "f39e92c43b8847e5"
            ]
        ]
    },
    {
        "id": "f39e92c43b8847e5",
        "type": "http request",
        "z": "241d6dd772dc326f",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://hydroops-server-dev.vercel.app/sensors/getMetadata",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 2870,
        "y": 1060,
        "wires": [
            [
                "3d887f7b7e2927b6",
                "e024b24558d63e0d"
            ]
        ]
    },
    {
        "id": "b5b26b8abef6c3aa",
        "type": "http request",
        "z": "241d6dd772dc326f",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://137.184.228.7:5007/smartriver?ags=09274127&page=1&limit=10000&withData=true&resolution=60&searchTerm={{name}}&start={{start}}&end={{end}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1590,
        "y": 1160,
        "wires": [
            [
                "9c86cc0afffa82e2"
            ]
        ]
    },
    {
        "id": "e8ab69f0f9f37b3d",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "protocol",
        "func": "// Assuming msg.payload is an array with one object\nconst payload = msg.payload[0];\n\n// Extract the name from the object\nmsg.payload = payload.protocolType;\n\n// Return the updated message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3740,
        "y": 1300,
        "wires": [
            [
                "dfde10745683bd16"
            ]
        ]
    },
    {
        "id": "9f57bdeed032b0f6",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "extract",
        "func": "// Extract the result object from the incoming message payload\nmsg.payload = msg.payload.data.result;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 1380,
        "wires": [
            [
                "e8ab69f0f9f37b3d",
                "8b9eca7e8516df96",
                "53108102060dd184",
                "b0d01e4fbffbbb3a"
            ]
        ]
    },
    {
        "id": "8b9eca7e8516df96",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "name",
        "func": "// Assuming msg.payload is an array with one object\nconst payload = msg.payload[0];\n\n// Extract the name from the object\nmsg.payload = payload.name;\n\n// Return the updated message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 1260,
        "wires": [
            [
                "3af252433a383ec0"
            ]
        ]
    },
    {
        "id": "ce83db4d2dc40ea1",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "temp",
        "func": "// The input message contains the JSON object in msg.payload\nlet data = msg.payload;\n\n// Check if msg.payload is empty or undefined\nif (!data || Object.keys(data).length === 0) {\n    msg.payload = \"NoData\";\n} else {\n    // Extract the level\n    let temp = data.internal_temperature;\n\n    // Set the extracted value in msg.payload\n    msg.payload = temp;\n}\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 1380,
        "wires": [
            [
                "0a5cab3704bde27c"
            ]
        ]
    },
    {
        "id": "0ca46bb7f42d0496",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "battery",
        "func": "// The input message contains the JSON object in msg.payload\nlet data = msg.payload;\n\n// Check if msg.payload is empty or undefined\nif (!data || data.battery_voltage === undefined) {\n    msg.payload = \"NoData\";\n} else {\n    // Extract the level\n    let vol = data.battery_voltage;\n\n    // Set the extracted value in msg.payload\n    msg.payload = vol;\n}\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 1340,
        "wires": [
            [
                "2fe0aaeacd4b155a"
            ]
        ]
    },
    {
        "id": "3af252433a383ec0",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "16c0e5833a9d84b6",
        "name": "name",
        "order": 1,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9;\n        /* Light background color */\n        border-radius: 15px;\n        /* Rounded corners */\n        padding: 15px;\n        width: 300px;\n        /* Adjust the width as needed */\n        height: auto;\n        /* Allow height to adjust based on content */\n        max-height: 150px;\n        /* Set a maximum height */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center;\n        /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);\n        /* Optional: shadow effect */\n        overflow: hidden;\n        /* Hide overflow */\n    }\n\n    .sensor-key {\n        font-size: 12px;\n        /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333;\n        /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n        white-space: nowrap;\n        /* Prevent text wrapping */\n        overflow: hidden;\n        /* Hide overflow */\n        text-overflow: ellipsis;\n        /* Show ellipsis for overflow text */\n    }\n\n    .divider {\n        width: 80%;\n        /* Slim line width */\n        height: 1px;\n        /* Slim line height */\n        background-color: #ccc;\n        /* Ash-colored line */\n        margin: 5px 0 15px 0;\n        /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px;\n        /* Font size for values */\n        font-weight: bold;\n        text-align: center;\n        /* Center-align the text */\n        width: 100%;\n        /* Ensure the text takes up the full width */\n        white-space: nowrap;\n        /* Prevent text wrapping */\n        overflow: hidden;\n        /* Hide overflow */\n        text-overflow: ellipsis;\n        /* Show ellipsis for overflow text */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\" title=\"name\">Sensor Name</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\" title=\"{{msg.payload}}\">{{msg.payload}}</div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3910,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "dfde10745683bd16",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "16c0e5833a9d84b6",
        "name": "protocol",
        "order": 2,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Protocol Type</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3920,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "2fe0aaeacd4b155a",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "16c0e5833a9d84b6",
        "name": "battery",
        "order": 3,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Battery Voltage</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3910,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "0a5cab3704bde27c",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "16c0e5833a9d84b6",
        "name": "temp",
        "order": 4,
        "width": 7,
        "height": 2,
        "format": "<style>\n.sensor-box {\n    background-color: #f9f9f9; /* Light background color */\n    border-radius: 15px; /* Rounded corners */\n    padding: 15px;\n    width: 300px; /* Adjust the width as needed */\n    height: 100px; /* Adjust the height as needed */\n    font-family: 'Poppins', sans-serif;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: center; /* Center content horizontally */\n    position: relative;\n    box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    border: 2px solid rgba(75, 192, 192, 0.2); /* Border color */\n    box-sizing: border-box; /* Include padding and border in element's total width and height */\n    margin: 0 auto; /* Center the card within its container */\n}\n\n.sensor-key {\n    font-size: 12px; /* Smaller font size for keys */\n    font-weight: bold;\n    color: #333; /* Dark text color for visibility on light background */\n    text-align: center;\n    width: 100%;\n}\n\n.divider {\n    width: 80%; /* Slim line width */\n    height: 1px; /* Slim line height */\n    background-color: #ccc; /* Ash-colored line */\n    margin: 5px 0 15px 0; /* Spacing around the line */\n}\n\n.sensor-value {\n    font-size: 15px; /* Font size for values */\n    font-weight: bold;\n    text-align: center; /* Center-align the text */\n    width: 100%; /* Ensure the text takes up the full width */\n}\n\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Internal Temperature</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3910,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "53108102060dd184",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "function 709",
        "func": "let data = msg.payload[0].data;\nlet soleValue = msg.payload[0].soleCorrectionValue;\nlet thresh1 = msg.payload[0].thresholds[0].level;\nlet thresh2 = msg.payload[0].thresholds[1].level;\n\n// Create a new array to store the subtracted values with converted timestamps\nlet extractedData = data.map(item => {\n    let subtractedValue = soleValue - item.value;\n    // If the subtracted value is negative or zero, set it to 0\n    subtractedValue = subtractedValue <= 0 ? 0 : subtractedValue;\n\n    return {\n        time: new Date(item.end).toLocaleString(), // Convert the timestamp to a readable format\n        value: subtractedValue\n    };\n});\n\n// Set the extracted data along with threshold values as the new msg.payload\nmsg.payload = {\n    data: extractedData,\n    thresholds: {\n        thresh1: thresh1,\n        thresh2: thresh2\n    }\n};\n\n// Return the message object\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3730,
        "y": 1420,
        "wires": [
            [
                "c93a5510d1bbbf82"
            ]
        ]
    },
    {
        "id": "c93a5510d1bbbf82",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "16c0e5833a9d84b6",
        "name": "chart-line",
        "order": 4,
        "width": "14",
        "height": "8",
        "format": "<!-- Load Chart.js library and annotation plugin -->\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation@1.0.2\"></script>\n\n<div style=\"width: 100%; height: 500px;\"> <!-- Increased height to provide more space -->\n    <canvas id=\"riverLineChart6\" style=\"height: 100%;\"></canvas>\n</div>\n\n<script>\n(function(scope) {\n    // Initialize the chart\n    let ctx6 = document.getElementById('riverLineChart6').getContext('2d');\n\n    // Placeholder for the chart instance\n    let riverChart6;\n\n    // Function to create the chart\n    function createChartRiver(data, thresh1, thresh2) {\n        // If chart already exists, destroy it before creating a new one\n        if (riverChart6) {\n            riverChart6.destroy();\n        }\n\n        // Convert time from ISO format to a readable format\n        let labels = data.map(item => {\n            let date = new Date(item.time);\n            return date.toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'}); // Format as \"hh:mm AM/PM\"\n        });\n\n        let values = data.map(item => item.value);\n\n        // Create the chart\n        riverChart6 = new Chart(ctx6, {\n            type: 'line', // Changed from 'bar' to 'line'\n            data: {\n                labels: labels,\n                datasets: [{\n                    label: 'Water Level (cm)',\n                    data: values,\n                    backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    borderWidth: 2,\n                    fill: false, // To avoid filling under the line\n                    tension: 0.1 // Smoothing the curve of the line\n                }]\n            },\n            options: {\n                scales: {\n                    y: {\n                        beginAtZero: true,\n                        suggestedMax: thresh2 + 5 // Add space above threshold 2\n                    }\n                },\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        display: true\n                    },\n                    tooltip: {\n                        callbacks: {\n                            label: function(context) {\n                                let date = new Date(data[context.dataIndex].time);\n                                let formattedDate = date.toLocaleString(); // Format as \"MM/DD/YYYY, hh:mm:ss AM/PM\"\n                                return 'Value: ' + context.parsed.y + ', Time: ' + formattedDate;\n                            }\n                        }\n                    },\n                    annotation: {\n                        annotations: {\n                            thresh1Line: {\n                                type: 'line',\n                                yMin: thresh1,\n                                yMax: thresh1,\n                                borderColor: 'yellow', // Set color to yellow\n                                borderWidth: 2,\n                                label: {\n                                    content: 'Warning Stage 1',\n                                    enabled: true,\n                                    position: 'center'\n                                }\n                            },\n                            thresh2Line: {\n                                type: 'line',\n                                yMin: thresh2,\n                                yMax: thresh2,\n                                borderColor: 'red', // Set color to red\n                                borderWidth: 2,\n                                label: {\n                                    content: 'Warning Stage 2',\n                                    enabled: true,\n                                    position: 'center'\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    // Watch for new incoming messages\n    scope.$watch('msg.payload', function(payload) {\n        if (payload && payload.data && Array.isArray(payload.data)) {\n            createChartRiver(payload.data, payload.thresholds.thresh1, payload.thresholds.thresh2);\n        }\n    });\n\n})(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3920,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "b0d01e4fbffbbb3a",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "function 710",
        "func": "var sensor = \"smartriver\"\nvar id = msg.payload[0]._id\nmsg.payload = {\n    \"measurement\": sensor,\n    \"deviceId\": id\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2690,
        "y": 1280,
        "wires": [
            [
                "7af731e45e424492"
            ]
        ]
    },
    {
        "id": "7af731e45e424492",
        "type": "http request",
        "z": "241d6dd772dc326f",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://hydroops-server-dev.vercel.app/sensors/getMetadata",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 2870,
        "y": 1280,
        "wires": [
            [
                "ce83db4d2dc40ea1",
                "0ca46bb7f42d0496"
            ]
        ]
    },
    {
        "id": "9388e8b99535fec2",
        "type": "http request",
        "z": "241d6dd772dc326f",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://137.184.228.7:5007/smartriver?ags=09274127&page=1&limit=10000&withData=true&resolution=60&searchTerm={{name}}&start={{start}}&end={{end}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1590,
        "y": 1380,
        "wires": [
            [
                "9f57bdeed032b0f6"
            ]
        ]
    },
    {
        "id": "a2e81e7837a9f465",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "protocol",
        "func": "// Assuming msg.payload is an array with one object\nconst payload = msg.payload[0];\n\n// Extract the name from the object\nmsg.payload = payload.protocolType;\n\n// Return the updated message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3720,
        "y": 1560,
        "wires": [
            [
                "2ef2fa157df9f6f7"
            ]
        ]
    },
    {
        "id": "a58935af02ca8149",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "extract",
        "func": "// Extract the result object from the incoming message payload\nmsg.payload = msg.payload.data.result;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 1640,
        "wires": [
            [
                "a2e81e7837a9f465",
                "c77e22dbb81cc511",
                "f6f8f423f26f2309",
                "91189e34b9d5e539"
            ]
        ]
    },
    {
        "id": "c77e22dbb81cc511",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "name",
        "func": "// Assuming msg.payload is an array with one object\nconst payload = msg.payload[0];\n\n// Extract the name from the object\nmsg.payload = payload.name;\n\n// Return the updated message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3730,
        "y": 1520,
        "wires": [
            [
                "44d88d25932a80e0"
            ]
        ]
    },
    {
        "id": "3a6b391673a4a83a",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "temp",
        "func": "// The input message contains the JSON object in msg.payload\nlet data = msg.payload;\n\n// Check if msg.payload is empty or undefined\nif (!data || Object.keys(data).length === 0) {\n    msg.payload = \"NoData\";\n} else {\n    // Extract the level\n    let temp = data.internal_temperature;\n\n    // Set the extracted value in msg.payload\n    msg.payload = temp;\n}\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3730,
        "y": 1640,
        "wires": [
            [
                "acd7c73cef911cde"
            ]
        ]
    },
    {
        "id": "c9c323d3665c152d",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "battery",
        "func": "// The input message contains the JSON object in msg.payload\nlet data = msg.payload;\n\n// Check if msg.payload is empty or undefined\nif (!data || data.battery_voltage === undefined) {\n    msg.payload = \"NoData\";\n} else {\n    // Extract the level\n    let vol = data.battery_voltage;\n\n    // Set the extracted value in msg.payload\n    msg.payload = vol;\n}\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3730,
        "y": 1600,
        "wires": [
            [
                "c10928237e3f2497"
            ]
        ]
    },
    {
        "id": "44d88d25932a80e0",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "9bf0d3ee6d4a7310",
        "name": "name",
        "order": 1,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9;\n        /* Light background color */\n        border-radius: 15px;\n        /* Rounded corners */\n        padding: 15px;\n        width: 300px;\n        /* Adjust the width as needed */\n        height: auto;\n        /* Allow height to adjust based on content */\n        max-height: 150px;\n        /* Set a maximum height */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center;\n        /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);\n        /* Optional: shadow effect */\n        overflow: hidden;\n        /* Hide overflow */\n    }\n\n    .sensor-key {\n        font-size: 12px;\n        /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333;\n        /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n        white-space: nowrap;\n        /* Prevent text wrapping */\n        overflow: hidden;\n        /* Hide overflow */\n        text-overflow: ellipsis;\n        /* Show ellipsis for overflow text */\n    }\n\n    .divider {\n        width: 80%;\n        /* Slim line width */\n        height: 1px;\n        /* Slim line height */\n        background-color: #ccc;\n        /* Ash-colored line */\n        margin: 5px 0 15px 0;\n        /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px;\n        /* Font size for values */\n        font-weight: bold;\n        text-align: center;\n        /* Center-align the text */\n        width: 100%;\n        /* Ensure the text takes up the full width */\n        white-space: nowrap;\n        /* Prevent text wrapping */\n        overflow: hidden;\n        /* Hide overflow */\n        text-overflow: ellipsis;\n        /* Show ellipsis for overflow text */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\" title=\"name\">Sensor Name</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\" title=\"{{msg.payload}}\">{{msg.payload}}</div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3890,
        "y": 1520,
        "wires": [
            []
        ]
    },
    {
        "id": "2ef2fa157df9f6f7",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "9bf0d3ee6d4a7310",
        "name": "protocol",
        "order": 2,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Protocol Type</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3900,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "c10928237e3f2497",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "9bf0d3ee6d4a7310",
        "name": "battery",
        "order": 3,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Battery Voltage</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3890,
        "y": 1600,
        "wires": [
            []
        ]
    },
    {
        "id": "acd7c73cef911cde",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "9bf0d3ee6d4a7310",
        "name": "temp",
        "order": 4,
        "width": 7,
        "height": 2,
        "format": "<style>\n.sensor-box {\n    background-color: #f9f9f9; /* Light background color */\n    border-radius: 15px; /* Rounded corners */\n    padding: 15px;\n    width: 300px; /* Adjust the width as needed */\n    height: 100px; /* Adjust the height as needed */\n    font-family: 'Poppins', sans-serif;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: center; /* Center content horizontally */\n    position: relative;\n    box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    border: 2px solid rgba(75, 192, 192, 0.2); /* Border color */\n    box-sizing: border-box; /* Include padding and border in element's total width and height */\n    margin: 0 auto; /* Center the card within its container */\n}\n\n.sensor-key {\n    font-size: 12px; /* Smaller font size for keys */\n    font-weight: bold;\n    color: #333; /* Dark text color for visibility on light background */\n    text-align: center;\n    width: 100%;\n}\n\n.divider {\n    width: 80%; /* Slim line width */\n    height: 1px; /* Slim line height */\n    background-color: #ccc; /* Ash-colored line */\n    margin: 5px 0 15px 0; /* Spacing around the line */\n}\n\n.sensor-value {\n    font-size: 15px; /* Font size for values */\n    font-weight: bold;\n    text-align: center; /* Center-align the text */\n    width: 100%; /* Ensure the text takes up the full width */\n}\n\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Internal Temperature</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3890,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "f6f8f423f26f2309",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "function 711",
        "func": "let data = msg.payload[0].data;\nlet soleValue = msg.payload[0].soleCorrectionValue;\nlet thresh1 = msg.payload[0].thresholds[0].level;\nlet thresh2 = msg.payload[0].thresholds[1].level;\n\n// Create a new array to store the subtracted values with converted timestamps\nlet extractedData = data.map(item => {\n    let subtractedValue = soleValue - item.value;\n    // If the subtracted value is negative or zero, set it to 0\n    subtractedValue = subtractedValue <= 0 ? 0 : subtractedValue;\n\n    return {\n        time: new Date(item.end).toLocaleString(), // Convert the timestamp to a readable format\n        value: subtractedValue\n    };\n});\n\n// Set the extracted data along with threshold values as the new msg.payload\nmsg.payload = {\n    data: extractedData,\n    thresholds: {\n        thresh1: thresh1,\n        thresh2: thresh2\n    }\n};\n\n// Return the message object\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3710,
        "y": 1680,
        "wires": [
            [
                "b416bd67aa0e2a2a"
            ]
        ]
    },
    {
        "id": "b416bd67aa0e2a2a",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "9bf0d3ee6d4a7310",
        "name": "chart-line",
        "order": 4,
        "width": "14",
        "height": "8",
        "format": "<!-- Load Chart.js library and annotation plugin -->\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation@1.0.2\"></script>\n\n<div style=\"width: 100%; height: 500px;\"> <!-- Increased height to provide more space -->\n    <canvas id=\"riverLineChart7\" style=\"height: 100%;\"></canvas>\n</div>\n\n<script>\n(function(scope) {\n    // Initialize the chart\n    let ctx7 = document.getElementById('riverLineChart7').getContext('2d');\n\n    // Placeholder for the chart instance\n    let riverChart7;\n\n    // Function to create the chart\n    function createChartRiver(data, thresh1, thresh2) {\n        // If chart already exists, destroy it before creating a new one\n        if (riverChart7) {\n            riverChart7.destroy();\n        }\n\n        // Convert time from ISO format to a readable format\n        let labels = data.map(item => {\n            let date = new Date(item.time);\n            return date.toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'}); // Format as \"hh:mm AM/PM\"\n        });\n\n        let values = data.map(item => item.value);\n\n        // Create the chart\n        riverChart7 = new Chart(ctx7, {\n            type: 'line', // Changed from 'bar' to 'line'\n            data: {\n                labels: labels,\n                datasets: [{\n                    label: 'Water Level (cm)',\n                    data: values,\n                    backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    borderWidth: 2,\n                    fill: false, // To avoid filling under the line\n                    tension: 0.1 // Smoothing the curve of the line\n                }]\n            },\n            options: {\n                scales: {\n                    y: {\n                        beginAtZero: true,\n                        suggestedMax: thresh2 + 5 // Add space above threshold 2\n                    }\n                },\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        display: true\n                    },\n                    tooltip: {\n                        callbacks: {\n                            label: function(context) {\n                                let date = new Date(data[context.dataIndex].time);\n                                let formattedDate = date.toLocaleString(); // Format as \"MM/DD/YYYY, hh:mm:ss AM/PM\"\n                                return 'Value: ' + context.parsed.y + ', Time: ' + formattedDate;\n                            }\n                        }\n                    },\n                    annotation: {\n                        annotations: {\n                            thresh1Line: {\n                                type: 'line',\n                                yMin: thresh1,\n                                yMax: thresh1,\n                                borderColor: 'yellow', // Set color to yellow\n                                borderWidth: 2,\n                                label: {\n                                    content: 'Warning Stage 1',\n                                    enabled: true,\n                                    position: 'center'\n                                }\n                            },\n                            thresh2Line: {\n                                type: 'line',\n                                yMin: thresh2,\n                                yMax: thresh2,\n                                borderColor: 'red', // Set color to red\n                                borderWidth: 2,\n                                label: {\n                                    content: 'Warning Stage 2',\n                                    enabled: true,\n                                    position: 'center'\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    // Watch for new incoming messages\n    scope.$watch('msg.payload', function(payload) {\n        if (payload && payload.data && Array.isArray(payload.data)) {\n            createChartRiver(payload.data, payload.thresholds.thresh1, payload.thresholds.thresh2);\n        }\n    });\n\n})(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3900,
        "y": 1680,
        "wires": [
            []
        ]
    },
    {
        "id": "91189e34b9d5e539",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "function 712",
        "func": "var sensor = \"smartriver\"\nvar id = msg.payload[0]._id\nmsg.payload = {\n    \"measurement\": sensor,\n    \"deviceId\": id\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2670,
        "y": 1540,
        "wires": [
            [
                "2ec327ebb0510bbf"
            ]
        ]
    },
    {
        "id": "2ec327ebb0510bbf",
        "type": "http request",
        "z": "241d6dd772dc326f",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://hydroops-server-dev.vercel.app/sensors/getMetadata",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 2850,
        "y": 1540,
        "wires": [
            [
                "3a6b391673a4a83a",
                "c9c323d3665c152d"
            ]
        ]
    },
    {
        "id": "03a7abae0fd22b7b",
        "type": "http request",
        "z": "241d6dd772dc326f",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://137.184.228.7:5007/smartriver?ags=09274127&page=1&limit=10000&withData=true&resolution=60&searchTerm={{name}}&start={{start}}&end={{end}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1570,
        "y": 1640,
        "wires": [
            [
                "a58935af02ca8149"
            ]
        ]
    },
    {
        "id": "302da5a3db99fedd",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "protocol",
        "func": "// Assuming msg.payload is an array with one object\nconst payload = msg.payload[0];\n\n// Extract the name from the object\nmsg.payload = payload.protocolType;\n\n// Return the updated message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3720,
        "y": 1780,
        "wires": [
            [
                "4919369579ecfec3"
            ]
        ]
    },
    {
        "id": "86d1e91f0c427150",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "extract",
        "func": "// Extract the result object from the incoming message payload\nmsg.payload = msg.payload.data.result;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 1860,
        "wires": [
            [
                "302da5a3db99fedd",
                "e8dc71db24e67e21",
                "35189051617e69d1",
                "4b3873392fee9396"
            ]
        ]
    },
    {
        "id": "e8dc71db24e67e21",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "name",
        "func": "// Assuming msg.payload is an array with one object\nconst payload = msg.payload[0];\n\n// Extract the name from the object\nmsg.payload = payload.name;\n\n// Return the updated message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3730,
        "y": 1740,
        "wires": [
            [
                "64379ce6ef6f35de"
            ]
        ]
    },
    {
        "id": "b14bd76b2f4aeb58",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "temp",
        "func": "// The input message contains the JSON object in msg.payload\nlet data = msg.payload;\n\n// Check if msg.payload is empty or undefined\nif (!data || Object.keys(data).length === 0) {\n    msg.payload = \"NoData\";\n} else {\n    // Extract the level\n    let temp = data.internal_temperature;\n\n    // Set the extracted value in msg.payload\n    msg.payload = temp;\n}\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3730,
        "y": 1860,
        "wires": [
            [
                "5a54fbf2a6220470"
            ]
        ]
    },
    {
        "id": "1c6daca7150c37c8",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "battery",
        "func": "// The input message contains the JSON object in msg.payload\nlet data = msg.payload;\n\n// Check if msg.payload is empty or undefined\nif (!data || data.battery_voltage === undefined) {\n    msg.payload = \"NoData\";\n} else {\n    // Extract the level\n    let vol = data.battery_voltage;\n\n    // Set the extracted value in msg.payload\n    msg.payload = vol;\n}\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3730,
        "y": 1820,
        "wires": [
            [
                "7c6ea9261b867e81"
            ]
        ]
    },
    {
        "id": "64379ce6ef6f35de",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "236b027e738eafc6",
        "name": "name",
        "order": 1,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9;\n        /* Light background color */\n        border-radius: 15px;\n        /* Rounded corners */\n        padding: 15px;\n        width: 300px;\n        /* Adjust the width as needed */\n        height: auto;\n        /* Allow height to adjust based on content */\n        max-height: 150px;\n        /* Set a maximum height */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center;\n        /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);\n        /* Optional: shadow effect */\n        overflow: hidden;\n        /* Hide overflow */\n    }\n\n    .sensor-key {\n        font-size: 12px;\n        /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333;\n        /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n        white-space: nowrap;\n        /* Prevent text wrapping */\n        overflow: hidden;\n        /* Hide overflow */\n        text-overflow: ellipsis;\n        /* Show ellipsis for overflow text */\n    }\n\n    .divider {\n        width: 80%;\n        /* Slim line width */\n        height: 1px;\n        /* Slim line height */\n        background-color: #ccc;\n        /* Ash-colored line */\n        margin: 5px 0 15px 0;\n        /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px;\n        /* Font size for values */\n        font-weight: bold;\n        text-align: center;\n        /* Center-align the text */\n        width: 100%;\n        /* Ensure the text takes up the full width */\n        white-space: nowrap;\n        /* Prevent text wrapping */\n        overflow: hidden;\n        /* Hide overflow */\n        text-overflow: ellipsis;\n        /* Show ellipsis for overflow text */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\" title=\"name\">Sensor Name</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\" title=\"{{msg.payload}}\">{{msg.payload}}</div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3890,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "4919369579ecfec3",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "236b027e738eafc6",
        "name": "protocol",
        "order": 2,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Protocol Type</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3900,
        "y": 1780,
        "wires": [
            []
        ]
    },
    {
        "id": "7c6ea9261b867e81",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "236b027e738eafc6",
        "name": "battery",
        "order": 3,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Battery Voltage</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3890,
        "y": 1820,
        "wires": [
            []
        ]
    },
    {
        "id": "5a54fbf2a6220470",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "236b027e738eafc6",
        "name": "temp",
        "order": 4,
        "width": 7,
        "height": 2,
        "format": "<style>\n.sensor-box {\n    background-color: #f9f9f9; /* Light background color */\n    border-radius: 15px; /* Rounded corners */\n    padding: 15px;\n    width: 300px; /* Adjust the width as needed */\n    height: 100px; /* Adjust the height as needed */\n    font-family: 'Poppins', sans-serif;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: center; /* Center content horizontally */\n    position: relative;\n    box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    border: 2px solid rgba(75, 192, 192, 0.2); /* Border color */\n    box-sizing: border-box; /* Include padding and border in element's total width and height */\n    margin: 0 auto; /* Center the card within its container */\n}\n\n.sensor-key {\n    font-size: 12px; /* Smaller font size for keys */\n    font-weight: bold;\n    color: #333; /* Dark text color for visibility on light background */\n    text-align: center;\n    width: 100%;\n}\n\n.divider {\n    width: 80%; /* Slim line width */\n    height: 1px; /* Slim line height */\n    background-color: #ccc; /* Ash-colored line */\n    margin: 5px 0 15px 0; /* Spacing around the line */\n}\n\n.sensor-value {\n    font-size: 15px; /* Font size for values */\n    font-weight: bold;\n    text-align: center; /* Center-align the text */\n    width: 100%; /* Ensure the text takes up the full width */\n}\n\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Internal Temperature</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3890,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "35189051617e69d1",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "function 713",
        "func": "let data = msg.payload[0].data;\nlet soleValue = msg.payload[0].soleCorrectionValue;\nlet thresh1 = msg.payload[0].thresholds[0].level;\nlet thresh2 = msg.payload[0].thresholds[1].level;\n\n// Create a new array to store the subtracted values with converted timestamps\nlet extractedData = data.map(item => {\n    let subtractedValue = soleValue - item.value;\n    // If the subtracted value is negative or zero, set it to 0\n    subtractedValue = subtractedValue <= 0 ? 0 : subtractedValue;\n\n    return {\n        time: new Date(item.end).toLocaleString(), // Convert the timestamp to a readable format\n        value: subtractedValue\n    };\n});\n\n// Set the extracted data along with threshold values as the new msg.payload\nmsg.payload = {\n    data: extractedData,\n    thresholds: {\n        thresh1: thresh1,\n        thresh2: thresh2\n    }\n};\n\n// Return the message object\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3710,
        "y": 1900,
        "wires": [
            [
                "6cf888866bfcc322"
            ]
        ]
    },
    {
        "id": "6cf888866bfcc322",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "236b027e738eafc6",
        "name": "chart-line",
        "order": 4,
        "width": "14",
        "height": "8",
        "format": "<!-- Load Chart.js library and annotation plugin -->\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation@1.0.2\"></script>\n\n<div style=\"width: 100%; height: 500px;\"> <!-- Increased height to provide more space -->\n    <canvas id=\"riverLineChart8\" style=\"height: 100%;\"></canvas>\n</div>\n\n<script>\n(function(scope) {\n    // Initialize the chart\n    let ctx8 = document.getElementById('riverLineChart8').getContext('2d');\n\n    // Placeholder for the chart instance\n    let riverChart8;\n\n    // Function to create the chart\n    function createChartRiver(data, thresh1, thresh2) {\n        // If chart already exists, destroy it before creating a new one\n        if (riverChart8) {\n            riverChart8.destroy();\n        }\n\n        // Convert time from ISO format to a readable format\n        let labels = data.map(item => {\n            let date = new Date(item.time);\n            return date.toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'}); // Format as \"hh:mm AM/PM\"\n        });\n\n        let values = data.map(item => item.value);\n\n        // Create the chart\n        riverChart8 = new Chart(ctx8, {\n            type: 'line', // Changed from 'bar' to 'line'\n            data: {\n                labels: labels,\n                datasets: [{\n                    label: 'Water Level (cm)',\n                    data: values,\n                    backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    borderWidth: 2,\n                    fill: false, // To avoid filling under the line\n                    tension: 0.1 // Smoothing the curve of the line\n                }]\n            },\n            options: {\n                scales: {\n                    y: {\n                        beginAtZero: true,\n                        suggestedMax: thresh2 + 5 // Add space above threshold 2\n                    }\n                },\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        display: true\n                    },\n                    tooltip: {\n                        callbacks: {\n                            label: function(context) {\n                                let date = new Date(data[context.dataIndex].time);\n                                let formattedDate = date.toLocaleString(); // Format as \"MM/DD/YYYY, hh:mm:ss AM/PM\"\n                                return 'Value: ' + context.parsed.y + ', Time: ' + formattedDate;\n                            }\n                        }\n                    },\n                    annotation: {\n                        annotations: {\n                            thresh1Line: {\n                                type: 'line',\n                                yMin: thresh1,\n                                yMax: thresh1,\n                                borderColor: 'yellow', // Set color to yellow\n                                borderWidth: 2,\n                                label: {\n                                    content: 'Warning Stage 1',\n                                    enabled: true,\n                                    position: 'center'\n                                }\n                            },\n                            thresh2Line: {\n                                type: 'line',\n                                yMin: thresh2,\n                                yMax: thresh2,\n                                borderColor: 'red', // Set color to red\n                                borderWidth: 2,\n                                label: {\n                                    content: 'Warning Stage 2',\n                                    enabled: true,\n                                    position: 'center'\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    // Watch for new incoming messages\n    scope.$watch('msg.payload', function(payload) {\n        if (payload && payload.data && Array.isArray(payload.data)) {\n            createChartRiver(payload.data, payload.thresholds.thresh1, payload.thresholds.thresh2);\n        }\n    });\n\n})(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3900,
        "y": 1900,
        "wires": [
            []
        ]
    },
    {
        "id": "4b3873392fee9396",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "function 714",
        "func": "var sensor = \"smartriver\"\nvar id = msg.payload[0]._id\nmsg.payload = {\n    \"measurement\": sensor,\n    \"deviceId\": id\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2670,
        "y": 1760,
        "wires": [
            [
                "60eb5c47c0fac465"
            ]
        ]
    },
    {
        "id": "60eb5c47c0fac465",
        "type": "http request",
        "z": "241d6dd772dc326f",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://hydroops-server-dev.vercel.app/sensors/getMetadata",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 2850,
        "y": 1760,
        "wires": [
            [
                "b14bd76b2f4aeb58",
                "1c6daca7150c37c8"
            ]
        ]
    },
    {
        "id": "c5f431a0cde79053",
        "type": "http request",
        "z": "241d6dd772dc326f",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://137.184.228.7:5007/smartriver?ags=09274127&page=1&limit=10000&withData=true&resolution=60&searchTerm={{name}}&start={{start}}&end={{end}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1570,
        "y": 1860,
        "wires": [
            [
                "86d1e91f0c427150"
            ]
        ]
    },
    {
        "id": "97b68bdc4e982bc8",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "protocol",
        "func": "// Assuming msg.payload is an array with one object\nconst payload = msg.payload[0];\n\n// Extract the name from the object\nmsg.payload = payload.protocolType;\n\n// Return the updated message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3720,
        "y": 2000,
        "wires": [
            [
                "11a044fb0f236660"
            ]
        ]
    },
    {
        "id": "1f6d07e174b9b5ec",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "extract",
        "func": "// Extract the result object from the incoming message payload\nmsg.payload = msg.payload.data.result;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 2080,
        "wires": [
            [
                "97b68bdc4e982bc8",
                "6bcc298abd8a229f",
                "39b2d4ca1560a9e7",
                "6c93d16804365c3c"
            ]
        ]
    },
    {
        "id": "6bcc298abd8a229f",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "name",
        "func": "// Assuming msg.payload is an array with one object\nconst payload = msg.payload[0];\n\n// Extract the name from the object\nmsg.payload = payload.name;\n\n// Return the updated message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3730,
        "y": 1960,
        "wires": [
            [
                "4041865bec5edc01"
            ]
        ]
    },
    {
        "id": "2ed4c801f004f149",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "temp",
        "func": "// The input message contains the JSON object in msg.payload\nlet data = msg.payload;\n\n// Check if msg.payload is empty or undefined\nif (!data || Object.keys(data).length === 0) {\n    msg.payload = \"NoData\";\n} else {\n    // Extract the level\n    let temp = data.internal_temperature;\n\n    // Set the extracted value in msg.payload\n    msg.payload = temp;\n}\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3730,
        "y": 2080,
        "wires": [
            [
                "7d8ff1cbe7082445"
            ]
        ]
    },
    {
        "id": "44d6282d69b4016b",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "battery",
        "func": "// The input message contains the JSON object in msg.payload\nlet data = msg.payload;\n\n// Check if msg.payload is empty or undefined\nif (!data || data.battery_voltage === undefined) {\n    msg.payload = \"NoData\";\n} else {\n    // Extract the level\n    let vol = data.battery_voltage;\n\n    // Set the extracted value in msg.payload\n    msg.payload = vol;\n}\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3730,
        "y": 2040,
        "wires": [
            [
                "dc535ad8d15e0fd0"
            ]
        ]
    },
    {
        "id": "4041865bec5edc01",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "f2cd648f5c75a0b2",
        "name": "name",
        "order": 1,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9;\n        /* Light background color */\n        border-radius: 15px;\n        /* Rounded corners */\n        padding: 15px;\n        width: 300px;\n        /* Adjust the width as needed */\n        height: auto;\n        /* Allow height to adjust based on content */\n        max-height: 150px;\n        /* Set a maximum height */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center;\n        /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);\n        /* Optional: shadow effect */\n        overflow: hidden;\n        /* Hide overflow */\n    }\n\n    .sensor-key {\n        font-size: 12px;\n        /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333;\n        /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n        white-space: nowrap;\n        /* Prevent text wrapping */\n        overflow: hidden;\n        /* Hide overflow */\n        text-overflow: ellipsis;\n        /* Show ellipsis for overflow text */\n    }\n\n    .divider {\n        width: 80%;\n        /* Slim line width */\n        height: 1px;\n        /* Slim line height */\n        background-color: #ccc;\n        /* Ash-colored line */\n        margin: 5px 0 15px 0;\n        /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px;\n        /* Font size for values */\n        font-weight: bold;\n        text-align: center;\n        /* Center-align the text */\n        width: 100%;\n        /* Ensure the text takes up the full width */\n        white-space: nowrap;\n        /* Prevent text wrapping */\n        overflow: hidden;\n        /* Hide overflow */\n        text-overflow: ellipsis;\n        /* Show ellipsis for overflow text */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\" title=\"name\">Sensor Name</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\" title=\"{{msg.payload}}\">{{msg.payload}}</div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3890,
        "y": 1960,
        "wires": [
            []
        ]
    },
    {
        "id": "11a044fb0f236660",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "f2cd648f5c75a0b2",
        "name": "protocol",
        "order": 2,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Protocol Type</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3900,
        "y": 2000,
        "wires": [
            []
        ]
    },
    {
        "id": "dc535ad8d15e0fd0",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "f2cd648f5c75a0b2",
        "name": "battery",
        "order": 3,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Battery Voltage</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3890,
        "y": 2040,
        "wires": [
            []
        ]
    },
    {
        "id": "7d8ff1cbe7082445",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "f2cd648f5c75a0b2",
        "name": "temp",
        "order": 4,
        "width": 7,
        "height": 2,
        "format": "<style>\n.sensor-box {\n    background-color: #f9f9f9; /* Light background color */\n    border-radius: 15px; /* Rounded corners */\n    padding: 15px;\n    width: 300px; /* Adjust the width as needed */\n    height: 100px; /* Adjust the height as needed */\n    font-family: 'Poppins', sans-serif;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: center; /* Center content horizontally */\n    position: relative;\n    box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    border: 2px solid rgba(75, 192, 192, 0.2); /* Border color */\n    box-sizing: border-box; /* Include padding and border in element's total width and height */\n    margin: 0 auto; /* Center the card within its container */\n}\n\n.sensor-key {\n    font-size: 12px; /* Smaller font size for keys */\n    font-weight: bold;\n    color: #333; /* Dark text color for visibility on light background */\n    text-align: center;\n    width: 100%;\n}\n\n.divider {\n    width: 80%; /* Slim line width */\n    height: 1px; /* Slim line height */\n    background-color: #ccc; /* Ash-colored line */\n    margin: 5px 0 15px 0; /* Spacing around the line */\n}\n\n.sensor-value {\n    font-size: 15px; /* Font size for values */\n    font-weight: bold;\n    text-align: center; /* Center-align the text */\n    width: 100%; /* Ensure the text takes up the full width */\n}\n\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Internal Temperature</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3890,
        "y": 2080,
        "wires": [
            []
        ]
    },
    {
        "id": "39b2d4ca1560a9e7",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "function 715",
        "func": "let data = msg.payload[0].data;\nlet soleValue = msg.payload[0].soleCorrectionValue;\nlet thresh1 = msg.payload[0].thresholds[0].level;\nlet thresh2 = msg.payload[0].thresholds[1].level;\n\n// Create a new array to store the subtracted values with converted timestamps\nlet extractedData = data.map(item => {\n    let subtractedValue = soleValue - item.value;\n    // If the subtracted value is negative or zero, set it to 0\n    subtractedValue = subtractedValue <= 0 ? 0 : subtractedValue;\n\n    return {\n        time: new Date(item.end).toLocaleString(), // Convert the timestamp to a readable format\n        value: subtractedValue\n    };\n});\n\n// Set the extracted data along with threshold values as the new msg.payload\nmsg.payload = {\n    data: extractedData,\n    thresholds: {\n        thresh1: thresh1,\n        thresh2: thresh2\n    }\n};\n\n// Return the message object\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3710,
        "y": 2120,
        "wires": [
            [
                "2a78dfb2722282a3"
            ]
        ]
    },
    {
        "id": "2a78dfb2722282a3",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "f2cd648f5c75a0b2",
        "name": "chart-line",
        "order": 4,
        "width": "14",
        "height": "8",
        "format": "<!-- Load Chart.js library and annotation plugin -->\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation@1.0.2\"></script>\n\n<div style=\"width: 100%; height: 500px;\"> <!-- Increased height to provide more space -->\n    <canvas id=\"riverLineChart9\" style=\"height: 100%;\"></canvas>\n</div>\n\n<script>\n(function(scope) {\n    // Initialize the chart\n    let ctx9 = document.getElementById('riverLineChart9').getContext('2d');\n\n    // Placeholder for the chart instance\n    let riverChart9;\n\n    // Function to create the chart\n    function createChartRiver(data, thresh1, thresh2) {\n        // If chart already exists, destroy it before creating a new one\n        if (riverChart9) {\n            riverChart9.destroy();\n        }\n\n        // Convert time from ISO format to a readable format\n        let labels = data.map(item => {\n            let date = new Date(item.time);\n            return date.toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'}); // Format as \"hh:mm AM/PM\"\n        });\n\n        let values = data.map(item => item.value);\n\n        // Create the chart\n        riverChart9 = new Chart(ctx9, {\n            type: 'line', // Changed from 'bar' to 'line'\n            data: {\n                labels: labels,\n                datasets: [{\n                    label: 'Water Level (cm)',\n                    data: values,\n                    backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    borderWidth: 2,\n                    fill: false, // To avoid filling under the line\n                    tension: 0.1 // Smoothing the curve of the line\n                }]\n            },\n            options: {\n                scales: {\n                    y: {\n                        beginAtZero: true,\n                        suggestedMax: thresh2 + 5 // Add space above threshold 2\n                    }\n                },\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        display: true\n                    },\n                    tooltip: {\n                        callbacks: {\n                            label: function(context) {\n                                let date = new Date(data[context.dataIndex].time);\n                                let formattedDate = date.toLocaleString(); // Format as \"MM/DD/YYYY, hh:mm:ss AM/PM\"\n                                return 'Value: ' + context.parsed.y + ', Time: ' + formattedDate;\n                            }\n                        }\n                    },\n                    annotation: {\n                        annotations: {\n                            thresh1Line: {\n                                type: 'line',\n                                yMin: thresh1,\n                                yMax: thresh1,\n                                borderColor: 'yellow', // Set color to yellow\n                                borderWidth: 2,\n                                label: {\n                                    content: 'Warning Stage 1',\n                                    enabled: true,\n                                    position: 'center'\n                                }\n                            },\n                            thresh2Line: {\n                                type: 'line',\n                                yMin: thresh2,\n                                yMax: thresh2,\n                                borderColor: 'red', // Set color to red\n                                borderWidth: 2,\n                                label: {\n                                    content: 'Warning Stage 2',\n                                    enabled: true,\n                                    position: 'center'\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    // Watch for new incoming messages\n    scope.$watch('msg.payload', function(payload) {\n        if (payload && payload.data && Array.isArray(payload.data)) {\n            createChartRiver(payload.data, payload.thresholds.thresh1, payload.thresholds.thresh2);\n        }\n    });\n\n})(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3900,
        "y": 2120,
        "wires": [
            []
        ]
    },
    {
        "id": "6c93d16804365c3c",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "function 716",
        "func": "var sensor = \"smartriver\"\nvar id = msg.payload[0]._id\nmsg.payload = {\n    \"measurement\": sensor,\n    \"deviceId\": id\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2670,
        "y": 1980,
        "wires": [
            [
                "0546f0b5c9b26bbd"
            ]
        ]
    },
    {
        "id": "0546f0b5c9b26bbd",
        "type": "http request",
        "z": "241d6dd772dc326f",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://hydroops-server-dev.vercel.app/sensors/getMetadata",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 2850,
        "y": 1980,
        "wires": [
            [
                "2ed4c801f004f149",
                "44d6282d69b4016b"
            ]
        ]
    },
    {
        "id": "6286c0ce90304ed5",
        "type": "http request",
        "z": "241d6dd772dc326f",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://137.184.228.7:5007/smartriver?ags=09274127&page=1&limit=10000&withData=true&resolution=60&searchTerm={{name}}&start={{start}}&end={{end}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1570,
        "y": 2080,
        "wires": [
            [
                "1f6d07e174b9b5ec"
            ]
        ]
    },
    {
        "id": "47c9a9b848d32aee",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "protocol",
        "func": "// Assuming msg.payload is an array with one object\nconst payload = msg.payload[0];\n\n// Extract the name from the object\nmsg.payload = payload.protocolType;\n\n// Return the updated message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3720,
        "y": 2220,
        "wires": [
            [
                "6d965c72b10b83c8"
            ]
        ]
    },
    {
        "id": "dedf2dc5d739b7f9",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "extract",
        "func": "// Extract the result object from the incoming message payload\nmsg.payload = msg.payload.data.result;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 2300,
        "wires": [
            [
                "47c9a9b848d32aee",
                "40885fdec8270283",
                "79178cd4012b5678",
                "50c719ab0b5cead8"
            ]
        ]
    },
    {
        "id": "40885fdec8270283",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "name",
        "func": "// Assuming msg.payload is an array with one object\nconst payload = msg.payload[0];\n\n// Extract the name from the object\nmsg.payload = payload.name;\n\n// Return the updated message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3730,
        "y": 2180,
        "wires": [
            [
                "6fd9eaa51bb81581"
            ]
        ]
    },
    {
        "id": "fd393862b8d0136d",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "temp",
        "func": "// The input message contains the JSON object in msg.payload\nlet data = msg.payload;\n\n// Check if msg.payload is empty or undefined\nif (!data || Object.keys(data).length === 0) {\n    msg.payload = \"NoData\";\n} else {\n    // Extract the level\n    let temp = data.internal_temperature;\n\n    // Set the extracted value in msg.payload\n    msg.payload = temp;\n}\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3730,
        "y": 2300,
        "wires": [
            [
                "1730ea7ebb41799e"
            ]
        ]
    },
    {
        "id": "6f3513b3794d6212",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "battery",
        "func": "// The input message contains the JSON object in msg.payload\nlet data = msg.payload;\n\n// Check if msg.payload is empty or undefined\nif (!data || data.battery_voltage === undefined) {\n    msg.payload = \"NoData\";\n} else {\n    // Extract the level\n    let vol = data.battery_voltage;\n\n    // Set the extracted value in msg.payload\n    msg.payload = vol;\n}\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3730,
        "y": 2260,
        "wires": [
            [
                "1e472e8d61a42c10"
            ]
        ]
    },
    {
        "id": "6fd9eaa51bb81581",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "f8dd96b87a2133e2",
        "name": "name",
        "order": 1,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9;\n        /* Light background color */\n        border-radius: 15px;\n        /* Rounded corners */\n        padding: 15px;\n        width: 300px;\n        /* Adjust the width as needed */\n        height: auto;\n        /* Allow height to adjust based on content */\n        max-height: 150px;\n        /* Set a maximum height */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center;\n        /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);\n        /* Optional: shadow effect */\n        overflow: hidden;\n        /* Hide overflow */\n    }\n\n    .sensor-key {\n        font-size: 12px;\n        /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333;\n        /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n        white-space: nowrap;\n        /* Prevent text wrapping */\n        overflow: hidden;\n        /* Hide overflow */\n        text-overflow: ellipsis;\n        /* Show ellipsis for overflow text */\n    }\n\n    .divider {\n        width: 80%;\n        /* Slim line width */\n        height: 1px;\n        /* Slim line height */\n        background-color: #ccc;\n        /* Ash-colored line */\n        margin: 5px 0 15px 0;\n        /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px;\n        /* Font size for values */\n        font-weight: bold;\n        text-align: center;\n        /* Center-align the text */\n        width: 100%;\n        /* Ensure the text takes up the full width */\n        white-space: nowrap;\n        /* Prevent text wrapping */\n        overflow: hidden;\n        /* Hide overflow */\n        text-overflow: ellipsis;\n        /* Show ellipsis for overflow text */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\" title=\"name\">Sensor Name</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\" title=\"{{msg.payload}}\">{{msg.payload}}</div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3890,
        "y": 2180,
        "wires": [
            []
        ]
    },
    {
        "id": "6d965c72b10b83c8",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "f8dd96b87a2133e2",
        "name": "protocol",
        "order": 2,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Protocol Type</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3900,
        "y": 2220,
        "wires": [
            []
        ]
    },
    {
        "id": "1e472e8d61a42c10",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "f8dd96b87a2133e2",
        "name": "battery",
        "order": 3,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Battery Voltage</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3890,
        "y": 2260,
        "wires": [
            []
        ]
    },
    {
        "id": "1730ea7ebb41799e",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "f8dd96b87a2133e2",
        "name": "temp",
        "order": 4,
        "width": 7,
        "height": 2,
        "format": "<style>\n.sensor-box {\n    background-color: #f9f9f9; /* Light background color */\n    border-radius: 15px; /* Rounded corners */\n    padding: 15px;\n    width: 300px; /* Adjust the width as needed */\n    height: 100px; /* Adjust the height as needed */\n    font-family: 'Poppins', sans-serif;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: center; /* Center content horizontally */\n    position: relative;\n    box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    border: 2px solid rgba(75, 192, 192, 0.2); /* Border color */\n    box-sizing: border-box; /* Include padding and border in element's total width and height */\n    margin: 0 auto; /* Center the card within its container */\n}\n\n.sensor-key {\n    font-size: 12px; /* Smaller font size for keys */\n    font-weight: bold;\n    color: #333; /* Dark text color for visibility on light background */\n    text-align: center;\n    width: 100%;\n}\n\n.divider {\n    width: 80%; /* Slim line width */\n    height: 1px; /* Slim line height */\n    background-color: #ccc; /* Ash-colored line */\n    margin: 5px 0 15px 0; /* Spacing around the line */\n}\n\n.sensor-value {\n    font-size: 15px; /* Font size for values */\n    font-weight: bold;\n    text-align: center; /* Center-align the text */\n    width: 100%; /* Ensure the text takes up the full width */\n}\n\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Internal Temperature</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3890,
        "y": 2300,
        "wires": [
            []
        ]
    },
    {
        "id": "79178cd4012b5678",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "function 717",
        "func": "let data = msg.payload[0].data;\nlet soleValue = msg.payload[0].soleCorrectionValue;\nlet thresh1 = msg.payload[0].thresholds[0].level;\nlet thresh2 = msg.payload[0].thresholds[1].level;\n\n// Create a new array to store the subtracted values with converted timestamps\nlet extractedData = data.map(item => {\n    let subtractedValue = soleValue - item.value;\n    // If the subtracted value is negative or zero, set it to 0\n    subtractedValue = subtractedValue <= 0 ? 0 : subtractedValue;\n\n    return {\n        time: new Date(item.end).toLocaleString(), // Convert the timestamp to a readable format\n        value: subtractedValue\n    };\n});\n\n// Set the extracted data along with threshold values as the new msg.payload\nmsg.payload = {\n    data: extractedData,\n    thresholds: {\n        thresh1: thresh1,\n        thresh2: thresh2\n    }\n};\n\n// Return the message object\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3710,
        "y": 2340,
        "wires": [
            [
                "9968a4c1e3c4bd93"
            ]
        ]
    },
    {
        "id": "9968a4c1e3c4bd93",
        "type": "ui_template",
        "z": "241d6dd772dc326f",
        "group": "f8dd96b87a2133e2",
        "name": "chart-line",
        "order": 4,
        "width": "14",
        "height": "8",
        "format": "<!-- Load Chart.js library and annotation plugin -->\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation@1.0.2\"></script>\n\n<div style=\"width: 100%; height: 500px;\"> <!-- Increased height to provide more space -->\n    <canvas id=\"riverLineChart10\" style=\"height: 100%;\"></canvas>\n</div>\n\n<script>\n(function(scope) {\n    // Initialize the chart\n    let ctx10 = document.getElementById('riverLineChart10').getContext('2d');\n\n    // Placeholder for the chart instance\n    let riverChart10;\n\n    // Function to create the chart\n    function createChartRiver(data, thresh1, thresh2) {\n        // If chart already exists, destroy it before creating a new one\n        if (riverChart10) {\n            riverChart10.destroy();\n        }\n\n        // Convert time from ISO format to a readable format\n        let labels = data.map(item => {\n            let date = new Date(item.time);\n            return date.toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'}); // Format as \"hh:mm AM/PM\"\n        });\n\n        let values = data.map(item => item.value);\n\n        // Create the chart\n        riverChart10 = new Chart(ctx10, {\n            type: 'line', // Changed from 'bar' to 'line'\n            data: {\n                labels: labels,\n                datasets: [{\n                    label: 'Water Level (cm)',\n                    data: values,\n                    backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    borderWidth: 2,\n                    fill: false, // To avoid filling under the line\n                    tension: 0.1 // Smoothing the curve of the line\n                }]\n            },\n            options: {\n                scales: {\n                    y: {\n                        beginAtZero: true,\n                        suggestedMax: thresh2 + 5 // Add space above threshold 2\n                    }\n                },\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        display: true\n                    },\n                    tooltip: {\n                        callbacks: {\n                            label: function(context) {\n                                let date = new Date(data[context.dataIndex].time);\n                                let formattedDate = date.toLocaleString(); // Format as \"MM/DD/YYYY, hh:mm:ss AM/PM\"\n                                return 'Value: ' + context.parsed.y + ', Time: ' + formattedDate;\n                            }\n                        }\n                    },\n                    annotation: {\n                        annotations: {\n                            thresh1Line: {\n                                type: 'line',\n                                yMin: thresh1,\n                                yMax: thresh1,\n                                borderColor: 'yellow', // Set color to yellow\n                                borderWidth: 2,\n                                label: {\n                                    content: 'Warning Stage 1',\n                                    enabled: true,\n                                    position: 'center'\n                                }\n                            },\n                            thresh2Line: {\n                                type: 'line',\n                                yMin: thresh2,\n                                yMax: thresh2,\n                                borderColor: 'red', // Set color to red\n                                borderWidth: 2,\n                                label: {\n                                    content: 'Warning Stage 2',\n                                    enabled: true,\n                                    position: 'center'\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    // Watch for new incoming messages\n    scope.$watch('msg.payload', function(payload) {\n        if (payload && payload.data && Array.isArray(payload.data)) {\n            createChartRiver(payload.data, payload.thresholds.thresh1, payload.thresholds.thresh2);\n        }\n    });\n\n})(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3900,
        "y": 2340,
        "wires": [
            []
        ]
    },
    {
        "id": "50c719ab0b5cead8",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "function 718",
        "func": "var sensor = \"smartriver\"\nvar id = msg.payload[0]._id\nmsg.payload = {\n    \"measurement\": sensor,\n    \"deviceId\": id\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2670,
        "y": 2200,
        "wires": [
            [
                "036b9ccd561d3e53"
            ]
        ]
    },
    {
        "id": "036b9ccd561d3e53",
        "type": "http request",
        "z": "241d6dd772dc326f",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://hydroops-server-dev.vercel.app/sensors/getMetadata",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 2850,
        "y": 2200,
        "wires": [
            [
                "fd393862b8d0136d",
                "6f3513b3794d6212"
            ]
        ]
    },
    {
        "id": "7683224910c8cf92",
        "type": "http request",
        "z": "241d6dd772dc326f",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://137.184.228.7:5007/smartriver?ags=09274127&page=1&limit=10000&withData=true&resolution=60&searchTerm={{name}}&start={{start}}&end={{end}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1570,
        "y": 2300,
        "wires": [
            [
                "dedf2dc5d739b7f9"
            ]
        ]
    },
    {
        "id": "c0fc8c0d46c3bf44",
        "type": "debug",
        "z": "241d6dd772dc326f",
        "name": "debug 54",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1850,
        "y": 240,
        "wires": []
    },
    {
        "id": "be2dd652a493b5d5",
        "type": "debug",
        "z": "241d6dd772dc326f",
        "name": "debug 55",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 500,
        "wires": []
    },
    {
        "id": "3d62df6f4917724a",
        "type": "debug",
        "z": "241d6dd772dc326f",
        "name": "debug 56",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 660,
        "wires": []
    },
    {
        "id": "7797be7327dcbb87",
        "type": "worldmap in",
        "z": "241d6dd772dc326f",
        "name": "",
        "path": "/worldmap",
        "events": "connect,disconnect,point,layer,bounds,files,draw,other",
        "x": 860,
        "y": 160,
        "wires": [
            [
                "b00acb2c5f21565e"
            ]
        ]
    },
    {
        "id": "b00acb2c5f21565e",
        "type": "function",
        "z": "241d6dd772dc326f",
        "name": "function 719",
        "func": "var name = msg.payload.name;\n\n// Get today's date\nvar today = new Date();\ntoday.setUTCHours(0, 0, 0, 0); // Set the time to 00:00:00.000\n\n// Get yesterday's date\nvar yesterday = new Date(today);\nyesterday.setDate(today.getDate() - 1);\n\n// Convert the dates to the required format\nvar start = yesterday.toISOString();\nvar end = today.toISOString();\n\n// Assign the values to the message object\nmsg.name = name;\nmsg.start = start;\nmsg.end = end;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 160,
        "wires": [
            [
                "e9574d1eb56a9c0b",
                "1c720121e9b761ef"
            ]
        ]
    },
    {
        "id": "1c720121e9b761ef",
        "type": "debug",
        "z": "241d6dd772dc326f",
        "name": "debug 57",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "name",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 140,
        "wires": []
    },
    {
        "id": "2",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "Control Group Visibility",
        "func": "msg.payload = {\n    \"group\": {\n        \"show\": [\"HDC_Dashboard_Group_1\"],\n        \"hide\": [\"HDC_Dashboard_Group_2\", \"HDC_Dashboard_Group_3\", \"HDC_Dashboard_Group_4\", \"HDC_Dashboard_Group_5\", \"HDC_Dashboard_Group_6\", \"HDC_Dashboard_Group_7\", \"HDC_Dashboard_Group_8\", \"HDC_Dashboard_Group_9\", \"HDC_Dashboard_Group_10\"]\n    }\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 360,
        "wires": [
            [
                "e52c7981f71f198b",
                "586ae10c765a9fec"
            ]
        ]
    },
    {
        "id": "5da468e0c98b95be",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "function 591",
        "func": "// Create a mapping of sensor inputs to their corresponding names\nconst sensorMapping = {\n    \"sensor1_pressed\": \"Feuerwehr Jellenkofen\",\n    \"sensor2_pressed\": \"Feuerwehr Martinshaun\",\n    \"sensor3_pressed\": \"Grund- und Mittelschule Ergoldsbach\",\n    \"sensor4_pressed\": \"Schützenverein\",\n    \"sensor5_pressed\": \"Feuerwehr Kläham\",\n    \"sensor6_pressed\": \"Feuerwehr Paindlkofen\",\n    \"sensor7_pressed\": \"Feuerwehr Langenhettenbach\"\n\n};\n\n// Check the incoming payload\nif (sensorMapping.hasOwnProperty(msg.payload)) {\n    // Set the output payload to the corresponding name\n    msg.payload = sensorMapping[msg.payload];\n} else {\n    // Handle unexpected payload values if necessary\n    msg.payload = \"Unknown sensor\";\n}\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 2820,
        "wires": [
            []
        ]
    },
    {
        "id": "a5259c8c0397ef53",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "function 607",
        "func": "if (msg.payload === \"Grund- und Mittelschule Ergoldsbach\") {\n    msg.payload = \"sensor3_pressed\";\n} else if (msg.payload === \"Schützenverein\") {\n    msg.payload = \"sensor4_pressed\";\n} else if (msg.payload === \"Feuerwehr Kläham\") {\n    msg.payload = \"sensor5_pressed\";\n} else if (msg.payload === \"Feuerwehr Paindlkofen\") {\n    msg.payload = \"sensor6_pressed\";\n} else if (msg.payload === \"Feuerwehr Langenhettenbach\") {\n    msg.payload = \"sensor7_pressed\";\n} else if (msg.payload === \"Feuerwehr Jellenkofen\") {\n    msg.payload = \"sensor1_pressed\";\n} else if (msg.payload === \"Feuerwehr Martinshaun\") {\n    msg.payload = \"sensor2_pressed\";\n} else {\n    return null;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 2820,
        "wires": [
            [
                "5da468e0c98b95be"
            ]
        ]
    },
    {
        "id": "ff1d6bc6bc4ab729",
        "type": "http request",
        "z": "edc51ffb760624f6",
        "name": "hdc (last hour)",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://137.184.228.7:5007/hdc?ags=09274127&page=1&limit=10000&withData=true&timeFrame=60",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1440,
        "y": 3080,
        "wires": [
            [
                "26140641d884b820"
            ]
        ]
    },
    {
        "id": "26140641d884b820",
        "type": "json",
        "z": "edc51ffb760624f6",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1650,
        "y": 3080,
        "wires": [
            [
                "ad3f9639dfbd8b87"
            ]
        ]
    },
    {
        "id": "ad3f9639dfbd8b87",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "extract",
        "func": "// Extract the result object from the incoming message payload\nmsg.payload = msg.payload.data.result;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 3080,
        "wires": [
            [
                "cf2cf6afdf8b4693"
            ]
        ]
    },
    {
        "id": "cf2cf6afdf8b4693",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "function 609",
        "func": "// Input: msg.payload contains the array of sensor objects\nlet sensors = msg.payload;\n\n// Output: An array of objects with \"name\" and \"sumValue\" properties\nlet result = sensors.map(sensor => {\n    // Extract the name\n    let name = sensor.name;\n    \n    // Calculate the sum of _value in the data array\n    let sumValue = 0;\n    if (sensor.data && sensor.data.length > 0) {\n        sumValue = sensor.data.reduce((sum, item) => sum + (item._value || 0), 0);\n    }\n    \n    // Round the sumValue to 1 decimal place\n    sumValue = parseFloat(sumValue.toFixed(1));\n    \n    // Return an object with name and sumValue\n    return {\n        name: name,\n        hourly_value: sumValue\n    };\n});\n\n// Set the result as the new payload\nmsg.payload1 = result;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1970,
        "y": 3080,
        "wires": [
            [
                "76136b1f16e04b84"
            ]
        ]
    },
    {
        "id": "025e40194c168d89",
        "type": "http request",
        "z": "edc51ffb760624f6",
        "name": "hdc (last 24)",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://137.184.228.7:5007/hdc?ags=09274127&page=1&limit=10000&withData=true&timeFrame=1440",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1450,
        "y": 3120,
        "wires": [
            [
                "011ce182160042cc"
            ]
        ]
    },
    {
        "id": "011ce182160042cc",
        "type": "json",
        "z": "edc51ffb760624f6",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1650,
        "y": 3120,
        "wires": [
            [
                "22b7fbf98d1746ff"
            ]
        ]
    },
    {
        "id": "22b7fbf98d1746ff",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "extract",
        "func": "// Extract the result object from the incoming message payload\nmsg.payload = msg.payload.data.result;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 3120,
        "wires": [
            [
                "404d3e9d8e8c9d2c"
            ]
        ]
    },
    {
        "id": "404d3e9d8e8c9d2c",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "function 610",
        "func": "// Extract the two payloads\nconst dailyPayload = msg.payload || []; // Default to an empty array if payload is not defined\nvar storedNames = flow.get('hourlyPayload');\nconst hourlyPayload = storedNames || []; // Default to an empty array if storedNames is not defined\n\n// Create a map to store the hourly values by name\nlet hourlyValues = {};\n\n// Populate the hourlyValues map\nhourlyPayload.forEach(item => {\n    if (item.name && item.hourly_value !== undefined) {\n        hourlyValues[item.name] = parseFloat(item.hourly_value).toFixed(1); // Format to one decimal place\n    }\n});\n\n// Initialize result array\nlet result = [];\n\n// Process the daily payload to calculate daily values and combine with hourly values\ndailyPayload.forEach(item => {\n    const name = item.name;\n    const data = item.data;\n\n    let sum = 0;\n\n    if (data && Array.isArray(data)) {\n        data.forEach(dataItem => {\n            if (dataItem._value !== undefined) {\n                sum += parseFloat(dataItem._value);\n            }\n        });\n    }\n\n    // Format daily_value to one decimal place\n    const daily_value = sum.toFixed(1);\n\n    // Get the hourly value from the map and format to one decimal place\n    const hourly_value = hourlyValues[name] !== undefined ? hourlyValues[name] : (0).toFixed(1);\n\n    // Push the result with name, hourly_value, and daily_value\n    result.push({\n        name: name,\n        hourly_value: hourly_value,\n        daily_value: daily_value\n    });\n});\n\n// Set the result as the new payload\nmsg.payload = result;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 3120,
        "wires": [
            [
                "74a8f29ec8fd2563"
            ]
        ]
    },
    {
        "id": "76136b1f16e04b84",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "function 611",
        "func": "// Store the payload in the flow context with a key\nflow.set('hourlyPayload', msg.payload1);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 3080,
        "wires": [
            [
                "404d3e9d8e8c9d2c"
            ]
        ]
    },
    {
        "id": "e2a1d109a1eceb1a",
        "type": "ui_text",
        "z": "edc51ffb760624f6",
        "group": "f7e86caabc74a42c",
        "order": 1,
        "width": 14,
        "height": 1,
        "name": "",
        "label": "HDC Sensor",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "20",
        "color": "#0527b3",
        "x": 2430,
        "y": 3080,
        "wires": []
    },
    {
        "id": "bfb270a1d183fef5",
        "type": "inject",
        "z": "edc51ffb760624f6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1140,
        "y": 3100,
        "wires": [
            [
                "ff1d6bc6bc4ab729",
                "025e40194c168d89"
            ]
        ]
    },
    {
        "id": "9f1886b90aca3b71",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "function 612",
        "func": "// List of matching names\nconst matchingNames = [\n    \"Feuerwehr Jellenkofen\",\n    \"Feuerwehr Martinshaun\",\n    \"Grund- und Mittelschule Ergoldsbach\",\n    \"Schützenverein\",\n    \"Feuerwehr Kläham\",\n    \"Feuerwehr Paindlkofen\",\n    \"Feuerwehr Langenhettenbach\"\n];\n// To store in flow context\nflow.set('buttonToClick', msg.payload);\n\n// Check if the payload matches any of the names\nif (matchingNames.includes(msg.payload)) {\n    msg.payload = {\"tab\": \"HDC (Test)\"};\n    return msg;\n} else {\n    // Return null to stop the flow if there's no match\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 3120,
        "wires": [
            [
                "1ea61dd158e1eee2"
            ]
        ]
    },
    {
        "id": "1ea61dd158e1eee2",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "function 613",
        "func": "// To retrieve from flow context\nmsg.payload = flow.get('buttonToClick');\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2810,
        "y": 3120,
        "wires": [
            [
                "a5259c8c0397ef53"
            ]
        ]
    },
    {
        "id": "d26adeda47631f0f",
        "type": "worldmap in",
        "z": "edc51ffb760624f6",
        "name": "",
        "path": "/worldmap",
        "events": "connect,disconnect,point,layer,bounds,files,draw,other",
        "x": 880,
        "y": 2900,
        "wires": [
            [
                "70c254d32081a56c",
                "232e8d98bc222c69"
            ]
        ]
    },
    {
        "id": "70c254d32081a56c",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "function 619",
        "func": "if (msg.payload.name === \"Grund- und Mittelschule Ergoldsbach\") {\n    msg.payload = \"sensor3_pressed\";\n} else if (msg.payload.name === \"Schützenverein\") {\n    msg.payload = \"sensor4_pressed\";\n} else if (msg.payload.name === \"Feuerwehr Kläham\") {\n    msg.payload = \"sensor5_pressed\";\n} else if (msg.payload.name === \"Feuerwehr Paindlkofen\") {\n    msg.payload = \"sensor6_pressed\";\n} else if (msg.payload.name === \"Feuerwehr Langenhettenbach\") {\n    msg.payload = \"sensor7_pressed\";\n} else if (msg.payload.name === \"Feuerwehr Jellenkofen\") {\n    msg.payload = \"sensor1_pressed\";\n} else if (msg.payload.name === \"Feuerwehr Martinshaun\") {\n    msg.payload = \"sensor2_pressed\";\n} else {\n    return null;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 2900,
        "wires": [
            [
                "5da468e0c98b95be"
            ]
        ]
    },
    {
        "id": "232e8d98bc222c69",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "function 629",
        "func": "// Check if the action in msg.payload is 'connected'\nif (msg.payload.action === 'connected') {\n    msg.payload = Math.floor(Date.now() / 1000);\n    return msg;\n} else {\n    msg.payload = false;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 3000,
        "wires": [
            [
                "2ea03dc23fa357cf"
            ]
        ]
    },
    {
        "id": "2ea03dc23fa357cf",
        "type": "switch",
        "z": "edc51ffb760624f6",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "number",
                "vt": "number"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1170,
        "y": 3000,
        "wires": [
            [
                "ff1d6bc6bc4ab729",
                "025e40194c168d89"
            ],
            []
        ]
    },
    {
        "id": "74a8f29ec8fd2563",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "f7e86caabc74a42c",
        "name": "hdc-table",
        "order": 2,
        "width": 14,
        "height": "9",
        "format": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Sensor Data</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <style>\n        .lightgreen {\n            background-color: lightgreen !important;\n        }\n\n        .lightyellow {\n            background-color: lightyellow !important;\n        }\n\n        .lightcoral {\n            background-color: lightcoral !important;\n        }\n\n        .plum {\n            background-color: plum !important;\n        }\n\n        .col-name {\n            width: 50%;\n        }\n\n        .col-hourly {\n            width: 25%;\n        }\n\n        .col-daily {\n            width: 25%;\n        }\n\n        .table4-container {\n            position: relative;\n        }\n\n        .btn-custom {\n            background-color: #f8f9fa;\n            /* Light background */\n            border: none;\n            /* Remove border */\n            color: black;\n            /* Font color */\n            text-decoration: none;\n            /* Remove underline */\n            padding: 0.5rem 1rem;\n            /* Adjust padding to make button look better */\n            border-radius: 0.25rem;\n            /* Rounded corners */\n            display: inline-block;\n            /* Make it inline-block for button styling */\n        }\n\n        .btn-custom:hover {\n            background-color: #dbd9d7;\n            /* Hover background color */\n            color: black;\n            /* Ensure font color is black on hover */\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"container table4-container\">\n        <table class=\"table table-striped table-bordered table-hover text-center\">\n            <thead class=\"table-primary\">\n                <tr>\n                    <th class=\"col-name\">Sensor Name</th>\n                    <th class=\"col-hourly\">Sum (Last Hour)</th>\n                    <th class=\"col-daily\">Sum (24 Hours)</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr ng-repeat=\"item in msg.payload\">\n                    <td>\n                        <a href=\"http://78.46.151.191:1880/ui/#!/2?socketid=_VUyRPxDa--vwX7YAAHV\" target=\"_blank\"\n                            ng-click=\"sendClick(item.name, $event)\" class=\"btn btn-custom\">\n                            {{item.name}}\n                        </a>\n                    </td>\n                    <td ng-class=\"{\n                        'lightgreen': item.hourly_value < 10, \n                        'lightyellow': item.hourly_value >= 10 && item.hourly_value < 20,\n                        'lightcoral': item.hourly_value >= 20 && item.hourly_value < 40, \n                        'plum': item.hourly_value >= 40\n                    }\">\n                        {{item.hourly_value}} mm\n                    </td>\n                    <td>{{item.daily_value}} mm</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n\n    <script>\n        (function(scope) {\n            scope.sendClick = function(name, event) {\n                // Prevent the default behavior of the link\n                event.preventDefault();\n                // Send the payload with the sensor name\n                scope.send({payload: name});\n                // Open the URL in a new tab\n                window.open(event.target.href, '_blank');\n            };\n        })(scope);\n    </script>\n</body>\n\n</html>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 2420,
        "y": 3120,
        "wires": [
            [
                "9f1886b90aca3b71"
            ]
        ]
    },
    {
        "id": "cafe341cc4e3888f",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "function 631",
        "func": "flow.set(\"NumberOfSensors\", msg.payload.names)\n// Check if msg.payload is an array\nif (Array.isArray(msg.payload.names)) {\n    // Get the length of the array\n    let arrayLength = msg.payload.names.length;\n    \n    // Return the length if it's between 1 and 4\n    if (arrayLength >= 1 && arrayLength <= 4) {\n        msg.payload = arrayLength;\n    } else {\n        msg.payload = \"Array length is out of range\";\n    }\n} else {\n    // Handle case where msg.payload is not an array\n    msg.payload = \"msg.payload is not an array\";\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 860,
        "wires": [
            [
                "5fe49de0834c7b54",
                "1e2cecec7f63b25d",
                "d5f2c32e91dc025d",
                "5303b99f61d38eb3"
            ]
        ]
    },
    {
        "id": "e52c7981f71f198b",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "function 632",
        "func": "var sensor = flow.get(\"NumberOfSensors\");\nvar start = flow.get(\"startDate\");\nvar end = flow.get(\"endDate\");\nmsg.name = sensor[0];\nmsg.start = start;\nmsg.end = end;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 320,
        "wires": [
            [
                "7a39821a9e9c0917"
            ]
        ]
    },
    {
        "id": "586ae10c765a9fec",
        "type": "ui_ui_control",
        "z": "edc51ffb760624f6",
        "name": "",
        "events": "change",
        "x": 1700,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "0b745ddbd892f88e",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "function 633",
        "func": "msg.payload = {\n    \"group\": {\n        \"show\": [\"HDC_Dashboard_Group_2\", \"HDC_Dashboard_Group_3\"],\n        \"hide\": [\"HDC_Dashboard_Group_1\", \"HDC_Dashboard_Group_4\", \"HDC_Dashboard_Group_5\", \"HDC_Dashboard_Group_6\", \"HDC_Dashboard_Group_7\", \"HDC_Dashboard_Group_8\", \"HDC_Dashboard_Group_9\", \"HDC_Dashboard_Group_10\"]\n    }\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 560,
        "wires": [
            [
                "7d40befe19a675b6",
                "527f1cd52ed63be5",
                "9bcb1c73fa50b48b"
            ]
        ]
    },
    {
        "id": "7d40befe19a675b6",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "function 634",
        "func": "var sensor = flow.get(\"NumberOfSensors\");\nvar start = flow.get(\"startDate\");\nvar end = flow.get(\"endDate\");\nmsg.name = sensor[0];\nmsg.start = start;\nmsg.end = end;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 520,
        "wires": [
            [
                "4f754079e3189153"
            ]
        ]
    },
    {
        "id": "4f754079e3189153",
        "type": "http request",
        "z": "edc51ffb760624f6",
        "name": "hdc",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://137.184.228.7:5007/hdc?ags=09274127&page=1&limit=10000&withData=true&resolution=60&searchTerm={{name}}&start={{start}}&end={{end}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1850,
        "y": 520,
        "wires": [
            [
                "243b51a52754176f"
            ]
        ]
    },
    {
        "id": "ca4af3495c99ad68",
        "type": "http request",
        "z": "edc51ffb760624f6",
        "name": "hdc",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://137.184.228.7:5007/hdc?ags=09274127&page=1&limit=10000&withData=true&resolution=60&searchTerm={{name}}&start={{start}}&end={{end}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1850,
        "y": 560,
        "wires": [
            [
                "22d543adff5532a9"
            ]
        ]
    },
    {
        "id": "527f1cd52ed63be5",
        "type": "ui_ui_control",
        "z": "edc51ffb760624f6",
        "name": "",
        "events": "change",
        "x": 1620,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "4699bdfc1e02498d",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "function 642",
        "func": "msg.payload = {\n    \"group\": {\n        \"show\": [\"HDC_Dashboard_Group_4\", \"HDC_Dashboard_Group_5\", \"HDC_Dashboard_Group_6\"],\n        \"hide\": [\"HDC_Dashboard_Group_1\", \"HDC_Dashboard_Group_2\", \"HDC_Dashboard_Group_3\", \"HDC_Dashboard_Group_7\", \"HDC_Dashboard_Group_8\", \"HDC_Dashboard_Group_9\", \"HDC_Dashboard_Group_10\"]\n    }\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 820,
        "wires": [
            [
                "7cc4b98185fae7e1",
                "72192f78f3e9aaa9",
                "aa3c447344f722e7",
                "db3525a0d82540fe"
            ]
        ]
    },
    {
        "id": "7cc4b98185fae7e1",
        "type": "ui_ui_control",
        "z": "edc51ffb760624f6",
        "name": "",
        "events": "all",
        "x": 1620,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "9a055d8812929d83",
        "type": "http request",
        "z": "edc51ffb760624f6",
        "name": "hdc",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://137.184.228.7:5007/hdc?ags=09274127&page=1&limit=10000&withData=true&resolution=60&searchTerm={{name}}&start={{start}}&end={{end}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1850,
        "y": 840,
        "wires": [
            [
                "7357fd1c140de34f"
            ]
        ]
    },
    {
        "id": "9509c288a89b3d31",
        "type": "http request",
        "z": "edc51ffb760624f6",
        "name": "hdc",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://137.184.228.7:5007/hdc?ags=09274127&page=1&limit=10000&withData=true&resolution=60&searchTerm={{name}}&start={{start}}&end={{end}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1850,
        "y": 1040,
        "wires": [
            [
                "d232b6be54ddf252"
            ]
        ]
    },
    {
        "id": "fcc39f44c2a122e5",
        "type": "http request",
        "z": "edc51ffb760624f6",
        "name": "hdc",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://137.184.228.7:5007/hdc?ags=09274127&page=1&limit=10000&withData=true&resolution=60&searchTerm={{name}}&start={{start}}&end={{end}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1850,
        "y": 1240,
        "wires": [
            [
                "d5e7d2b905e58b86"
            ]
        ]
    },
    {
        "id": "72192f78f3e9aaa9",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "function 649",
        "func": "var sensor = flow.get(\"NumberOfSensors\");\nvar start = flow.get(\"startDate\");\nvar end = flow.get(\"endDate\");\nmsg.name = sensor[0];\nmsg.start = start;\nmsg.end = end;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 760,
        "wires": [
            [
                "9a055d8812929d83"
            ]
        ]
    },
    {
        "id": "aa3c447344f722e7",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "function 650",
        "func": "var sensor = flow.get(\"NumberOfSensors\");\nvar start = flow.get(\"startDate\");\nvar end = flow.get(\"endDate\");\nmsg.name = sensor[1];\nmsg.start = start;\nmsg.end = end;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 800,
        "wires": [
            [
                "9509c288a89b3d31"
            ]
        ]
    },
    {
        "id": "db3525a0d82540fe",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "function 651",
        "func": "var sensor = flow.get(\"NumberOfSensors\");\nvar start = flow.get(\"startDate\");\nvar end = flow.get(\"endDate\");\nmsg.name = sensor[2];\nmsg.start = start;\nmsg.end = end;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 840,
        "wires": [
            [
                "fcc39f44c2a122e5"
            ]
        ]
    },
    {
        "id": "hide_groups",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "Hide All Groups",
        "func": "if (msg.tab === 2) {  \n    msg.payload = {\n        \"group\": {\n            \"hide\": [\"HDC_Dashboard_Group_1\", \"HDC_Dashboard_Group_2\", \"HDC_Dashboard_Group_3\", \"HDC_Dashboard_Group_4\", \"HDC_Dashboard_Group_5\", \"HDC_Dashboard_Group_6\", \"HDC_Dashboard_Group_7\", \"HDC_Dashboard_Group_8\", \"HDC_Dashboard_Group_9\", \"HDC_Dashboard_Group_10\"] \n        }\n    };\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 700,
        "wires": [
            [
                "325d63b00f285bf0"
            ]
        ]
    },
    {
        "id": "8381b3861ad756bf",
        "type": "ui_ui_control",
        "z": "edc51ffb760624f6",
        "name": "",
        "events": "change",
        "x": 660,
        "y": 700,
        "wires": [
            [
                "hide_groups"
            ]
        ]
    },
    {
        "id": "325d63b00f285bf0",
        "type": "ui_ui_control",
        "z": "edc51ffb760624f6",
        "name": "",
        "events": "change",
        "x": 1060,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "9bcb1c73fa50b48b",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "function 652",
        "func": "var sensor = flow.get(\"NumberOfSensors\");\nvar start = flow.get(\"startDate\");\nvar end = flow.get(\"endDate\");\nmsg.name = sensor[1];\nmsg.start = start;\nmsg.end = end;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 560,
        "wires": [
            [
                "ca4af3495c99ad68"
            ]
        ]
    },
    {
        "id": "85e335659eb72be2",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "function 653",
        "func": "msg.payload = {\n    \"group\": {\n        \"show\": [\"HDC_Dashboard_Group_7\", \"HDC_Dashboard_Group_8\", \"HDC_Dashboard_Group_9\", \"HDC_Dashboard_Group_10\"],\n        \"hide\": [\"HDC_Dashboard_Group_1\", \"HDC_Dashboard_Group_2\", \"HDC_Dashboard_Group_3\", \"HDC_Dashboard_Group_4\", \"HDC_Dashboard_Group_5\", \"HDC_Dashboard_Group_6\"]\n    }\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 900,
        "wires": [
            [
                "03e843fb34a3c45c",
                "329c5ab3802bb019",
                "930704f1d3eb9dd4",
                "5bc71e6e481debef",
                "adacd47a6210f62f"
            ]
        ]
    },
    {
        "id": "03e843fb34a3c45c",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "function 654",
        "func": "var sensor = flow.get(\"NumberOfSensors\");\nvar start = flow.get(\"startDate\");\nvar end = flow.get(\"endDate\");\nmsg.name = sensor[0];\nmsg.start = start;\nmsg.end = end;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 1760,
        "wires": [
            [
                "48b47bad2609abe7"
            ]
        ]
    },
    {
        "id": "329c5ab3802bb019",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "function 655",
        "func": "var sensor = flow.get(\"NumberOfSensors\");\nvar start = flow.get(\"startDate\");\nvar end = flow.get(\"endDate\");\nmsg.name = sensor[1];\nmsg.start = start;\nmsg.end = end;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 1800,
        "wires": [
            [
                "326832b95a600150"
            ]
        ]
    },
    {
        "id": "930704f1d3eb9dd4",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "function 656",
        "func": "var sensor = flow.get(\"NumberOfSensors\");\nvar start = flow.get(\"startDate\");\nvar end = flow.get(\"endDate\");\nmsg.name = sensor[2];\nmsg.start = start;\nmsg.end = end;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 1840,
        "wires": [
            [
                "b077f60cea8dd658"
            ]
        ]
    },
    {
        "id": "5bc71e6e481debef",
        "type": "ui_ui_control",
        "z": "edc51ffb760624f6",
        "name": "",
        "events": "change",
        "x": 1560,
        "y": 1920,
        "wires": [
            []
        ]
    },
    {
        "id": "adacd47a6210f62f",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "function 657",
        "func": "var sensor = flow.get(\"NumberOfSensors\");\nvar start = flow.get(\"startDate\");\nvar end = flow.get(\"endDate\");\nmsg.name = sensor[3];\nmsg.start = start;\nmsg.end = end;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 1880,
        "wires": [
            [
                "799a93fdf148ab17"
            ]
        ]
    },
    {
        "id": "48b47bad2609abe7",
        "type": "http request",
        "z": "edc51ffb760624f6",
        "name": "hdc",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://137.184.228.7:5007/hdc?ags=09274127&page=1&limit=10000&withData=true&resolution=60&searchTerm={{name}}&start={{start}}&end={{end}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1850,
        "y": 1600,
        "wires": [
            [
                "2a00a25b17bf3326"
            ]
        ]
    },
    {
        "id": "326832b95a600150",
        "type": "http request",
        "z": "edc51ffb760624f6",
        "name": "hdc",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://137.184.228.7:5007/hdc?ags=09274127&page=1&limit=10000&withData=true&resolution=60&searchTerm={{name}}&start={{start}}&end={{end}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1850,
        "y": 1800,
        "wires": [
            [
                "22711a8eebfe5b5f"
            ]
        ]
    },
    {
        "id": "b077f60cea8dd658",
        "type": "http request",
        "z": "edc51ffb760624f6",
        "name": "hdc",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://137.184.228.7:5007/hdc?ags=09274127&page=1&limit=10000&withData=true&resolution=60&searchTerm={{name}}&start={{start}}&end={{end}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1850,
        "y": 2000,
        "wires": [
            [
                "bedc191d2c440583"
            ]
        ]
    },
    {
        "id": "799a93fdf148ab17",
        "type": "http request",
        "z": "edc51ffb760624f6",
        "name": "hdc",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://137.184.228.7:5007/hdc?ags=09274127&page=1&limit=10000&withData=true&resolution=60&searchTerm={{name}}&start={{start}}&end={{end}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1850,
        "y": 2200,
        "wires": [
            [
                "db3e7065be3fca51"
            ]
        ]
    },
    {
        "id": "5fe49de0834c7b54",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "function 666",
        "func": "if (msg.payload === 1) {\n    return {payload: true};\n} else {\n    return {payload: false};\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 800,
        "wires": [
            [
                "f8d6f0b52f7385aa"
            ]
        ]
    },
    {
        "id": "f8d6f0b52f7385aa",
        "type": "switch",
        "z": "edc51ffb760624f6",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1230,
        "y": 440,
        "wires": [
            [
                "2"
            ],
            []
        ]
    },
    {
        "id": "1e2cecec7f63b25d",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "function 667",
        "func": "if (msg.payload === 2) {\n    return {payload: true};\n} else {\n    return {payload: false};\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 840,
        "wires": [
            [
                "31c51407a57d21fa"
            ]
        ]
    },
    {
        "id": "31c51407a57d21fa",
        "type": "switch",
        "z": "edc51ffb760624f6",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1270,
        "y": 640,
        "wires": [
            [
                "0b745ddbd892f88e"
            ],
            []
        ]
    },
    {
        "id": "d5f2c32e91dc025d",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "function 668",
        "func": "if (msg.payload === 3) {\n    return {payload: true};\n} else {\n    return {payload: false};\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 880,
        "wires": [
            [
                "81dd32a6123aac4c"
            ]
        ]
    },
    {
        "id": "81dd32a6123aac4c",
        "type": "switch",
        "z": "edc51ffb760624f6",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1250,
        "y": 840,
        "wires": [
            [
                "4699bdfc1e02498d"
            ],
            []
        ]
    },
    {
        "id": "5303b99f61d38eb3",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "function 669",
        "func": "if (msg.payload === 4) {\n    return {payload: true};\n} else {\n    return {payload: false};\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 920,
        "wires": [
            [
                "50b8a211b4886a80"
            ]
        ]
    },
    {
        "id": "50b8a211b4886a80",
        "type": "switch",
        "z": "edc51ffb760624f6",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1250,
        "y": 900,
        "wires": [
            [
                "85e335659eb72be2"
            ],
            []
        ]
    },
    {
        "id": "0e70e71c9cf8f07b",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "53ba58bbd5a0e3ec",
        "name": "name",
        "order": 1,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9;\n        /* Light background color */\n        border-radius: 15px;\n        /* Rounded corners */\n        padding: 15px;\n        width: 300px;\n        /* Adjust the width as needed */\n        height: auto;\n        /* Allow height to adjust based on content */\n        max-height: 150px;\n        /* Set a maximum height */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center;\n        /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);\n        /* Optional: shadow effect */\n        overflow: hidden;\n        /* Hide overflow */\n    }\n\n    .sensor-key {\n        font-size: 12px;\n        /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333;\n        /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n        white-space: nowrap;\n        /* Prevent text wrapping */\n        overflow: hidden;\n        /* Hide overflow */\n        text-overflow: ellipsis;\n        /* Show ellipsis for overflow text */\n    }\n\n    .divider {\n        width: 80%;\n        /* Slim line width */\n        height: 1px;\n        /* Slim line height */\n        background-color: #ccc;\n        /* Ash-colored line */\n        margin: 5px 0 15px 0;\n        /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px;\n        /* Font size for values */\n        font-weight: bold;\n        text-align: center;\n        /* Center-align the text */\n        width: 100%;\n        /* Ensure the text takes up the full width */\n        white-space: nowrap;\n        /* Prevent text wrapping */\n        overflow: hidden;\n        /* Hide overflow */\n        text-overflow: ellipsis;\n        /* Show ellipsis for overflow text */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\" title=\"name\">Sensor Name</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\" title=\"{{msg.payload.name}}\">{{msg.payload.name}}</div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2430,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "1ee609a426b1e679",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "53ba58bbd5a0e3ec",
        "name": "aliveSig",
        "order": 2,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Last Alive Signal</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload.lastAliveSignal}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2440,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "3d01dfcbc0f070af",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "53ba58bbd5a0e3ec",
        "name": "protocol",
        "order": 3,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Protocol Type</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload.protocolType}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2440,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "7ccee5189465e14f",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "53ba58bbd5a0e3ec",
        "name": "catchment",
        "order": 4,
        "width": 7,
        "height": 2,
        "format": "<style>\n.sensor-box {\n    background-color: #f9f9f9; /* Light background color */\n    border-radius: 15px; /* Rounded corners */\n    padding: 15px;\n    width: 300px; /* Adjust the width as needed */\n    height: 100px; /* Adjust the height as needed */\n    font-family: 'Poppins', sans-serif;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: center; /* Center content horizontally */\n    position: relative;\n    box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    border: 2px solid rgba(75, 192, 192, 1); /* Border color */\n    box-sizing: border-box; /* Include padding and border in element's total width and height */\n    margin: 0 auto; /* Center the card within its container */\n}\n\n.sensor-key {\n    font-size: 12px; /* Smaller font size for keys */\n    font-weight: bold;\n    color: #333; /* Dark text color for visibility on light background */\n    text-align: center;\n    width: 100%;\n}\n\n.divider {\n    width: 80%; /* Slim line width */\n    height: 1px; /* Slim line height */\n    background-color: #ccc; /* Ash-colored line */\n    margin: 5px 0 15px 0; /* Spacing around the line */\n}\n\n.sensor-value {\n    font-size: 15px; /* Font size for values */\n    font-weight: bold;\n    text-align: center; /* Center-align the text */\n    width: 100%; /* Ensure the text takes up the full width */\n}\n\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Catchment</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload.catchment}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2450,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "105437dcd6a9bd0d",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "97bdce66f3a73610",
        "name": "name",
        "order": 1,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9;\n        /* Light background color */\n        border-radius: 15px;\n        /* Rounded corners */\n        padding: 15px;\n        width: 300px;\n        /* Adjust the width as needed */\n        height: auto;\n        /* Allow height to adjust based on content */\n        max-height: 150px;\n        /* Set a maximum height */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center;\n        /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);\n        /* Optional: shadow effect */\n        overflow: hidden;\n        /* Hide overflow */\n    }\n\n    .sensor-key {\n        font-size: 12px;\n        /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333;\n        /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n        white-space: nowrap;\n        /* Prevent text wrapping */\n        overflow: hidden;\n        /* Hide overflow */\n        text-overflow: ellipsis;\n        /* Show ellipsis for overflow text */\n    }\n\n    .divider {\n        width: 80%;\n        /* Slim line width */\n        height: 1px;\n        /* Slim line height */\n        background-color: #ccc;\n        /* Ash-colored line */\n        margin: 5px 0 15px 0;\n        /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px;\n        /* Font size for values */\n        font-weight: bold;\n        text-align: center;\n        /* Center-align the text */\n        width: 100%;\n        /* Ensure the text takes up the full width */\n        white-space: nowrap;\n        /* Prevent text wrapping */\n        overflow: hidden;\n        /* Hide overflow */\n        text-overflow: ellipsis;\n        /* Show ellipsis for overflow text */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\" title=\"name\">Sensor Name</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\" title=\"{{msg.payload.name}}\">{{msg.payload.name}}</div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2430,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "241a465689436899",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "97bdce66f3a73610",
        "name": "aliveSig",
        "order": 2,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Last Alive Signal</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload.lastAliveSignal}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2440,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "7ef101cd62eb148d",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "97bdce66f3a73610",
        "name": "protocol",
        "order": 3,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Protocol Type</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload.protocolType}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2440,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "8780af59ac1ce9a9",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "97bdce66f3a73610",
        "name": "catchment",
        "order": 4,
        "width": 7,
        "height": 2,
        "format": "<style>\n.sensor-box {\n    background-color: #f9f9f9; /* Light background color */\n    border-radius: 15px; /* Rounded corners */\n    padding: 15px;\n    width: 300px; /* Adjust the width as needed */\n    height: 100px; /* Adjust the height as needed */\n    font-family: 'Poppins', sans-serif;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: center; /* Center content horizontally */\n    position: relative;\n    box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    border: 2px solid rgba(75, 192, 192, 0.2); /* Border color */\n    box-sizing: border-box; /* Include padding and border in element's total width and height */\n    margin: 0 auto; /* Center the card within its container */\n}\n\n.sensor-key {\n    font-size: 12px; /* Smaller font size for keys */\n    font-weight: bold;\n    color: #333; /* Dark text color for visibility on light background */\n    text-align: center;\n    width: 100%;\n}\n\n.divider {\n    width: 80%; /* Slim line width */\n    height: 1px; /* Slim line height */\n    background-color: #ccc; /* Ash-colored line */\n    margin: 5px 0 15px 0; /* Spacing around the line */\n}\n\n.sensor-value {\n    font-size: 15px; /* Font size for values */\n    font-weight: bold;\n    text-align: center; /* Center-align the text */\n    width: 100%; /* Ensure the text takes up the full width */\n}\n\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Catchment</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload.catchment}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2450,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "243b51a52754176f",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "extract",
        "func": "// Extract the result object from the incoming message payload\nmsg.payload = msg.payload.data.result;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 560,
        "wires": [
            [
                "93c03383ad954081",
                "ad2b404f246011a9"
            ]
        ]
    },
    {
        "id": "ad2b404f246011a9",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "data",
        "func": "// Assuming the structure provided in msg.payload\nlet data = msg.payload[0].data;\n\n// Create a new array to store the extracted values with converted timestamps\nlet extractedData = data.map(item => {\n    return {\n        time: new Date(item.end).toLocaleString(), // Convert the timestamp to a readable format\n        value: item.value,\n    };\n});\n\n// Set the extracted data as the new msg.payload\nmsg.payload = extractedData;\n\n// Return the message object\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 600,
        "wires": [
            [
                "7d4984dd47039786"
            ]
        ]
    },
    {
        "id": "93c03383ad954081",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "function 670",
        "func": "// Access the first object in the array\nlet device = msg.payload[0];\n\n// Extract the required fields\nlet name = device.name;\nlet protocolType = device.protocolType;\nlet type = device.type;\nlet lastAliveSignal = new Date(device.lastAliveSignal).toLocaleString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true\n});\nlet catchment = device.catchment;\n// Build the new payload\nmsg.payload = {\n    name: name,\n    protocolType: protocolType,\n    type: type,\n    lastAliveSignal: lastAliveSignal,\n    catchment: catchment\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 500,
        "wires": [
            [
                "0e70e71c9cf8f07b",
                "1ee609a426b1e679",
                "3d01dfcbc0f070af",
                "7ccee5189465e14f"
            ]
        ]
    },
    {
        "id": "22d543adff5532a9",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "extract",
        "func": "// Extract the result object from the incoming message payload\nmsg.payload = msg.payload.data.result;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 760,
        "wires": [
            [
                "236c0afe549642a3",
                "ce9a5e8483b4a30c"
            ]
        ]
    },
    {
        "id": "236c0afe549642a3",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "function 671",
        "func": "// Access the first object in the array\nlet device = msg.payload[0];\n\n// Extract the required fields\nlet name = device.name;\nlet protocolType = device.protocolType;\nlet type = device.type;\nlet lastAliveSignal = new Date(device.lastAliveSignal).toLocaleString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true\n});\nlet catchment = device.catchment;\n// Build the new payload\nmsg.payload = {\n    name: name,\n    protocolType: protocolType,\n    type: type,\n    lastAliveSignal: lastAliveSignal,\n    catchment: catchment\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 700,
        "wires": [
            [
                "105437dcd6a9bd0d",
                "241a465689436899",
                "7ef101cd62eb148d",
                "8780af59ac1ce9a9"
            ]
        ]
    },
    {
        "id": "ce9a5e8483b4a30c",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "data",
        "func": "// Assuming the structure provided in msg.payload\nlet data = msg.payload[0].data;\n\n// Create a new array to store the extracted values with converted timestamps\nlet extractedData = data.map(item => {\n    return {\n        time: new Date(item.end).toLocaleString(), // Convert the timestamp to a readable format\n        value: item.value,\n    };\n});\n\n// Set the extracted data as the new msg.payload\nmsg.payload = extractedData;\n\n// Return the message object\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 800,
        "wires": [
            [
                "9a6d47a08add3ad7"
            ]
        ]
    },
    {
        "id": "9a6d47a08add3ad7",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "97bdce66f3a73610",
        "name": "test",
        "order": 5,
        "width": 14,
        "height": 8,
        "format": "<!-- Load Chart.js library -->\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n\n<div style=\"width: 100%; height: 400px;\">\n    <canvas id=\"rainBarChart3\" style=\"height: 100%;\"></canvas>\n</div>\n\n<script>\n(function(scope) {\n    // Initialize the chart\n    let ctx3 = document.getElementById('rainBarChart3').getContext('2d');\n\n    // Placeholder for the chart instance\n    let rainChart3;\n\n    // Function to create the chart\n    function createChart(data) {\n        // If chart already exists, destroy it before creating a new one\n        if (rainChart3) {\n            rainChart3.destroy();\n        }\n\n        let labels = data.map(item => {\n            let date = new Date(item.time);\n            return date.toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'});\n        });\n\n        let values = data.map(item => item.value);\n\n        // Create the chart\n        rainChart3 = new Chart(ctx3, {\n            type: 'bar',\n            data: {\n                labels: labels,\n                datasets: [{\n                    label: 'Sensor Values (mm/h)',\n                    data: values,\n                    backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                },\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        display: true\n                    },\n                    tooltip: {\n                        callbacks: {\n                            label: function(context) {\n                                let date = new Date(data[context.dataIndex].time);\n                                let formattedDate = date.toLocaleString();\n                                return 'Value: ' + context.parsed.y + ', Time: ' + formattedDate;\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    // Watch for new incoming messages\n    scope.$watch('msg.payload', function(data) {\n        if (data && Array.isArray(data)) {\n            createChart(data);\n        }\n    });\n\n})(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2430,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "7d4984dd47039786",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "53ba58bbd5a0e3ec",
        "name": "test",
        "order": 5,
        "width": 14,
        "height": 8,
        "format": "<!-- Load Chart.js library -->\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n\n<div style=\"width: 100%; height: 400px;\">\n    <canvas id=\"rainBarChart2\" style=\"height: 100%;\"></canvas>\n</div>\n\n<script>\n(function(scope) {\n    // Initialize the chart\n    let ctx2 = document.getElementById('rainBarChart2').getContext('2d');\n\n    // Placeholder for the chart instance\n    let rainChart2;\n\n    // Function to create the chart\n    function createChart(data) {\n        // If chart already exists, destroy it before creating a new one\n        if (rainChart2) {\n            rainChart2.destroy();\n        }\n\n        let labels = data.map(item => {\n            let date = new Date(item.time);\n            return date.toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'});\n        });\n\n        let values = data.map(item => item.value);\n\n        // Create the chart\n        rainChart2 = new Chart(ctx2, {\n            type: 'bar',\n            data: {\n                labels: labels,\n                datasets: [{\n                    label: 'Sensor Values (mm/h)',\n                    data: values,\n                    backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                },\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        display: true\n                    },\n                    tooltip: {\n                        callbacks: {\n                            label: function(context) {\n                                let date = new Date(data[context.dataIndex].time);\n                                let formattedDate = date.toLocaleString();\n                                return 'Value: ' + context.parsed.y + ', Time: ' + formattedDate;\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    // Watch for new incoming messages\n    scope.$watch('msg.payload', function(data) {\n        if (data && Array.isArray(data)) {\n            createChart(data);\n        }\n    });\n\n})(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2430,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "7357fd1c140de34f",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "extract",
        "func": "// Extract the result object from the incoming message payload\nmsg.payload = msg.payload.data.result;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 980,
        "wires": [
            [
                "f86cdeecbd11d68c",
                "21d5f8d3c9e3cc39"
            ]
        ]
    },
    {
        "id": "21d5f8d3c9e3cc39",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "data",
        "func": "// Assuming the structure provided in msg.payload\nlet data = msg.payload[0].data;\n\n// Create a new array to store the extracted values with converted timestamps\nlet extractedData = data.map(item => {\n    return {\n        time: new Date(item.end).toLocaleString(), // Convert the timestamp to a readable format\n        value: item.value,\n    };\n});\n\n// Set the extracted data as the new msg.payload\nmsg.payload = extractedData;\n\n// Return the message object\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 1020,
        "wires": [
            [
                "1afb4e6eedccbe75"
            ]
        ]
    },
    {
        "id": "f86cdeecbd11d68c",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "function 672",
        "func": "// Access the first object in the array\nlet device = msg.payload[0];\n\n// Extract the required fields\nlet name = device.name;\nlet protocolType = device.protocolType;\nlet type = device.type;\nlet lastAliveSignal = new Date(device.lastAliveSignal).toLocaleString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true\n});\nlet catchment = device.catchment;\n// Build the new payload\nmsg.payload = {\n    name: name,\n    protocolType: protocolType,\n    type: type,\n    lastAliveSignal: lastAliveSignal,\n    catchment: catchment\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 920,
        "wires": [
            [
                "37cf9ba68b639a08",
                "5c5ee16fce76cad5",
                "554835e7579f8d8c",
                "0c5ceed47b8891b8"
            ]
        ]
    },
    {
        "id": "d232b6be54ddf252",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "extract",
        "func": "// Extract the result object from the incoming message payload\nmsg.payload = msg.payload.data.result;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 1180,
        "wires": [
            [
                "db74071fc8d9f42e",
                "b1360bccef68e766"
            ]
        ]
    },
    {
        "id": "b1360bccef68e766",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "data",
        "func": "// Assuming the structure provided in msg.payload\nlet data = msg.payload[0].data;\n\n// Create a new array to store the extracted values with converted timestamps\nlet extractedData = data.map(item => {\n    return {\n        time: new Date(item.end).toLocaleString(), // Convert the timestamp to a readable format\n        value: item.value,\n    };\n});\n\n// Set the extracted data as the new msg.payload\nmsg.payload = extractedData;\n\n// Return the message object\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 1220,
        "wires": [
            [
                "10f4e2d622491990"
            ]
        ]
    },
    {
        "id": "db74071fc8d9f42e",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "function 673",
        "func": "// Access the first object in the array\nlet device = msg.payload[0];\n\n// Extract the required fields\nlet name = device.name;\nlet protocolType = device.protocolType;\nlet type = device.type;\nlet lastAliveSignal = new Date(device.lastAliveSignal).toLocaleString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true\n});\nlet catchment = device.catchment;\n// Build the new payload\nmsg.payload = {\n    name: name,\n    protocolType: protocolType,\n    type: type,\n    lastAliveSignal: lastAliveSignal,\n    catchment: catchment\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 1120,
        "wires": [
            [
                "38d3a573c7950ffb",
                "d4edd102f21a102e",
                "af149b52f4fe3dde",
                "5744d8197db1f954"
            ]
        ]
    },
    {
        "id": "d5e7d2b905e58b86",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "extract",
        "func": "// Extract the result object from the incoming message payload\nmsg.payload = msg.payload.data.result;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 1380,
        "wires": [
            [
                "71b428ba14086881",
                "f236e530b25765b6"
            ]
        ]
    },
    {
        "id": "f236e530b25765b6",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "data",
        "func": "// Assuming the structure provided in msg.payload\nlet data = msg.payload[0].data;\n\n// Create a new array to store the extracted values with converted timestamps\nlet extractedData = data.map(item => {\n    return {\n        time: new Date(item.end).toLocaleString(), // Convert the timestamp to a readable format\n        value: item.value,\n    };\n});\n\n// Set the extracted data as the new msg.payload\nmsg.payload = extractedData;\n\n// Return the message object\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 1420,
        "wires": [
            [
                "39ea6c40ba76c7ed"
            ]
        ]
    },
    {
        "id": "71b428ba14086881",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "function 674",
        "func": "// Access the first object in the array\nlet device = msg.payload[0];\n\n// Extract the required fields\nlet name = device.name;\nlet protocolType = device.protocolType;\nlet type = device.type;\nlet lastAliveSignal = new Date(device.lastAliveSignal).toLocaleString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true\n});\nlet catchment = device.catchment;\n// Build the new payload\nmsg.payload = {\n    name: name,\n    protocolType: protocolType,\n    type: type,\n    lastAliveSignal: lastAliveSignal,\n    catchment: catchment\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 1320,
        "wires": [
            [
                "2fd127504cdd8e6a",
                "18ea98f60ba6ac3a",
                "7f37dab2f27afd41",
                "79e7136e124b538a"
            ]
        ]
    },
    {
        "id": "2a00a25b17bf3326",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "extract",
        "func": "// Extract the result object from the incoming message payload\nmsg.payload = msg.payload.data.result;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 1600,
        "wires": [
            [
                "ed86cf6a7264a0df",
                "a231ff4ef19ebba8"
            ]
        ]
    },
    {
        "id": "a231ff4ef19ebba8",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "data",
        "func": "// Assuming the structure provided in msg.payload\nlet data = msg.payload[0].data;\n\n// Create a new array to store the extracted values with converted timestamps\nlet extractedData = data.map(item => {\n    return {\n        time: new Date(item.end).toLocaleString(), // Convert the timestamp to a readable format\n        value: item.value,\n    };\n});\n\n// Set the extracted data as the new msg.payload\nmsg.payload = extractedData;\n\n// Return the message object\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 1640,
        "wires": [
            [
                "086b5000fbf93e4e"
            ]
        ]
    },
    {
        "id": "ed86cf6a7264a0df",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "function 675",
        "func": "// Access the first object in the array\nlet device = msg.payload[0];\n\n// Extract the required fields\nlet name = device.name;\nlet protocolType = device.protocolType;\nlet type = device.type;\nlet lastAliveSignal = new Date(device.lastAliveSignal).toLocaleString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true\n});\nlet catchment = device.catchment;\n// Build the new payload\nmsg.payload = {\n    name: name,\n    protocolType: protocolType,\n    type: type,\n    lastAliveSignal: lastAliveSignal,\n    catchment: catchment\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 1540,
        "wires": [
            [
                "5d3492a76f2c9b1f",
                "b5b0ea54b2d12a3d",
                "0cccf7050b3b2434",
                "1aec6ed67df7f709"
            ]
        ]
    },
    {
        "id": "22711a8eebfe5b5f",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "extract",
        "func": "// Extract the result object from the incoming message payload\nmsg.payload = msg.payload.data.result;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 1800,
        "wires": [
            [
                "62c136085b7e1680",
                "8a96cd25a0e076a4"
            ]
        ]
    },
    {
        "id": "8a96cd25a0e076a4",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "data",
        "func": "// Assuming the structure provided in msg.payload\nlet data = msg.payload[0].data;\n\n// Create a new array to store the extracted values with converted timestamps\nlet extractedData = data.map(item => {\n    return {\n        time: new Date(item.end).toLocaleString(), // Convert the timestamp to a readable format\n        value: item.value,\n    };\n});\n\n// Set the extracted data as the new msg.payload\nmsg.payload = extractedData;\n\n// Return the message object\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 1840,
        "wires": [
            [
                "95490c8074bc077d"
            ]
        ]
    },
    {
        "id": "62c136085b7e1680",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "function 676",
        "func": "// Access the first object in the array\nlet device = msg.payload[0];\n\n// Extract the required fields\nlet name = device.name;\nlet protocolType = device.protocolType;\nlet type = device.type;\nlet lastAliveSignal = new Date(device.lastAliveSignal).toLocaleString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true\n});\nlet catchment = device.catchment;\n// Build the new payload\nmsg.payload = {\n    name: name,\n    protocolType: protocolType,\n    type: type,\n    lastAliveSignal: lastAliveSignal,\n    catchment: catchment\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 1740,
        "wires": [
            [
                "0459384673751ffe",
                "bdacbe6f3a0b427d",
                "d9425bd0404dc757",
                "2f6410490d0be5af"
            ]
        ]
    },
    {
        "id": "bedc191d2c440583",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "extract",
        "func": "// Extract the result object from the incoming message payload\nmsg.payload = msg.payload.data.result;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 2000,
        "wires": [
            [
                "47bbb01dd1e86d7a",
                "09b5d629513abf7c"
            ]
        ]
    },
    {
        "id": "09b5d629513abf7c",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "data",
        "func": "// Assuming the structure provided in msg.payload\nlet data = msg.payload[0].data;\n\n// Create a new array to store the extracted values with converted timestamps\nlet extractedData = data.map(item => {\n    return {\n        time: new Date(item.end).toLocaleString(), // Convert the timestamp to a readable format\n        value: item.value,\n    };\n});\n\n// Set the extracted data as the new msg.payload\nmsg.payload = extractedData;\n\n// Return the message object\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 2040,
        "wires": [
            [
                "55228e888a1234d0"
            ]
        ]
    },
    {
        "id": "47bbb01dd1e86d7a",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "function 677",
        "func": "// Access the first object in the array\nlet device = msg.payload[0];\n\n// Extract the required fields\nlet name = device.name;\nlet protocolType = device.protocolType;\nlet type = device.type;\nlet lastAliveSignal = new Date(device.lastAliveSignal).toLocaleString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true\n});\nlet catchment = device.catchment;\n// Build the new payload\nmsg.payload = {\n    name: name,\n    protocolType: protocolType,\n    type: type,\n    lastAliveSignal: lastAliveSignal,\n    catchment: catchment\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 1940,
        "wires": [
            [
                "b503bf75352baceb",
                "2cf54fab44f098af",
                "7018926e630fa918",
                "cdf970f54116bfd2"
            ]
        ]
    },
    {
        "id": "db3e7065be3fca51",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "extract",
        "func": "// Extract the result object from the incoming message payload\nmsg.payload = msg.payload.data.result;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 2200,
        "wires": [
            [
                "98ae8c86690a8058",
                "65bed52513acda65"
            ]
        ]
    },
    {
        "id": "65bed52513acda65",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "data",
        "func": "// Assuming the structure provided in msg.payload\nlet data = msg.payload[0].data;\n\n// Create a new array to store the extracted values with converted timestamps\nlet extractedData = data.map(item => {\n    return {\n        time: new Date(item.end).toLocaleString(), // Convert the timestamp to a readable format\n        value: item.value,\n    };\n});\n\n// Set the extracted data as the new msg.payload\nmsg.payload = extractedData;\n\n// Return the message object\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 2240,
        "wires": [
            [
                "89a50b36df291a4e"
            ]
        ]
    },
    {
        "id": "98ae8c86690a8058",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "function 678",
        "func": "// Access the first object in the array\nlet device = msg.payload[0];\n\n// Extract the required fields\nlet name = device.name;\nlet protocolType = device.protocolType;\nlet type = device.type;\nlet lastAliveSignal = new Date(device.lastAliveSignal).toLocaleString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true\n});\nlet catchment = device.catchment;\n// Build the new payload\nmsg.payload = {\n    name: name,\n    protocolType: protocolType,\n    type: type,\n    lastAliveSignal: lastAliveSignal,\n    catchment: catchment\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 2140,
        "wires": [
            [
                "39829acd2f2f57d3",
                "74b1727069754832",
                "b5f7ea3343859a48",
                "36a778656ebc7b8e"
            ]
        ]
    },
    {
        "id": "37cf9ba68b639a08",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "bcafd918d66f900b",
        "name": "name",
        "order": 1,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9;\n        /* Light background color */\n        border-radius: 15px;\n        /* Rounded corners */\n        padding: 15px;\n        width: 300px;\n        /* Adjust the width as needed */\n        height: auto;\n        /* Allow height to adjust based on content */\n        max-height: 150px;\n        /* Set a maximum height */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center;\n        /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);\n        /* Optional: shadow effect */\n        overflow: hidden;\n        /* Hide overflow */\n    }\n\n    .sensor-key {\n        font-size: 12px;\n        /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333;\n        /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n        white-space: nowrap;\n        /* Prevent text wrapping */\n        overflow: hidden;\n        /* Hide overflow */\n        text-overflow: ellipsis;\n        /* Show ellipsis for overflow text */\n    }\n\n    .divider {\n        width: 80%;\n        /* Slim line width */\n        height: 1px;\n        /* Slim line height */\n        background-color: #ccc;\n        /* Ash-colored line */\n        margin: 5px 0 15px 0;\n        /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px;\n        /* Font size for values */\n        font-weight: bold;\n        text-align: center;\n        /* Center-align the text */\n        width: 100%;\n        /* Ensure the text takes up the full width */\n        white-space: nowrap;\n        /* Prevent text wrapping */\n        overflow: hidden;\n        /* Hide overflow */\n        text-overflow: ellipsis;\n        /* Show ellipsis for overflow text */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\" title=\"name\">Sensor Name</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\" title=\"{{msg.payload.name}}\">{{msg.payload.name}}</div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2430,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "5c5ee16fce76cad5",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "bcafd918d66f900b",
        "name": "aliveSig",
        "order": 2,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Last Alive Signal</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload.lastAliveSignal}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2440,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "554835e7579f8d8c",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "bcafd918d66f900b",
        "name": "protocol",
        "order": 3,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Protocol Type</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload.protocolType}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2440,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "0c5ceed47b8891b8",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "bcafd918d66f900b",
        "name": "catchment",
        "order": 4,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Catchment</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload.catchment}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2450,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "1afb4e6eedccbe75",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "bcafd918d66f900b",
        "name": "test",
        "order": 5,
        "width": 28,
        "height": 8,
        "format": "<!-- Load Chart.js library -->\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n\n<div style=\"width: 100%; height: 400px;\">\n    <canvas id=\"rainBarChart4\" style=\"height: 100%;\"></canvas>\n</div>\n\n<script>\n(function(scope) {\n    // Initialize the chart\n    let ctx4 = document.getElementById('rainBarChart4').getContext('2d');\n\n    // Placeholder for the chart instance\n    let rainChart4;\n\n    // Function to create the chart\n    function createChart(data) {\n        // If chart already exists, destroy it before creating a new one\n        if (rainChart4) {\n            rainChart4.destroy();\n        }\n\n        let labels = data.map(item => {\n            let date = new Date(item.time);\n            return date.toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'});\n        });\n\n        let values = data.map(item => item.value);\n\n        // Create the chart\n        rainChart4 = new Chart(ctx4, {\n            type: 'bar',\n            data: {\n                labels: labels,\n                datasets: [{\n                    label: 'Sensor Values (mm/h)',\n                    data: values,\n                    backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                },\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        display: true\n                    },\n                    tooltip: {\n                        callbacks: {\n                            label: function(context) {\n                                let date = new Date(data[context.dataIndex].time);\n                                let formattedDate = date.toLocaleString();\n                                return 'Value: ' + context.parsed.y + ', Time: ' + formattedDate;\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    // Watch for new incoming messages\n    scope.$watch('msg.payload', function(data) {\n        if (data && Array.isArray(data)) {\n            createChart(data);\n        }\n    });\n\n})(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2430,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "38d3a573c7950ffb",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "09275a5a07d1edaf",
        "name": "name",
        "order": 1,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9;\n        /* Light background color */\n        border-radius: 15px;\n        /* Rounded corners */\n        padding: 15px;\n        width: 300px;\n        /* Adjust the width as needed */\n        height: auto;\n        /* Allow height to adjust based on content */\n        max-height: 150px;\n        /* Set a maximum height */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center;\n        /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);\n        /* Optional: shadow effect */\n        overflow: hidden;\n        /* Hide overflow */\n    }\n\n    .sensor-key {\n        font-size: 12px;\n        /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333;\n        /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n        white-space: nowrap;\n        /* Prevent text wrapping */\n        overflow: hidden;\n        /* Hide overflow */\n        text-overflow: ellipsis;\n        /* Show ellipsis for overflow text */\n    }\n\n    .divider {\n        width: 80%;\n        /* Slim line width */\n        height: 1px;\n        /* Slim line height */\n        background-color: #ccc;\n        /* Ash-colored line */\n        margin: 5px 0 15px 0;\n        /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px;\n        /* Font size for values */\n        font-weight: bold;\n        text-align: center;\n        /* Center-align the text */\n        width: 100%;\n        /* Ensure the text takes up the full width */\n        white-space: nowrap;\n        /* Prevent text wrapping */\n        overflow: hidden;\n        /* Hide overflow */\n        text-overflow: ellipsis;\n        /* Show ellipsis for overflow text */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\" title=\"name\">Sensor Name</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\" title=\"{{msg.payload.name}}\">{{msg.payload.name}}</div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2430,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "d4edd102f21a102e",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "09275a5a07d1edaf",
        "name": "aliveSig",
        "order": 2,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Last Alive Signal</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload.lastAliveSignal}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2440,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "af149b52f4fe3dde",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "09275a5a07d1edaf",
        "name": "protocol",
        "order": 3,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Protocol Type</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload.protocolType}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2440,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "5744d8197db1f954",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "09275a5a07d1edaf",
        "name": "catchment",
        "order": 4,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Catchment</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload.catchment}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2450,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "10f4e2d622491990",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "09275a5a07d1edaf",
        "name": "test",
        "order": 5,
        "width": 14,
        "height": 8,
        "format": "<!-- Load Chart.js library -->\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n\n<div style=\"width: 100%; height: 400px;\">\n    <canvas id=\"rainBarChart5\" style=\"height: 100%;\"></canvas>\n</div>\n\n<script>\n(function(scope) {\n    // Initialize the chart\n    let ctx5 = document.getElementById('rainBarChart5').getContext('2d');\n\n    // Placeholder for the chart instance\n    let rainChart5;\n\n    // Function to create the chart\n    function createChart(data) {\n        // If chart already exists, destroy it before creating a new one\n        if (rainChart5) {\n            rainChart5.destroy();\n        }\n\n        let labels = data.map(item => {\n            let date = new Date(item.time);\n            return date.toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'});\n        });\n\n        let values = data.map(item => item.value);\n\n        // Create the chart\n        rainChart5 = new Chart(ctx5, {\n            type: 'bar',\n            data: {\n                labels: labels,\n                datasets: [{\n                    label: 'Sensor Values (mm/h)',\n                    data: values,\n                    backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                },\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        display: true\n                    },\n                    tooltip: {\n                        callbacks: {\n                            label: function(context) {\n                                let date = new Date(data[context.dataIndex].time);\n                                let formattedDate = date.toLocaleString();\n                                return 'Value: ' + context.parsed.y + ', Time: ' + formattedDate;\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    // Watch for new incoming messages\n    scope.$watch('msg.payload', function(data) {\n        if (data && Array.isArray(data)) {\n            createChart(data);\n        }\n    });\n\n})(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2430,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "2fd127504cdd8e6a",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "1073af88d25793d2",
        "name": "name",
        "order": 1,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9;\n        /* Light background color */\n        border-radius: 15px;\n        /* Rounded corners */\n        padding: 15px;\n        width: 300px;\n        /* Adjust the width as needed */\n        height: auto;\n        /* Allow height to adjust based on content */\n        max-height: 150px;\n        /* Set a maximum height */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center;\n        /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);\n        /* Optional: shadow effect */\n        overflow: hidden;\n        /* Hide overflow */\n    }\n\n    .sensor-key {\n        font-size: 12px;\n        /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333;\n        /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n        white-space: nowrap;\n        /* Prevent text wrapping */\n        overflow: hidden;\n        /* Hide overflow */\n        text-overflow: ellipsis;\n        /* Show ellipsis for overflow text */\n    }\n\n    .divider {\n        width: 80%;\n        /* Slim line width */\n        height: 1px;\n        /* Slim line height */\n        background-color: #ccc;\n        /* Ash-colored line */\n        margin: 5px 0 15px 0;\n        /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px;\n        /* Font size for values */\n        font-weight: bold;\n        text-align: center;\n        /* Center-align the text */\n        width: 100%;\n        /* Ensure the text takes up the full width */\n        white-space: nowrap;\n        /* Prevent text wrapping */\n        overflow: hidden;\n        /* Hide overflow */\n        text-overflow: ellipsis;\n        /* Show ellipsis for overflow text */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\" title=\"name\">Sensor Name</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\" title=\"{{msg.payload.name}}\">{{msg.payload.name}}</div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2430,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "18ea98f60ba6ac3a",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "1073af88d25793d2",
        "name": "aliveSig",
        "order": 2,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Last Alive Signal</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload.lastAliveSignal}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2440,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "7f37dab2f27afd41",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "1073af88d25793d2",
        "name": "protocol",
        "order": 3,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Protocol Type</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload.protocolType}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2440,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "79e7136e124b538a",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "1073af88d25793d2",
        "name": "catchment",
        "order": 4,
        "width": 7,
        "height": 2,
        "format": "<style>\n.sensor-box {\n    background-color: #f9f9f9; /* Light background color */\n    border-radius: 15px; /* Rounded corners */\n    padding: 15px;\n    width: 300px; /* Adjust the width as needed */\n    height: 100px; /* Adjust the height as needed */\n    font-family: 'Poppins', sans-serif;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: center; /* Center content horizontally */\n    position: relative;\n    box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    border: 2px solid rgba(75, 192, 192, 0.2); /* Border color */\n    box-sizing: border-box; /* Include padding and border in element's total width and height */\n    margin: 0 auto; /* Center the card within its container */\n}\n\n.sensor-key {\n    font-size: 12px; /* Smaller font size for keys */\n    font-weight: bold;\n    color: #333; /* Dark text color for visibility on light background */\n    text-align: center;\n    width: 100%;\n}\n\n.divider {\n    width: 80%; /* Slim line width */\n    height: 1px; /* Slim line height */\n    background-color: #ccc; /* Ash-colored line */\n    margin: 5px 0 15px 0; /* Spacing around the line */\n}\n\n.sensor-value {\n    font-size: 15px; /* Font size for values */\n    font-weight: bold;\n    text-align: center; /* Center-align the text */\n    width: 100%; /* Ensure the text takes up the full width */\n}\n\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Catchment</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload.catchment}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2450,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "39ea6c40ba76c7ed",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "1073af88d25793d2",
        "name": "test",
        "order": 5,
        "width": 14,
        "height": 8,
        "format": "<!-- Load Chart.js library -->\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n\n<div style=\"width: 100%; height: 400px;\">\n    <canvas id=\"rainBarChart6\" style=\"height: 100%;\"></canvas>\n</div>\n\n<script>\n(function(scope) {\n    // Initialize the chart\n    let ctx6 = document.getElementById('rainBarChart6').getContext('2d');\n\n    // Placeholder for the chart instance\n    let rainChart6;\n\n    // Function to create the chart\n    function createChart(data) {\n        // If chart already exists, destroy it before creating a new one\n        if (rainChart6) {\n            rainChart6.destroy();\n        }\n\n        let labels = data.map(item => {\n            let date = new Date(item.time);\n            return date.toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'});\n        });\n\n        let values = data.map(item => item.value);\n\n        // Create the chart\n        rainChart6 = new Chart(ctx6, {\n            type: 'bar',\n            data: {\n                labels: labels,\n                datasets: [{\n                    label: 'Sensor Values (mm/h)',\n                    data: values,\n                    backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                },\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        display: true\n                    },\n                    tooltip: {\n                        callbacks: {\n                            label: function(context) {\n                                let date = new Date(data[context.dataIndex].time);\n                                let formattedDate = date.toLocaleString();\n                                return 'Value: ' + context.parsed.y + ', Time: ' + formattedDate;\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    // Watch for new incoming messages\n    scope.$watch('msg.payload', function(data) {\n        if (data && Array.isArray(data)) {\n            createChart(data);\n        }\n    });\n\n})(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2430,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "5d3492a76f2c9b1f",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "47179df655afd537",
        "name": "name",
        "order": 1,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9;\n        /* Light background color */\n        border-radius: 15px;\n        /* Rounded corners */\n        padding: 15px;\n        width: 300px;\n        /* Adjust the width as needed */\n        height: auto;\n        /* Allow height to adjust based on content */\n        max-height: 150px;\n        /* Set a maximum height */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center;\n        /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);\n        /* Optional: shadow effect */\n        overflow: hidden;\n        /* Hide overflow */\n    }\n\n    .sensor-key {\n        font-size: 12px;\n        /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333;\n        /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n        white-space: nowrap;\n        /* Prevent text wrapping */\n        overflow: hidden;\n        /* Hide overflow */\n        text-overflow: ellipsis;\n        /* Show ellipsis for overflow text */\n    }\n\n    .divider {\n        width: 80%;\n        /* Slim line width */\n        height: 1px;\n        /* Slim line height */\n        background-color: #ccc;\n        /* Ash-colored line */\n        margin: 5px 0 15px 0;\n        /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px;\n        /* Font size for values */\n        font-weight: bold;\n        text-align: center;\n        /* Center-align the text */\n        width: 100%;\n        /* Ensure the text takes up the full width */\n        white-space: nowrap;\n        /* Prevent text wrapping */\n        overflow: hidden;\n        /* Hide overflow */\n        text-overflow: ellipsis;\n        /* Show ellipsis for overflow text */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\" title=\"name\">Sensor Name</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\" title=\"{{msg.payload.name}}\">{{msg.payload.name}}</div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2430,
        "y": 1480,
        "wires": [
            []
        ]
    },
    {
        "id": "b5b0ea54b2d12a3d",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "47179df655afd537",
        "name": "aliveSig",
        "order": 2,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Last Alive Signal</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload.lastAliveSignal}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2440,
        "y": 1520,
        "wires": [
            []
        ]
    },
    {
        "id": "0cccf7050b3b2434",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "47179df655afd537",
        "name": "protocol",
        "order": 3,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Protocol Type</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload.protocolType}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2440,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "1aec6ed67df7f709",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "47179df655afd537",
        "name": "catchment",
        "order": 4,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Catchment</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload.catchment}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2450,
        "y": 1600,
        "wires": [
            []
        ]
    },
    {
        "id": "086b5000fbf93e4e",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "47179df655afd537",
        "name": "test",
        "order": 5,
        "width": 14,
        "height": 8,
        "format": "<!-- Load Chart.js library -->\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n\n<div style=\"width: 100%; height: 400px;\">\n    <canvas id=\"rainBarChart7\" style=\"height: 100%;\"></canvas>\n</div>\n\n<script>\n(function(scope) {\n    // Initialize the chart\n    let ctx7 = document.getElementById('rainBarChart7').getContext('2d');\n\n    // Placeholder for the chart instance\n    let rainChart7;\n\n    // Function to create the chart\n    function createChart(data) {\n        // If chart already exists, destroy it before creating a new one\n        if (rainChart7) {\n            rainChart7.destroy();\n        }\n\n        let labels = data.map(item => {\n            let date = new Date(item.time);\n            return date.toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'});\n        });\n\n        let values = data.map(item => item.value);\n\n        // Create the chart\n        rainChart7 = new Chart(ctx7, {\n            type: 'bar',\n            data: {\n                labels: labels,\n                datasets: [{\n                    label: 'Sensor Values (mm/h)',\n                    data: values,\n                    backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                },\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        display: true\n                    },\n                    tooltip: {\n                        callbacks: {\n                            label: function(context) {\n                                let date = new Date(data[context.dataIndex].time);\n                                let formattedDate = date.toLocaleString();\n                                return 'Value: ' + context.parsed.y + ', Time: ' + formattedDate;\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    // Watch for new incoming messages\n    scope.$watch('msg.payload', function(data) {\n        if (data && Array.isArray(data)) {\n            createChart(data);\n        }\n    });\n\n})(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2430,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "0459384673751ffe",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "fa0352a6804d5547",
        "name": "name",
        "order": 1,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9;\n        /* Light background color */\n        border-radius: 15px;\n        /* Rounded corners */\n        padding: 15px;\n        width: 300px;\n        /* Adjust the width as needed */\n        height: auto;\n        /* Allow height to adjust based on content */\n        max-height: 150px;\n        /* Set a maximum height */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center;\n        /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);\n        /* Optional: shadow effect */\n        overflow: hidden;\n        /* Hide overflow */\n    }\n\n    .sensor-key {\n        font-size: 12px;\n        /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333;\n        /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n        white-space: nowrap;\n        /* Prevent text wrapping */\n        overflow: hidden;\n        /* Hide overflow */\n        text-overflow: ellipsis;\n        /* Show ellipsis for overflow text */\n    }\n\n    .divider {\n        width: 80%;\n        /* Slim line width */\n        height: 1px;\n        /* Slim line height */\n        background-color: #ccc;\n        /* Ash-colored line */\n        margin: 5px 0 15px 0;\n        /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px;\n        /* Font size for values */\n        font-weight: bold;\n        text-align: center;\n        /* Center-align the text */\n        width: 100%;\n        /* Ensure the text takes up the full width */\n        white-space: nowrap;\n        /* Prevent text wrapping */\n        overflow: hidden;\n        /* Hide overflow */\n        text-overflow: ellipsis;\n        /* Show ellipsis for overflow text */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\" title=\"name\">Sensor Name</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\" title=\"{{msg.payload.name}}\">{{msg.payload.name}}</div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2430,
        "y": 1680,
        "wires": [
            []
        ]
    },
    {
        "id": "bdacbe6f3a0b427d",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "fa0352a6804d5547",
        "name": "aliveSig",
        "order": 2,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Last Alive Signal</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload.lastAliveSignal}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2440,
        "y": 1720,
        "wires": [
            []
        ]
    },
    {
        "id": "d9425bd0404dc757",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "fa0352a6804d5547",
        "name": "protocol",
        "order": 3,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Protocol Type</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload.protocolType}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2440,
        "y": 1760,
        "wires": [
            []
        ]
    },
    {
        "id": "2f6410490d0be5af",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "fa0352a6804d5547",
        "name": "catchment",
        "order": 4,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Catchment</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload.catchment}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2450,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "95490c8074bc077d",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "fa0352a6804d5547",
        "name": "test",
        "order": 5,
        "width": 14,
        "height": 8,
        "format": "<!-- Load Chart.js library -->\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n\n<div style=\"width: 100%; height: 400px;\">\n    <canvas id=\"rainBarChart8\" style=\"height: 100%;\"></canvas>\n</div>\n\n<script>\n(function(scope) {\n    // Initialize the chart\n    let ctx8 = document.getElementById('rainBarChart8').getContext('2d');\n\n    // Placeholder for the chart instance\n    let rainChart8;\n\n    // Function to create the chart\n    function createChart(data) {\n        // If chart already exists, destroy it before creating a new one\n        if (rainChart8) {\n            rainChart8.destroy();\n        }\n\n        let labels = data.map(item => {\n            let date = new Date(item.time);\n            return date.toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'});\n        });\n\n        let values = data.map(item => item.value);\n\n        // Create the chart\n        rainChart8 = new Chart(ctx8, {\n            type: 'bar',\n            data: {\n                labels: labels,\n                datasets: [{\n                    label: 'Sensor Values (mm/h)',\n                    data: values,\n                    backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                },\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        display: true\n                    },\n                    tooltip: {\n                        callbacks: {\n                            label: function(context) {\n                                let date = new Date(data[context.dataIndex].time);\n                                let formattedDate = date.toLocaleString();\n                                return 'Value: ' + context.parsed.y + ', Time: ' + formattedDate;\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    // Watch for new incoming messages\n    scope.$watch('msg.payload', function(data) {\n        if (data && Array.isArray(data)) {\n            createChart(data);\n        }\n    });\n\n})(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2430,
        "y": 1840,
        "wires": [
            []
        ]
    },
    {
        "id": "b503bf75352baceb",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "dd23904b562f14af",
        "name": "name",
        "order": 1,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9;\n        /* Light background color */\n        border-radius: 15px;\n        /* Rounded corners */\n        padding: 15px;\n        width: 300px;\n        /* Adjust the width as needed */\n        height: auto;\n        /* Allow height to adjust based on content */\n        max-height: 150px;\n        /* Set a maximum height */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center;\n        /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);\n        /* Optional: shadow effect */\n        overflow: hidden;\n        /* Hide overflow */\n    }\n\n    .sensor-key {\n        font-size: 12px;\n        /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333;\n        /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n        white-space: nowrap;\n        /* Prevent text wrapping */\n        overflow: hidden;\n        /* Hide overflow */\n        text-overflow: ellipsis;\n        /* Show ellipsis for overflow text */\n    }\n\n    .divider {\n        width: 80%;\n        /* Slim line width */\n        height: 1px;\n        /* Slim line height */\n        background-color: #ccc;\n        /* Ash-colored line */\n        margin: 5px 0 15px 0;\n        /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px;\n        /* Font size for values */\n        font-weight: bold;\n        text-align: center;\n        /* Center-align the text */\n        width: 100%;\n        /* Ensure the text takes up the full width */\n        white-space: nowrap;\n        /* Prevent text wrapping */\n        overflow: hidden;\n        /* Hide overflow */\n        text-overflow: ellipsis;\n        /* Show ellipsis for overflow text */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\" title=\"name\">Sensor Name</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\" title=\"{{msg.payload.name}}\">{{msg.payload.name}}</div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2430,
        "y": 1880,
        "wires": [
            []
        ]
    },
    {
        "id": "2cf54fab44f098af",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "dd23904b562f14af",
        "name": "aliveSig",
        "order": 2,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Last Alive Signal</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload.lastAliveSignal}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2440,
        "y": 1920,
        "wires": [
            []
        ]
    },
    {
        "id": "7018926e630fa918",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "dd23904b562f14af",
        "name": "protocol",
        "order": 3,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Protocol Type</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload.protocolType}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2440,
        "y": 1960,
        "wires": [
            []
        ]
    },
    {
        "id": "cdf970f54116bfd2",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "dd23904b562f14af",
        "name": "catchment",
        "order": 4,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Catchment</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload.catchment}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2450,
        "y": 2000,
        "wires": [
            []
        ]
    },
    {
        "id": "55228e888a1234d0",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "dd23904b562f14af",
        "name": "test",
        "order": 5,
        "width": 14,
        "height": 8,
        "format": "<!-- Load Chart.js library -->\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n\n<div style=\"width: 100%; height: 400px;\">\n    <canvas id=\"rainBarChart9\" style=\"height: 100%;\"></canvas>\n</div>\n\n<script>\n(function(scope) {\n    // Initialize the chart\n    let ctx9 = document.getElementById('rainBarChart9').getContext('2d');\n\n    // Placeholder for the chart instance\n    let rainChart9;\n\n    // Function to create the chart\n    function createChart(data) {\n        // If chart already exists, destroy it before creating a new one\n        if (rainChart9) {\n            rainChart9.destroy();\n        }\n\n        let labels = data.map(item => {\n            let date = new Date(item.time);\n            return date.toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'});\n        });\n\n        let values = data.map(item => item.value);\n\n        // Create the chart\n        rainChart9 = new Chart(ctx9, {\n            type: 'bar',\n            data: {\n                labels: labels,\n                datasets: [{\n                    label: 'Sensor Values (mm/h)',\n                    data: values,\n                    backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                },\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        display: true\n                    },\n                    tooltip: {\n                        callbacks: {\n                            label: function(context) {\n                                let date = new Date(data[context.dataIndex].time);\n                                let formattedDate = date.toLocaleString();\n                                return 'Value: ' + context.parsed.y + ', Time: ' + formattedDate;\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    // Watch for new incoming messages\n    scope.$watch('msg.payload', function(data) {\n        if (data && Array.isArray(data)) {\n            createChart(data);\n        }\n    });\n\n})(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2430,
        "y": 2040,
        "wires": [
            []
        ]
    },
    {
        "id": "39829acd2f2f57d3",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "bf3fc684625c2252",
        "name": "name",
        "order": 1,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9;\n        /* Light background color */\n        border-radius: 15px;\n        /* Rounded corners */\n        padding: 15px;\n        width: 300px;\n        /* Adjust the width as needed */\n        height: auto;\n        /* Allow height to adjust based on content */\n        max-height: 150px;\n        /* Set a maximum height */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center;\n        /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);\n        /* Optional: shadow effect */\n        overflow: hidden;\n        /* Hide overflow */\n    }\n\n    .sensor-key {\n        font-size: 12px;\n        /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333;\n        /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n        white-space: nowrap;\n        /* Prevent text wrapping */\n        overflow: hidden;\n        /* Hide overflow */\n        text-overflow: ellipsis;\n        /* Show ellipsis for overflow text */\n    }\n\n    .divider {\n        width: 80%;\n        /* Slim line width */\n        height: 1px;\n        /* Slim line height */\n        background-color: #ccc;\n        /* Ash-colored line */\n        margin: 5px 0 15px 0;\n        /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px;\n        /* Font size for values */\n        font-weight: bold;\n        text-align: center;\n        /* Center-align the text */\n        width: 100%;\n        /* Ensure the text takes up the full width */\n        white-space: nowrap;\n        /* Prevent text wrapping */\n        overflow: hidden;\n        /* Hide overflow */\n        text-overflow: ellipsis;\n        /* Show ellipsis for overflow text */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\" title=\"name\">Sensor Name</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\" title=\"{{msg.payload.name}}\">{{msg.payload.name}}</div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2430,
        "y": 2080,
        "wires": [
            []
        ]
    },
    {
        "id": "74b1727069754832",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "bf3fc684625c2252",
        "name": "aliveSig",
        "order": 2,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Last Alive Signal</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload.lastAliveSignal}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2440,
        "y": 2120,
        "wires": [
            []
        ]
    },
    {
        "id": "b5f7ea3343859a48",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "bf3fc684625c2252",
        "name": "protocol",
        "order": 3,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Protocol Type</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload.protocolType}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2440,
        "y": 2160,
        "wires": [
            []
        ]
    },
    {
        "id": "36a778656ebc7b8e",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "bf3fc684625c2252",
        "name": "catchment",
        "order": 4,
        "width": 7,
        "height": 2,
        "format": "<style>\n.sensor-box {\n    background-color: #f9f9f9; /* Light background color */\n    border-radius: 15px; /* Rounded corners */\n    padding: 15px;\n    width: 300px; /* Adjust the width as needed */\n    height: 100px; /* Adjust the height as needed */\n    font-family: 'Poppins', sans-serif;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: center; /* Center content horizontally */\n    position: relative;\n    box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    border: 2px solid rgba(75, 192, 192, 0.2); /* Border color */\n    box-sizing: border-box; /* Include padding and border in element's total width and height */\n    margin: 0 auto; /* Center the card within its container */\n}\n\n.sensor-key {\n    font-size: 12px; /* Smaller font size for keys */\n    font-weight: bold;\n    color: #333; /* Dark text color for visibility on light background */\n    text-align: center;\n    width: 100%;\n}\n\n.divider {\n    width: 80%; /* Slim line width */\n    height: 1px; /* Slim line height */\n    background-color: #ccc; /* Ash-colored line */\n    margin: 5px 0 15px 0; /* Spacing around the line */\n}\n\n.sensor-value {\n    font-size: 15px; /* Font size for values */\n    font-weight: bold;\n    text-align: center; /* Center-align the text */\n    width: 100%; /* Ensure the text takes up the full width */\n}\n\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Catchment</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload.catchment}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2450,
        "y": 2200,
        "wires": [
            []
        ]
    },
    {
        "id": "89a50b36df291a4e",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "bf3fc684625c2252",
        "name": "test",
        "order": 5,
        "width": 14,
        "height": 8,
        "format": "<!-- Load Chart.js library -->\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n\n<div style=\"width: 100%; height: 400px;\">\n    <canvas id=\"rainBarChart10\" style=\"height: 100%;\"></canvas>\n</div>\n\n<script>\n(function(scope) {\n    // Initialize the chart\n    let ctx10 = document.getElementById('rainBarChart10').getContext('2d');\n\n    // Placeholder for the chart instance\n    let rainChart10;\n\n    // Function to create the chart\n    function createChart(data) {\n        // If chart already exists, destroy it before creating a new one\n        if (rainChart10) {\n            rainChart10.destroy();\n        }\n\n        let labels = data.map(item => {\n            let date = new Date(item.time);\n            return date.toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'});\n        });\n\n        let values = data.map(item => item.value);\n\n        // Create the chart\n        rainChart10 = new Chart(ctx10, {\n            type: 'bar',\n            data: {\n                labels: labels,\n                datasets: [{\n                    label: 'Sensor Values (mm/h)',\n                    data: values,\n                    backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                },\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        display: true\n                    },\n                    tooltip: {\n                        callbacks: {\n                            label: function(context) {\n                                let date = new Date(data[context.dataIndex].time);\n                                let formattedDate = date.toLocaleString();\n                                return 'Value: ' + context.parsed.y + ', Time: ' + formattedDate;\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    // Watch for new incoming messages\n    scope.$watch('msg.payload', function(data) {\n        if (data && Array.isArray(data)) {\n            createChart(data);\n        }\n    });\n\n})(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2430,
        "y": 2240,
        "wires": [
            []
        ]
    },
    {
        "id": "c5107d87cd6a60f4",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "bf886739ec761ed7",
        "name": "Menu",
        "order": 1,
        "width": 28,
        "height": 2,
        "format": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\n    <!-- Google Fonts -->\n    <link href=\"https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap\" rel=\"stylesheet\">\n\n    <!-- Select2 CSS -->\n    <link href=\"https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css\" rel=\"stylesheet\" />\n\n    <!-- Daterangepicker CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css\">\n\n    <!-- Font Awesome for the calendar icon -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css\">\n\n    <!-- Custom Styles -->\n    <style>\n        body {\n            font-family: 'Poppins', sans-serif;\n            background-color: #f7f8fc;\n            color: #333;\n            margin: 0;\n            padding: 0;\n        }\n\n        .dropdown-container {\n            display: flex;\n            align-items: center;\n            border: 1px solid red;\n            width: 100%;\n            padding: 15px;\n            box-sizing: border-box;\n            background-color: #fff;\n            border-radius: 10px;\n            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\n            margin-bottom: 10px;\n        }\n\n        .dropdown-container .select2-container {\n            flex: 1;\n            margin-right: 10px;\n            min-width: 200px;\n        }\n\n        .select2-container--default .select2-selection--multiple {\n            display: block !important;\n            width: 100% !important;\n            min-height: 40px !important;\n            overflow-y: auto !important;\n            background-color: #f1f3f5 !important;\n            border: 1px solid #ced4da !important;\n            border-radius: 8px !important;\n            font-size: 14px !important;\n            font-family: 'Poppins', sans-serif !important;\n            position: relative !important;\n        }\n\n        .select2-container--default .select2-selection--multiple .select2-selection__rendered {\n            font-size: 14px;\n            color: #495057;\n        }\n\n        .select2-container--default .select2-selection--multiple .select2-selection__choice {\n            font-size: 14px;\n            background-color: #007bff;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            margin-right: 5px;\n        }\n\n        .select2-container--default .select2-selection--multiple .select2-selection_choice_remove {\n            color: #fff;\n            margin-left: 8px;\n            cursor: pointer;\n        }\n\n        .select2-container--default .select2-selection--multiple:after {\n            content: '\\25BC';\n            position: absolute;\n            top: 50%;\n            right: 12px;\n            transform: translateY(-50%);\n            pointer-events: none;\n            font-size: 16px;\n            color: #495057;\n        }\n\n        .datepicker-wrapper {\n            display: flex;\n            align-items: center;\n            position: relative;\n            width: 250px;\n            background: #f1f3f5;\n            border: 1px solid #ced4da;\n            border-radius: 8px;\n            margin-left: 15px;\n            margin-right: 15px;\n            box-sizing: border-box;\n        }\n\n        .datepicker-wrapper .calendar-icon {\n            position: absolute;\n            left: 10px;\n            color: #495057;\n            font-size: 16px;\n        }\n\n        .datepicker-wrapper .date-range-picker {\n            width: 100%;\n            padding: 8px 12px 8px 35px; /* Add padding to the left to accommodate the icon */\n            border: none;\n            background: transparent;\n            font-family: 'Poppins', sans-serif;\n            color: #495057;\n            box-sizing: border-box;\n        }\n\n        .datepicker-wrapper .date-range-picker:focus {\n            outline: none;\n        }\n\n        .show-button,\n        .download-button {\n            padding: 8px 15px;\n            color: white;\n            border: none;\n            border-radius: 8px;\n            cursor: pointer;\n            font-size: 13px;\n            font-weight: 500;\n            height: 40px;\n            font-family: 'Poppins', sans-serif;\n            transition: background-color 0.3s ease;\n        }\n\n        .show-button {\n            background-color: #007bff;\n            margin-right: 15px;\n        }\n\n        .show-button:hover {\n            background-color: #0056b3;\n        }\n\n        .download-button {\n            background-color: #28a745;\n            display: none;\n        }\n\n        .download-button:hover {\n            background-color: #218838;\n        }\n\n        .popup-message {\n            position: fixed;\n            top: 10px;\n            left: 50%;\n            transform: translateX(-50%);\n            background-color: #dc3545;\n            color: white;\n            padding: 10px 20px;\n            border-radius: 8px;\n            font-size: 14px;\n            font-family: 'Poppins', sans-serif;\n            z-index: 9999;\n            display: none;\n            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\n        }\n\n        /* Ensure Daterangepicker calendar is properly displayed above other elements */\n        .daterangepicker {\n            z-index: 1050 !important;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"dropdown-container\">\n        <select id=\"nameDropdown\" multiple=\"multiple\">\n            <option value=\"Feuerwehr Jellenkofen\">Feuerwehr Jellenkofen</option>\n            <option value=\"Feuerwehr Martinshaun\">Feuerwehr Martinshaun</option>\n            <option value=\"Grund- und Mittelschule Ergoldsbach\">Grund- und Mittelschule Ergoldsbach</option>\n            <option value=\"Schützenverein\">Schützenverein</option>\n            <option value=\"Feuerwehr Kläham\">Feuerwehr Kläham</option>\n            <option value=\"Feuerwehr Paindlkofen\">Feuerwehr Paindlkofen</option>\n            <option value=\"Feuerwehr Langenhettenbach\">Feuerwehr Langenhettenbach</option>\n        </select>\n\n        <div class=\"datepicker-wrapper\">\n            <i class=\"fas fa-calendar-alt calendar-icon\"></i>\n            <input type=\"text\" id=\"reportrange\" class=\"date-range-picker\" placeholder=\"Select Date Range\">\n        </div>\n\n        <button id=\"showButton\" class=\"show-button\">Show</button>\n        <button id=\"downloadButton\" class=\"download-button\">Download .csv</button>\n    </div>\n\n    <div id=\"popupMessage\" class=\"popup-message\">Maximum selections of sensor is 4!</div>\n\n    <!-- jQuery -->\n    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n\n    <!-- Select2 JS -->\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js\"></script>\n\n    <!-- Daterangepicker JS -->\n    <script src=\"https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js\"></script>\n\n    <!-- Custom Script -->\n    <script>\n        (function(scope) {\n            $(document).ready(function() {\n                $('#nameDropdown').select2({\n                    placeholder: \"Select sensors\",\n                    tags: true,\n                    tokenSeparators: [',', ' '],\n                    dropdownAutoWidth: true,\n                    width: 'resolve'\n                });\n\n                $('#nameDropdown').on('select2:select', function (e) {\n                    var selectedValues = $('#nameDropdown').val();\n                    if (selectedValues.length > 4) {\n                        $('#nameDropdown').val(selectedValues.slice(0, 4)).trigger('change');\n                        showPopupMessage();\n                    }\n                });\n\n                $('#showButton').click(function(event) {\n                    event.preventDefault();\n                    var selectedValues = $('#nameDropdown').val();\n                    var selectedDates = $('#reportrange').val();\n                    scope.send({payload: {names: selectedValues, dates: selectedDates}});\n                    $('#downloadButton').show(); // Show the Download button when Show is clicked\n                });\n\n                // Initialize Daterangepicker\n                $('#reportrange').daterangepicker({\n                    autoUpdateInput: false,\n                    locale: {\n                        cancelLabel: 'Clear'\n                    },\n                    maxDate: moment(), // Prevent selection beyond the end of the current month\n                    opens: 'left',\n                    showDropdowns: true // Allow navigation between years and months\n                });\n\n                $('#reportrange').on('apply.daterangepicker', function(ev, picker) {\n                    $(this).val(picker.startDate.format('MM.DD.YYYY') + ' - ' + picker.endDate.format('MM.DD.YYYY'));\n                });\n\n                $('#reportrange').on('cancel.daterangepicker', function(ev, picker) {\n                    $(this).val('');\n                });\n            });\n\n            function showPopupMessage() {\n                var popup = $('#popupMessage');\n                popup.fadeIn().css('top', '10px');\n                setTimeout(function() {\n                    popup.fadeOut();\n                }, 5000);\n            }\n        })(scope);\n    </script>\n</body>\n\n</html>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 470,
        "y": 860,
        "wires": [
            [
                "hide_groups",
                "cafe341cc4e3888f",
                "05e235afc10ac2b6"
            ]
        ]
    },
    {
        "id": "05e235afc10ac2b6",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "function 679",
        "func": "// Extract the dates string from msg.payload\nvar dates = msg.payload.dates;\n\n// Split the string into start and end dates\nvar dateRange = dates.split(\" - \");\n\n// Define a function to convert a date string to the desired format\nfunction formatDate(dateString) {\n    // Split the date string into parts: MM/DD/YYYY\n    var dateParts = dateString.split(\".\");\n    var month = parseInt(dateParts[0], 10) - 1; // Month is zero-based in JavaScript Date\n    var day = parseInt(dateParts[1], 10);\n    var year = parseInt(dateParts[2], 10);\n\n    // Create a new Date object using the parsed values\n    var date = new Date(year, month, day);\n    \n    // Format the date to ISO 8601 string with timezone\n    return date.toISOString();\n}\n\n// Format the start and end dates\nvar startDate = formatDate(dateRange[0]);\nvar endDate = formatDate(dateRange[1]);\n\n// Adjust start date to start of the day and end date to end of the day\nstartDate = new Date(startDate).setUTCHours(0,0,0,0);\nendDate = new Date(endDate).setUTCHours(0,0,0,0);\n\n// Convert back to ISO string\nstartDate = new Date(startDate).toISOString();\nendDate = new Date(endDate).toISOString();\n\n// Create a new payload with the desired format\nmsg.payload = {\n    startDate: startDate,\n    endDate: endDate\n};\n\nflow.set(\"startDate\", startDate);\nflow.set(\"endDate\", endDate);\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 980,
        "wires": [
            [
                "849d0480e2a17e38"
            ]
        ]
    },
    {
        "id": "7a39821a9e9c0917",
        "type": "http request",
        "z": "edc51ffb760624f6",
        "name": "hdc",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://137.184.228.7:5007/hdc?ags=09274127&page=1&limit=10000&withData=true&resolution=60&searchTerm={{name}}&start={{start}}&end={{end}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1870,
        "y": 320,
        "wires": [
            [
                "eb5cc57304c8db1a"
            ]
        ]
    },
    {
        "id": "eb5cc57304c8db1a",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "extract",
        "func": "// Extract the result object from the incoming message payload\nmsg.payload = msg.payload.data.result;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 320,
        "wires": [
            [
                "96c62b911dc79056",
                "3ff93cfa9fc23c35"
            ]
        ]
    },
    {
        "id": "96c62b911dc79056",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "function 600",
        "func": "// Access the first object in the array\nlet device = msg.payload[0];\n\n// Extract the required fields\nlet name = device.name;\nlet protocolType = device.protocolType;\nlet type = device.type;\nlet lastAliveSignal = new Date(device.lastAliveSignal).toLocaleString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true\n});\nlet catchment = device.catchment;\n// Build the new payload\nmsg.payload = {\n    name: name,\n    protocolType: protocolType,\n    type: type,\n    lastAliveSignal: lastAliveSignal,\n    catchment: catchment\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 280,
        "wires": [
            [
                "86df6f5582da8a82",
                "c026a15d7bf2a8a5",
                "1ebecbaebe9a017f",
                "4b601da943c7b78f"
            ]
        ]
    },
    {
        "id": "3ff93cfa9fc23c35",
        "type": "function",
        "z": "edc51ffb760624f6",
        "name": "data",
        "func": "// Assuming the structure provided in msg.payload\nlet data = msg.payload[0].data;\n\n// Create a new array to store the extracted values with converted timestamps\nlet extractedData = data.map(item => {\n    return {\n        time: new Date(item.end).toLocaleString(), // Convert the timestamp to a readable format\n        value: item.value,\n    };\n});\n\n// Set the extracted data as the new msg.payload\nmsg.payload = extractedData;\n\n// Return the message object\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 380,
        "wires": [
            [
                "99fa16457b14a8d1"
            ]
        ]
    },
    {
        "id": "86df6f5582da8a82",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "69191a2c9f95b121",
        "name": "name",
        "order": 1,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9;\n        /* Light background color */\n        border-radius: 15px;\n        /* Rounded corners */\n        padding: 15px;\n        width: 300px;\n        /* Adjust the width as needed */\n        height: auto;\n        /* Allow height to adjust based on content */\n        max-height: 150px;\n        /* Set a maximum height */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center;\n        /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);\n        /* Optional: shadow effect */\n        overflow: hidden;\n        /* Hide overflow */\n    }\n\n    .sensor-key {\n        font-size: 12px;\n        /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333;\n        /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n        white-space: nowrap;\n        /* Prevent text wrapping */\n        overflow: hidden;\n        /* Hide overflow */\n        text-overflow: ellipsis;\n        /* Show ellipsis for overflow text */\n    }\n\n    .divider {\n        width: 80%;\n        /* Slim line width */\n        height: 1px;\n        /* Slim line height */\n        background-color: #ccc;\n        /* Ash-colored line */\n        margin: 5px 0 15px 0;\n        /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px;\n        /* Font size for values */\n        font-weight: bold;\n        text-align: center;\n        /* Center-align the text */\n        width: 100%;\n        /* Ensure the text takes up the full width */\n        white-space: nowrap;\n        /* Prevent text wrapping */\n        overflow: hidden;\n        /* Hide overflow */\n        text-overflow: ellipsis;\n        /* Show ellipsis for overflow text */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\" title=\"name\">Sensor Name</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\" title=\"{{msg.payload.name}}\">{{msg.payload.name}}</div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2430,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "c026a15d7bf2a8a5",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "69191a2c9f95b121",
        "name": "aliveSig",
        "order": 2,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Last Alive Signal</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload.lastAliveSignal}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2440,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "1ebecbaebe9a017f",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "69191a2c9f95b121",
        "name": "protocol",
        "order": 3,
        "width": 7,
        "height": 2,
        "format": "<style>\n    .sensor-box {\n        background-color: #f9f9f9; /* Light background color */\n        border-radius: 15px; /* Rounded corners */\n        padding: 15px;\n        width: 300px; /* Adjust the width as needed */\n        height: 100px; /* Adjust the height as needed */\n        font-family: 'Poppins', sans-serif;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center; /* Center content horizontally */\n        position: relative;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    }\n\n    .sensor-key {\n        font-size: 12px; /* Smaller font size for keys */\n        font-weight: bold;\n        color: #333; /* Dark text color for visibility on light background */\n        text-align: center;\n        width: 100%;\n    }\n\n    .divider {\n        width: 80%; /* Slim line width */\n        height: 1px; /* Slim line height */\n        background-color: #ccc; /* Ash-colored line */\n        margin: 5px 0 15px 0; /* Spacing around the line */\n    }\n\n    .sensor-value {\n        font-size: 15px; /* Font size for values */\n        font-weight: bold;\n        text-align: center; /* Center-align the text */\n        width: 100%; /* Ensure the text takes up the full width */\n    }\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Protocol Type</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload.protocolType}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2440,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "4b601da943c7b78f",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "69191a2c9f95b121",
        "name": "catchment",
        "order": 4,
        "width": 7,
        "height": 2,
        "format": "<style>\n.sensor-box {\n    background-color: #f9f9f9; /* Light background color */\n    border-radius: 15px; /* Rounded corners */\n    padding: 15px;\n    width: 300px; /* Adjust the width as needed */\n    height: 100px; /* Adjust the height as needed */\n    font-family: 'Poppins', sans-serif;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: center; /* Center content horizontally */\n    position: relative;\n    box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); /* Optional: shadow effect */\n    border: 2px solid rgba(75, 192, 192, 0.2); /* Border color */\n    box-sizing: border-box; /* Include padding and border in element's total width and height */\n    margin: 0 auto; /* Center the card within its container */\n}\n\n.sensor-key {\n    font-size: 12px; /* Smaller font size for keys */\n    font-weight: bold;\n    color: #333; /* Dark text color for visibility on light background */\n    text-align: center;\n    width: 100%;\n}\n\n.divider {\n    width: 80%; /* Slim line width */\n    height: 1px; /* Slim line height */\n    background-color: #ccc; /* Ash-colored line */\n    margin: 5px 0 15px 0; /* Spacing around the line */\n}\n\n.sensor-value {\n    font-size: 15px; /* Font size for values */\n    font-weight: bold;\n    text-align: center; /* Center-align the text */\n    width: 100%; /* Ensure the text takes up the full width */\n}\n\n</style>\n\n<div class=\"sensor-box\">\n    <div class=\"sensor-key\">Catchment</div>\n    <div class=\"divider\"></div>\n    <div class=\"sensor-value\">{{msg.payload.catchment}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2450,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "99fa16457b14a8d1",
        "type": "ui_template",
        "z": "edc51ffb760624f6",
        "group": "69191a2c9f95b121",
        "name": "test",
        "order": 5,
        "width": 28,
        "height": 8,
        "format": "<!-- Load Chart.js library -->\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n\n<div style=\"width: 100%; height: 400px;\">\n    <canvas id=\"tempBarChart\" style=\"height: 100%;\"></canvas>\n</div>\n\n<script>\n(function(scope) {\n    // Initialize the chart\n    let ctx = document.getElementById('tempBarChart').getContext('2d');\n\n    // Placeholder for the chart instance\n    let tempChart;\n\n    // Function to create the chart\n    function createChart(data) {\n        // If chart already exists, destroy it before creating a new one\n        if (tempChart) {\n            tempChart.destroy();\n        }\n\n        // Convert time from ISO format to a readable format\n        let labels = data.map(item => {\n            let date = new Date(item.time);\n            return date.toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'}); // Format as \"hh:mm AM/PM\"\n        });\n\n        let values = data.map(item => item.value);\n\n        // Create the chart\n        tempChart = new Chart(ctx, {\n            type: 'bar',\n            data: {\n                labels: labels,\n                datasets: [{\n                    label: 'Sensor Values (mm/h)',\n                    data: values,\n                    backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                },\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        display: true\n                    },\n                    tooltip: {\n                        callbacks: {\n                            label: function(context) {\n                                let date = new Date(data[context.dataIndex].time);\n                                let formattedDate = date.toLocaleString(); // Format as \"MM/DD/YYYY, hh:mm:ss AM/PM\"\n                                return 'Value: ' + context.parsed.y + ', Time: ' + formattedDate;\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    // Watch for new incoming messages\n    scope.$watch('msg.payload', function(data) {\n        if (data && Array.isArray(data)) {\n            createChart(data);\n        }\n    });\n\n})(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2430,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "849d0480e2a17e38",
        "type": "debug",
        "z": "edc51ffb760624f6",
        "name": "debug 29",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 1000,
        "wires": []
    },
    {
        "id": "c24087526c9d0ddd",
        "type": "mqtt in",
        "z": "38b54e049c9b78a2",
        "name": "Temp Sensor",
        "topic": "#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e6db278fd742bc22",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 90,
        "y": 220,
        "wires": [
            [
                "0c3336e4362fb984",
                "4a8e24ebc3fc752e",
                "68488a7a2a05dd68"
            ]
        ]
    },
    {
        "id": "0c3336e4362fb984",
        "type": "function",
        "z": "38b54e049c9b78a2",
        "name": "Extracting Temp Sensor Data",
        "func": "var att = msg.payload.uplink_message.decoded_payload;\n\nvar data = {};\n\nif (att.fan_active) {\n    data.fan_active = att.fan_active.value;\n}\n\nif (att.humidity) {\n    data.humidity = att.humidity.value\n}\n\nif (att.lux) {\n    data.lux = att.lux.value;\n}\n\nif (att.lux_max) {\n    data.lux_max = att.lux_max.value;\n}\n\nif (att.lux_min) {\n    data.lux_min = att.lux_min.value;\n}\n\nif (att.pm_10) {\n    data.pm_10 = att.pm_10.value;\n}\n\nif (att.pm_10_max) {\n    data.pm_10_max = att.pm_10_max.value;\n}\n\nif (att.pm_10_min) {\n    data.pm_10_min = att.pm_10_min.value;\n}\n\nif (att.pm_2_5) {\n    data.pm_2_5 = att.pm_2_5.value;\n}\n\nif (att.pm_2_5_max) {\n    data.pm_2_5_max = att.pm_2_5_max.value;\n}\n\nif (att.pm_2_5_min) {\n    data.pm_2_5_min = att.pm_2_5_min.value;\n}\n\nif (att.pressure) {\n    data.pressure = att.pressure.value;\n}\n\nif (att.temperature) {\n    data.temperature = att.temperature.value;\n}\n\nif (att.temperature_box) {\n    data.temperature_box = att.temperature_box.value;\n}\n\nif (att.temperature_max) {\n    data.temperature_max = att.temperature_max.value;\n}\n\nif (att.temperature_min) {\n    data.temperature_min = att.temperature_min.value;\n}\n\nif (att.uv) {\n    data.uv = att.uv.value;\n}\n\nif (att.uv_max) {\n    data.uv_max = att.uv_max.value;\n}\n\nif (att.uv_min) {\n    data.uv_min = att.uv_min.value;\n}\n\nvar body = {\n    timestamp: new Date(msg.payload.received_at),\n    metadata: msg._msgid,\n    type: \"temp_sensor\",\n    device_id: msg.payload.end_device_ids.device_id,\n    data: data\n};\n\nmsg.payload = body;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 240,
        "wires": [
            [
                "5699f89dd4e10fd0",
                "e4b5701c2af25847",
                "51e7019d0714e1f0",
                "ea864569f7d43714",
                "09e3d8fe6c820bfe",
                "9fcf62de1eba7bfc",
                "bec2ad6efeddf6e3",
                "fe0eff922d361c08",
                "6ffd19fd2800a125"
            ]
        ]
    },
    {
        "id": "5699f89dd4e10fd0",
        "type": "debug",
        "z": "38b54e049c9b78a2",
        "name": "Temp Sensor Formatted Output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 120,
        "wires": []
    },
    {
        "id": "4a8e24ebc3fc752e",
        "type": "debug",
        "z": "38b54e049c9b78a2",
        "name": "Temp Sensor Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 100,
        "wires": []
    },
    {
        "id": "68488a7a2a05dd68",
        "type": "function",
        "z": "38b54e049c9b78a2",
        "name": "Checking Missing Data",
        "func": "var att = msg.payload.uplink_message.decoded_payload;\n\nvar error_messages = [];\n\nif (!att.fan_active) {\n    error_messages.push(\"Fan active status is missing\");\n}\n\nif (!att.humidity) {\n    error_messages.push(\"Humidity value is missing\");\n}\n\nif (!att.lux) {\n    error_messages.push(\"Illuminance value is missing\");\n}\n\nif (!att.lux_max) {\n    error_messages.push(\"Illuminance Max value is missing\");\n}\n\nif (!att.lux_min) {\n    error_messages.push(\"Illuminance Min value is missing\");\n}\n\nif (!att.pm_10) {\n    error_messages.push(\"Particulate Matter 10 value is missing\");\n}\n\nif (!att.pm_10_max) {\n    error_messages.push(\"Max Particulate Matter 10 value is missing\");\n}\n\nif (!att.pm_10_min) {\n    error_messages.push(\"Min Particulate Matter 10 is missing\");\n}\n\nif (!att.pm_2_5) {\n    error_messages.push(\"Particulate Metter 2.5 is missing\");\n}\n\nif (!att.pm_2_5_max) {\n    error_messages.push(\"Max Particulate Metter 2.5 is missing\");\n}\n\nif (!att.pm_2_5_min) {\n    error_messages.push(\"Min Particulate Metter 2.5 is missing\");\n}\n\nif (!att.pressure) {\n    error_messages.push(\"Atmospheric Pressure is missing\");\n}\n\nif (!att.temperature) {\n    error_messages.push(\"Air Temperature is missing\");\n}\n\nif (!att.temperature_box) {\n    error_messages.push(\"Temperature inside box is missing\");\n}\n\nif (!att.temperature_max) {\n    error_messages.push(\"Air temperature max is missing\");\n}\n\nif (!att.temperature_min) {\n    error_messages.push(\"Air temperature min is missing\");\n}\n\nif (!att.uv) {\n    error_messages.push(\"UV intensity is missing\");\n}\n\nif (!att.uv_max) {\n    error_messages.push(\"UV intensity max is missing\");\n}\n\nif (!att.uv_min) {\n    error_messages.push(\"UV intensity min is missing\");\n}\n\nvar error_count = error_messages.length;\n\nmsg.error_count = error_count;\nmsg.error_messages = error_messages;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 460,
        "wires": [
            [
                "7613bb46f1b3bd11"
            ]
        ]
    },
    {
        "id": "7613bb46f1b3bd11",
        "type": "switch",
        "z": "38b54e049c9b78a2",
        "name": "",
        "property": "error_count",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 530,
        "y": 460,
        "wires": [
            [
                "7116b0d3cd47ff0d"
            ]
        ]
    },
    {
        "id": "7116b0d3cd47ff0d",
        "type": "function",
        "z": "38b54e049c9b78a2",
        "name": "Formatting Error Message",
        "func": "\nvar body = {\n    time: new Date(),\n    sensorId: msg.payload.end_device_ids.device_id,\n    sensorType: \"temp_sensor\",\n    metadata: {\n        logtype: \"error\",\n        logmsg: msg.error_messages\n    }\n};\n\nmsg.payload = body;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 580,
        "wires": [
            [
                "26112982506828d0",
                "fcea6e6fc3c6891d"
            ]
        ]
    },
    {
        "id": "fcea6e6fc3c6891d",
        "type": "debug",
        "z": "38b54e049c9b78a2",
        "name": "Error Message",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 620,
        "wires": []
    },
    {
        "id": "e4b5701c2af25847",
        "type": "switch",
        "z": "38b54e049c9b78a2",
        "g": "a1a35ba9bcbdc331",
        "name": "Sensebox1",
        "property": "payload.device_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "sensebox-01",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1250,
        "y": 200,
        "wires": [
            [
                "d2ea8d7d09775caf",
                "1ee5ef1877f7a6cd",
                "01f748f2247f3fbd",
                "f83e5a17e7b96060",
                "cd5582fe9aaa9c58",
                "89595967d3511b93"
            ]
        ]
    },
    {
        "id": "d2ea8d7d09775caf",
        "type": "function",
        "z": "38b54e049c9b78a2",
        "g": "a1a35ba9bcbdc331",
        "name": "Sensebox1 Temperature",
        "func": "var temperature = msg.payload.data.temperature.toFixed(2);\nmsg.payload = temperature;\nmsg.topic = 'Temperature';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 100,
        "wires": [
            [
                "5bc45162be3fbdfe",
                "d84ba076229b2830"
            ]
        ]
    },
    {
        "id": "1ee5ef1877f7a6cd",
        "type": "function",
        "z": "38b54e049c9b78a2",
        "g": "a1a35ba9bcbdc331",
        "name": "Sensebox1 Temperature Box",
        "func": "var temperature_min = msg.payload.data.temperature_min.toFixed(2);\nmsg.payload = temperature_min;\nmsg.topic = 'Minimum Temperature';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 140,
        "wires": [
            [
                "5c8c21abeab89706",
                "e27baaab49f78a23"
            ]
        ]
    },
    {
        "id": "01f748f2247f3fbd",
        "type": "function",
        "z": "38b54e049c9b78a2",
        "g": "a1a35ba9bcbdc331",
        "name": "Sensebox1 Humidity",
        "func": "var humidity = msg.payload.data.humidity.toFixed(2);\nmsg.payload = humidity+'%';\nmsg.topic = \"Relative Humidity\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 180,
        "wires": [
            [
                "ede1a343e8c12cb5",
                "080b6aa76dca3552"
            ]
        ]
    },
    {
        "id": "fe0eff922d361c08",
        "type": "mongodb4",
        "z": "38b54e049c9b78a2",
        "clientNode": "6c246c6eea0c6943",
        "mode": "collection",
        "collection": "temp_sensor",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "Storing Temp Data",
        "x": 650,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "26112982506828d0",
        "type": "mongodb4",
        "z": "38b54e049c9b78a2",
        "clientNode": "6c246c6eea0c6943",
        "mode": "collection",
        "collection": "log",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "Storing Error Log",
        "x": 830,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "f83e5a17e7b96060",
        "type": "function",
        "z": "38b54e049c9b78a2",
        "g": "a1a35ba9bcbdc331",
        "name": "Sensebox1 Lux",
        "func": "var lux = msg.payload.data.lux.toFixed(2);\nmsg.payload = lux;\nmsg.topic = \"Illuminance\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 220,
        "wires": [
            [
                "d4bba6abb7c27db9",
                "562e28fbfd47b8ca"
            ]
        ]
    },
    {
        "id": "cd5582fe9aaa9c58",
        "type": "function",
        "z": "38b54e049c9b78a2",
        "g": "a1a35ba9bcbdc331",
        "name": "Sensebox1 UV",
        "func": "var uv = msg.payload.data.uv.toFixed(2);\nmsg.payload = uv;\nmsg.topic = \"UV Intensity\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 260,
        "wires": [
            [
                "3f95966b286876c7",
                "0afb2dbcec7fde45"
            ]
        ]
    },
    {
        "id": "5bc45162be3fbdfe",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "a1a35ba9bcbdc331",
        "name": "Temperature Gauge",
        "group": "d6de265f36f661c0",
        "order": 2,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 1820,
        "y": 100,
        "wires": []
    },
    {
        "id": "5c8c21abeab89706",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "a1a35ba9bcbdc331",
        "name": "Box Temperature Gauge",
        "group": "d6de265f36f661c0",
        "order": 3,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Box Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 1830,
        "y": 140,
        "wires": []
    },
    {
        "id": "ede1a343e8c12cb5",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "a1a35ba9bcbdc331",
        "name": "Humidity Gauge",
        "group": "d6de265f36f661c0",
        "order": 4,
        "width": 4,
        "height": 3,
        "gtype": "wave",
        "title": "Humidity",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1800,
        "y": 180,
        "wires": []
    },
    {
        "id": "d4bba6abb7c27db9",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "a1a35ba9bcbdc331",
        "name": "illuminance gauge",
        "group": "d6de265f36f661c0",
        "order": 5,
        "width": 4,
        "height": 3,
        "gtype": "donut",
        "title": "Illuminance",
        "label": "lx",
        "format": "{{value}}",
        "min": 0,
        "max": "170000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "50000",
        "seg2": "120000",
        "diff": false,
        "className": "",
        "x": 1810,
        "y": 220,
        "wires": []
    },
    {
        "id": "3f95966b286876c7",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "a1a35ba9bcbdc331",
        "name": "UV Intensity Gauge",
        "group": "d6de265f36f661c0",
        "order": 6,
        "width": 4,
        "height": 3,
        "gtype": "donut",
        "title": "UV Intensity",
        "label": "µW⋅cm⁻²",
        "format": "{{value}}",
        "min": 0,
        "max": "600",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "200",
        "seg2": "400",
        "diff": false,
        "className": "",
        "x": 1810,
        "y": 260,
        "wires": []
    },
    {
        "id": "89595967d3511b93",
        "type": "function",
        "z": "38b54e049c9b78a2",
        "g": "a1a35ba9bcbdc331",
        "name": "Sensebox1 Fan Active",
        "func": "var fan_active = msg.payload.data.fan_active;\nif (fan_active == 0) {\n    msg.payload = 'Inactive';\n} else {\n    msg.payload = 'Active';\n}\n\nmsg.topic = \"Fan Status\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 300,
        "wires": [
            [
                "15146a27e6c92f35",
                "75340353cad78e79"
            ]
        ]
    },
    {
        "id": "15146a27e6c92f35",
        "type": "ui_text",
        "z": "38b54e049c9b78a2",
        "g": "a1a35ba9bcbdc331",
        "group": "d6de265f36f661c0",
        "order": 7,
        "width": 4,
        "height": 3,
        "name": "Fan Status",
        "label": "Fan Status",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "Georgia,Georgia,serif",
        "fontSize": 16,
        "color": "#000000",
        "x": 1790,
        "y": 300,
        "wires": []
    },
    {
        "id": "23dd42192bdf3cf4",
        "type": "function",
        "z": "38b54e049c9b78a2",
        "g": "b579cf62cb73e1e1",
        "name": "Sensebox1 Temperature",
        "func": "var temperature = msg.payload.data.temperature.toFixed(2);\nmsg.payload = temperature;\nmsg.topic = 'Temperature';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 420,
        "wires": [
            [
                "9ff38aedb3461248",
                "7764c3f0ed2557de"
            ]
        ]
    },
    {
        "id": "8d7a1961e832891c",
        "type": "function",
        "z": "38b54e049c9b78a2",
        "g": "b579cf62cb73e1e1",
        "name": "Sensebox1 Temperature Box",
        "func": "var temperature_min = msg.payload.data.temperature_min.toFixed(2);\nmsg.payload = temperature_min;\nmsg.topic = 'Minimum Temperature';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 460,
        "wires": [
            [
                "1df72ec8bbe13c74",
                "8fefa9fe35b1a077"
            ]
        ]
    },
    {
        "id": "799bcc55e75820dc",
        "type": "function",
        "z": "38b54e049c9b78a2",
        "g": "b579cf62cb73e1e1",
        "name": "Sensebox1 Humidity",
        "func": "var humidity = msg.payload.data.humidity.toFixed(2);\nmsg.payload = humidity+'%';\nmsg.topic = \"Relative Humidity\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 500,
        "wires": [
            [
                "ef49b06b9ba1298e",
                "2c40b1a2f4e49291"
            ]
        ]
    },
    {
        "id": "76ebbd54e2baf821",
        "type": "function",
        "z": "38b54e049c9b78a2",
        "g": "b579cf62cb73e1e1",
        "name": "Sensebox1 Lux",
        "func": "var lux = msg.payload.data.lux.toFixed(2);\nmsg.payload = lux;\nmsg.topic = \"Illuminance\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 540,
        "wires": [
            [
                "9a4a4781b7edf8f1",
                "2de80bc2ac8215f6"
            ]
        ]
    },
    {
        "id": "bbae8aa638ab6d0b",
        "type": "function",
        "z": "38b54e049c9b78a2",
        "g": "b579cf62cb73e1e1",
        "name": "Sensebox1 UV",
        "func": "var uv = msg.payload.data.uv.toFixed(2);\nmsg.payload = uv;\nmsg.topic = \"UV Intensity\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 580,
        "wires": [
            [
                "18e4b7323abfdf08",
                "3f69e791f089a0e8"
            ]
        ]
    },
    {
        "id": "9ff38aedb3461248",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "b579cf62cb73e1e1",
        "name": "Temperature Gauge",
        "group": "4c0dae9a2cd86da7",
        "order": 2,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 1820,
        "y": 420,
        "wires": []
    },
    {
        "id": "1df72ec8bbe13c74",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "b579cf62cb73e1e1",
        "name": "Box Temperature Gauge",
        "group": "4c0dae9a2cd86da7",
        "order": 3,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Box Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 1830,
        "y": 460,
        "wires": []
    },
    {
        "id": "ef49b06b9ba1298e",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "b579cf62cb73e1e1",
        "name": "Humidity Gauge",
        "group": "4c0dae9a2cd86da7",
        "order": 4,
        "width": 4,
        "height": 3,
        "gtype": "wave",
        "title": "Humidity",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1800,
        "y": 500,
        "wires": []
    },
    {
        "id": "9a4a4781b7edf8f1",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "b579cf62cb73e1e1",
        "name": "illuminance gauge",
        "group": "4c0dae9a2cd86da7",
        "order": 5,
        "width": 4,
        "height": 3,
        "gtype": "donut",
        "title": "Illuminance",
        "label": "lx",
        "format": "{{value}}",
        "min": 0,
        "max": "170000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "50000",
        "seg2": "120000",
        "diff": false,
        "className": "",
        "x": 1810,
        "y": 540,
        "wires": []
    },
    {
        "id": "18e4b7323abfdf08",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "b579cf62cb73e1e1",
        "name": "UV Intensity Gauge",
        "group": "4c0dae9a2cd86da7",
        "order": 6,
        "width": 4,
        "height": 3,
        "gtype": "donut",
        "title": "UV Intensity",
        "label": "µW⋅cm⁻²",
        "format": "{{value}}",
        "min": 0,
        "max": "600",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "200",
        "seg2": "400",
        "diff": false,
        "className": "",
        "x": 1810,
        "y": 580,
        "wires": []
    },
    {
        "id": "ca404cad8bf90237",
        "type": "function",
        "z": "38b54e049c9b78a2",
        "g": "b579cf62cb73e1e1",
        "name": "Sensebox1 Fan Active",
        "func": "var fan_active = msg.payload.data.fan_active;\nif (fan_active == 0) {\n    msg.payload = 'Inactive';\n} else {\n    msg.payload = 'Active';\n}\n\nmsg.topic = \"Fan Status\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 620,
        "wires": [
            [
                "9149f65032c6221d",
                "cab53c3b4389de15"
            ]
        ]
    },
    {
        "id": "9149f65032c6221d",
        "type": "ui_text",
        "z": "38b54e049c9b78a2",
        "g": "b579cf62cb73e1e1",
        "group": "4c0dae9a2cd86da7",
        "order": 7,
        "width": 4,
        "height": 3,
        "name": "Fan Status",
        "label": "Fan Status",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Georgia,Georgia,serif",
        "fontSize": 16,
        "color": "#000000",
        "x": 1790,
        "y": 620,
        "wires": []
    },
    {
        "id": "51e7019d0714e1f0",
        "type": "switch",
        "z": "38b54e049c9b78a2",
        "g": "b579cf62cb73e1e1",
        "name": "Sensebox2",
        "property": "payload.device_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "sensebox-02",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1250,
        "y": 520,
        "wires": [
            [
                "23dd42192bdf3cf4",
                "8d7a1961e832891c",
                "799bcc55e75820dc",
                "76ebbd54e2baf821",
                "bbae8aa638ab6d0b",
                "ca404cad8bf90237"
            ]
        ]
    },
    {
        "id": "ad5d2e99db98a319",
        "type": "function",
        "z": "38b54e049c9b78a2",
        "g": "f174edef7e963973",
        "name": "Sensebox1 Temperature",
        "func": "var temperature = msg.payload.data.temperature.toFixed(2);\nmsg.payload = temperature;\nmsg.topic = 'Temperature';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 740,
        "wires": [
            [
                "e86acecaedbe6f26",
                "f9e92c035abfb61e"
            ]
        ]
    },
    {
        "id": "f9859fcd0162da68",
        "type": "function",
        "z": "38b54e049c9b78a2",
        "g": "f174edef7e963973",
        "name": "Sensebox1 Temperature Box",
        "func": "var temperature_min = msg.payload.data.temperature_min.toFixed(2);\nmsg.payload = temperature_min;\nmsg.topic = 'Minimum Temperature';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 780,
        "wires": [
            [
                "72c7de4bc8c0125b",
                "f06412d54e78e072"
            ]
        ]
    },
    {
        "id": "e6d1614092aeee47",
        "type": "function",
        "z": "38b54e049c9b78a2",
        "g": "f174edef7e963973",
        "name": "Sensebox1 Humidity",
        "func": "var humidity = msg.payload.data.humidity.toFixed(2);\nmsg.payload = humidity+'%';\nmsg.topic = \"Relative Humidity\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 820,
        "wires": [
            [
                "645c15023fe95923",
                "0af80c47b97f60cb"
            ]
        ]
    },
    {
        "id": "1d795f7f17004b3f",
        "type": "function",
        "z": "38b54e049c9b78a2",
        "g": "f174edef7e963973",
        "name": "Sensebox1 Lux",
        "func": "var lux = msg.payload.data.lux.toFixed(2);\nmsg.payload = lux;\nmsg.topic = \"Illuminance\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 860,
        "wires": [
            [
                "64f78280055f842f",
                "5fe47adc65b0071f"
            ]
        ]
    },
    {
        "id": "9e00dcd57b8dc3df",
        "type": "function",
        "z": "38b54e049c9b78a2",
        "g": "f174edef7e963973",
        "name": "Sensebox1 UV",
        "func": "var uv = msg.payload.data.uv.toFixed(2);\nmsg.payload = uv;\nmsg.topic = \"UV Intensity\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 900,
        "wires": [
            [
                "939bff43d93b75a3",
                "3e6aba94f453fe80"
            ]
        ]
    },
    {
        "id": "e86acecaedbe6f26",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "f174edef7e963973",
        "name": "Temperature Gauge",
        "group": "2cfaf224e1791a9f",
        "order": 2,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 1820,
        "y": 740,
        "wires": []
    },
    {
        "id": "72c7de4bc8c0125b",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "f174edef7e963973",
        "name": "Box Temperature Gauge",
        "group": "2cfaf224e1791a9f",
        "order": 3,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Box Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 1830,
        "y": 780,
        "wires": []
    },
    {
        "id": "645c15023fe95923",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "f174edef7e963973",
        "name": "Humidity Gauge",
        "group": "2cfaf224e1791a9f",
        "order": 4,
        "width": 4,
        "height": 3,
        "gtype": "wave",
        "title": "Humidity",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1800,
        "y": 820,
        "wires": []
    },
    {
        "id": "64f78280055f842f",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "f174edef7e963973",
        "name": "illuminance gauge",
        "group": "2cfaf224e1791a9f",
        "order": 5,
        "width": 4,
        "height": 3,
        "gtype": "donut",
        "title": "Illuminance",
        "label": "lx",
        "format": "{{value}}",
        "min": 0,
        "max": "170000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "50000",
        "seg2": "120000",
        "diff": false,
        "className": "",
        "x": 1810,
        "y": 860,
        "wires": []
    },
    {
        "id": "939bff43d93b75a3",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "f174edef7e963973",
        "name": "UV Intensity Gauge",
        "group": "2cfaf224e1791a9f",
        "order": 6,
        "width": 4,
        "height": 3,
        "gtype": "donut",
        "title": "UV Intensity",
        "label": "µW⋅cm⁻²",
        "format": "{{value}}",
        "min": 0,
        "max": "600",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "200",
        "seg2": "400",
        "diff": false,
        "className": "",
        "x": 1810,
        "y": 900,
        "wires": []
    },
    {
        "id": "d5883ff21740d3b0",
        "type": "function",
        "z": "38b54e049c9b78a2",
        "g": "f174edef7e963973",
        "name": "Sensebox1 Fan Active",
        "func": "var fan_active = msg.payload.data.fan_active;\nif (fan_active == 0) {\n    msg.payload = 'Inactive';\n} else {\n    msg.payload = 'Active';\n}\n\nmsg.topic = \"Fan Status\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 940,
        "wires": [
            [
                "8e01da3a1c3b2bd8",
                "0c245a8ee8c75d5b"
            ]
        ]
    },
    {
        "id": "8e01da3a1c3b2bd8",
        "type": "ui_text",
        "z": "38b54e049c9b78a2",
        "g": "f174edef7e963973",
        "group": "2cfaf224e1791a9f",
        "order": 7,
        "width": 4,
        "height": 3,
        "name": "Fan Status",
        "label": "Fan Status",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Georgia,Georgia,serif",
        "fontSize": 16,
        "color": "#000000",
        "x": 1790,
        "y": 940,
        "wires": []
    },
    {
        "id": "ea864569f7d43714",
        "type": "switch",
        "z": "38b54e049c9b78a2",
        "g": "f174edef7e963973",
        "name": "Sensebox3",
        "property": "payload.device_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "sensebox-03",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1250,
        "y": 840,
        "wires": [
            [
                "ad5d2e99db98a319",
                "f9859fcd0162da68",
                "e6d1614092aeee47",
                "1d795f7f17004b3f",
                "9e00dcd57b8dc3df",
                "d5883ff21740d3b0"
            ]
        ]
    },
    {
        "id": "09e3d8fe6c820bfe",
        "type": "switch",
        "z": "38b54e049c9b78a2",
        "g": "12e64bef091f31a6",
        "name": "Sensebox4",
        "property": "payload.device_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "sensebox-04",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2530,
        "y": 180,
        "wires": [
            [
                "23461503ee4730b8",
                "b286a66e1d9fa3d1",
                "e10d35d4855771a0",
                "1127302d79646348",
                "f2dcc0d9114b4049",
                "d2d230cc2d2e4744"
            ]
        ]
    },
    {
        "id": "23461503ee4730b8",
        "type": "function",
        "z": "38b54e049c9b78a2",
        "g": "12e64bef091f31a6",
        "name": "Sensebox1 Temperature",
        "func": "var temperature = msg.payload.data.temperature.toFixed(2);\nmsg.payload = temperature;\nmsg.topic = 'Temperature';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2850,
        "y": 80,
        "wires": [
            [
                "3201a185c0e8d6ba",
                "03cd5477d9dd23ba"
            ]
        ]
    },
    {
        "id": "b286a66e1d9fa3d1",
        "type": "function",
        "z": "38b54e049c9b78a2",
        "g": "12e64bef091f31a6",
        "name": "Sensebox1 Temperature Box",
        "func": "var temperature_min = msg.payload.data.temperature_min.toFixed(2);\nmsg.payload = temperature_min;\nmsg.topic = 'Minimum Temperature';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2860,
        "y": 120,
        "wires": [
            [
                "de39a0e80e3378a0",
                "8b0d9387585ffa40"
            ]
        ]
    },
    {
        "id": "e10d35d4855771a0",
        "type": "function",
        "z": "38b54e049c9b78a2",
        "g": "12e64bef091f31a6",
        "name": "Sensebox1 Humidity",
        "func": "var humidity = msg.payload.data.humidity.toFixed(2);\nmsg.payload = humidity+'%';\nmsg.topic = \"Relative Humidity\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2840,
        "y": 160,
        "wires": [
            [
                "306f9e72d0d7c840",
                "73085b29fa0e72df"
            ]
        ]
    },
    {
        "id": "1127302d79646348",
        "type": "function",
        "z": "38b54e049c9b78a2",
        "g": "12e64bef091f31a6",
        "name": "Sensebox1 Lux",
        "func": "var lux = msg.payload.data.lux.toFixed(2);\nmsg.payload = lux;\nmsg.topic = \"Illuminance\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2820,
        "y": 200,
        "wires": [
            [
                "1bac8573e9ff5f8b",
                "3cd212e77e7802bc"
            ]
        ]
    },
    {
        "id": "f2dcc0d9114b4049",
        "type": "function",
        "z": "38b54e049c9b78a2",
        "g": "12e64bef091f31a6",
        "name": "Sensebox1 UV",
        "func": "var uv = msg.payload.data.uv.toFixed(2);\nmsg.payload = uv;\nmsg.topic = \"UV Intensity\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2820,
        "y": 240,
        "wires": [
            [
                "c812b645056f71e2",
                "5e25c3a5d274d92a"
            ]
        ]
    },
    {
        "id": "3201a185c0e8d6ba",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "12e64bef091f31a6",
        "name": "Temperature Gauge",
        "group": "9bc8f00db1f06ac5",
        "order": 2,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 3140,
        "y": 80,
        "wires": []
    },
    {
        "id": "de39a0e80e3378a0",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "12e64bef091f31a6",
        "name": "Box Temperature Gauge",
        "group": "9bc8f00db1f06ac5",
        "order": 3,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Box Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 3150,
        "y": 120,
        "wires": []
    },
    {
        "id": "306f9e72d0d7c840",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "12e64bef091f31a6",
        "name": "Humidity Gauge",
        "group": "9bc8f00db1f06ac5",
        "order": 4,
        "width": 4,
        "height": 3,
        "gtype": "wave",
        "title": "Humidity",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 3120,
        "y": 160,
        "wires": []
    },
    {
        "id": "1bac8573e9ff5f8b",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "12e64bef091f31a6",
        "name": "illuminance gauge",
        "group": "9bc8f00db1f06ac5",
        "order": 5,
        "width": 4,
        "height": 3,
        "gtype": "donut",
        "title": "Illuminance",
        "label": "lx",
        "format": "{{value}}",
        "min": 0,
        "max": "170000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "50000",
        "seg2": "120000",
        "diff": false,
        "className": "",
        "x": 3130,
        "y": 200,
        "wires": []
    },
    {
        "id": "c812b645056f71e2",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "12e64bef091f31a6",
        "name": "UV Intensity Gauge",
        "group": "9bc8f00db1f06ac5",
        "order": 6,
        "width": 4,
        "height": 3,
        "gtype": "donut",
        "title": "UV Intensity",
        "label": "µW⋅cm⁻²",
        "format": "{{value}}",
        "min": 0,
        "max": "600",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "200",
        "seg2": "400",
        "diff": false,
        "className": "",
        "x": 3130,
        "y": 240,
        "wires": []
    },
    {
        "id": "d2d230cc2d2e4744",
        "type": "function",
        "z": "38b54e049c9b78a2",
        "g": "12e64bef091f31a6",
        "name": "Sensebox1 Fan Active",
        "func": "var fan_active = msg.payload.data.fan_active;\nif (fan_active == 0) {\n    msg.payload = 'Inactive';\n} else {\n    msg.payload = 'Active';\n}\n\nmsg.topic = \"Fan Status\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2840,
        "y": 280,
        "wires": [
            [
                "d12cc7df152d7800",
                "8288b460598eefb0"
            ]
        ]
    },
    {
        "id": "d12cc7df152d7800",
        "type": "ui_text",
        "z": "38b54e049c9b78a2",
        "g": "12e64bef091f31a6",
        "group": "9bc8f00db1f06ac5",
        "order": 7,
        "width": 4,
        "height": 3,
        "name": "Fan Status",
        "label": "Fan Status",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Georgia,Georgia,serif",
        "fontSize": 16,
        "color": "#000000",
        "x": 3110,
        "y": 280,
        "wires": []
    },
    {
        "id": "9fcf62de1eba7bfc",
        "type": "switch",
        "z": "38b54e049c9b78a2",
        "g": "f990b6905dd85c4c",
        "name": "Sensebox6",
        "property": "payload.device_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "sensebox-06",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2530,
        "y": 500,
        "wires": [
            [
                "441c56c9f57e7c36",
                "cf7cc869e4d9663c",
                "ca3a885323f3881d",
                "4cbbb10b5bef62a6",
                "796c868acd497c17",
                "87707e20c0c3035b"
            ]
        ]
    },
    {
        "id": "441c56c9f57e7c36",
        "type": "function",
        "z": "38b54e049c9b78a2",
        "g": "f990b6905dd85c4c",
        "name": "Sensebox1 Temperature",
        "func": "var temperature = msg.payload.data.temperature.toFixed(2);\nmsg.payload = temperature;\nmsg.topic = 'Temperature';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2850,
        "y": 420,
        "wires": [
            [
                "0eb24d51f30bfafd",
                "b72adbf962de8de5"
            ]
        ]
    },
    {
        "id": "cf7cc869e4d9663c",
        "type": "function",
        "z": "38b54e049c9b78a2",
        "g": "f990b6905dd85c4c",
        "name": "Sensebox1 Temperature Box",
        "func": "var temperature_min = msg.payload.data.temperature_min.toFixed(2);\nmsg.payload = temperature_min;\nmsg.topic = 'Minimum Temperature';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2860,
        "y": 460,
        "wires": [
            [
                "b6eb9600104634f6",
                "97e79c728e3d0213"
            ]
        ]
    },
    {
        "id": "ca3a885323f3881d",
        "type": "function",
        "z": "38b54e049c9b78a2",
        "g": "f990b6905dd85c4c",
        "name": "Sensebox1 Humidity",
        "func": "var humidity = msg.payload.data.humidity.toFixed(2);\nmsg.payload = humidity+'%';\nmsg.topic = \"Relative Humidity\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2840,
        "y": 500,
        "wires": [
            [
                "29f173870be67ad1",
                "bba5bc60f950589a"
            ]
        ]
    },
    {
        "id": "4cbbb10b5bef62a6",
        "type": "function",
        "z": "38b54e049c9b78a2",
        "g": "f990b6905dd85c4c",
        "name": "Sensebox1 Lux",
        "func": "var lux = msg.payload.data.lux.toFixed(2);\nmsg.payload = lux;\nmsg.topic = \"Illuminance\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2820,
        "y": 540,
        "wires": [
            [
                "abf8f289599ffdfd",
                "92588b5572afbe71"
            ]
        ]
    },
    {
        "id": "796c868acd497c17",
        "type": "function",
        "z": "38b54e049c9b78a2",
        "g": "f990b6905dd85c4c",
        "name": "Sensebox1 UV",
        "func": "var uv = msg.payload.data.uv.toFixed(2);\nmsg.payload = uv;\nmsg.topic = \"UV Intensity\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2820,
        "y": 580,
        "wires": [
            [
                "b99209d777bc5577",
                "da1a2f6f760b74ef"
            ]
        ]
    },
    {
        "id": "0eb24d51f30bfafd",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "f990b6905dd85c4c",
        "name": "Temperature Gauge",
        "group": "e94fdd1c5dec442c",
        "order": 2,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 3140,
        "y": 420,
        "wires": []
    },
    {
        "id": "b6eb9600104634f6",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "f990b6905dd85c4c",
        "name": "Box Temperature Gauge",
        "group": "e94fdd1c5dec442c",
        "order": 3,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Box Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 3150,
        "y": 460,
        "wires": []
    },
    {
        "id": "29f173870be67ad1",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "f990b6905dd85c4c",
        "name": "Humidity Gauge",
        "group": "e94fdd1c5dec442c",
        "order": 4,
        "width": 4,
        "height": 3,
        "gtype": "wave",
        "title": "Humidity",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 3120,
        "y": 500,
        "wires": []
    },
    {
        "id": "abf8f289599ffdfd",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "f990b6905dd85c4c",
        "name": "illuminance gauge",
        "group": "e94fdd1c5dec442c",
        "order": 5,
        "width": 4,
        "height": 3,
        "gtype": "donut",
        "title": "Illuminance",
        "label": "lx",
        "format": "{{value}}",
        "min": 0,
        "max": "170000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "50000",
        "seg2": "120000",
        "diff": false,
        "className": "",
        "x": 3130,
        "y": 540,
        "wires": []
    },
    {
        "id": "b99209d777bc5577",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "f990b6905dd85c4c",
        "name": "UV Intensity Gauge",
        "group": "e94fdd1c5dec442c",
        "order": 6,
        "width": 4,
        "height": 3,
        "gtype": "donut",
        "title": "UV Intensity",
        "label": "µW⋅cm⁻²",
        "format": "{{value}}",
        "min": 0,
        "max": "600",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "200",
        "seg2": "400",
        "diff": false,
        "className": "",
        "x": 3130,
        "y": 580,
        "wires": []
    },
    {
        "id": "87707e20c0c3035b",
        "type": "function",
        "z": "38b54e049c9b78a2",
        "g": "f990b6905dd85c4c",
        "name": "Sensebox1 Fan Active",
        "func": "var fan_active = msg.payload.data.fan_active;\nif (fan_active == 0) {\n    msg.payload = 'Inactive';\n} else {\n    msg.payload = 'Active';\n}\n\nmsg.topic = \"Fan Status\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2840,
        "y": 620,
        "wires": [
            [
                "0b66c7d7883240f8",
                "7b820a5bfb247f11"
            ]
        ]
    },
    {
        "id": "0b66c7d7883240f8",
        "type": "ui_text",
        "z": "38b54e049c9b78a2",
        "g": "f990b6905dd85c4c",
        "group": "e94fdd1c5dec442c",
        "order": 7,
        "width": 4,
        "height": 3,
        "name": "Fan Status",
        "label": "Fan Status",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Georgia,Georgia,serif",
        "fontSize": 16,
        "color": "#000000",
        "x": 3110,
        "y": 620,
        "wires": []
    },
    {
        "id": "bec2ad6efeddf6e3",
        "type": "switch",
        "z": "38b54e049c9b78a2",
        "g": "5c256e156f8f7362",
        "name": "Sensebox7",
        "property": "payload.device_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "sensebox-07",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2530,
        "y": 820,
        "wires": [
            [
                "5b6fa4bc1f13c595",
                "0a144ae50fb8d1f2",
                "4bf49a859678b174",
                "fcba1e6a9ccddb66",
                "2181e868a5d2732e",
                "bce8ebc03dec8282"
            ]
        ]
    },
    {
        "id": "5b6fa4bc1f13c595",
        "type": "function",
        "z": "38b54e049c9b78a2",
        "g": "5c256e156f8f7362",
        "name": "Sensebox1 Temperature",
        "func": "var temperature = msg.payload.data.temperature.toFixed(2);\nmsg.payload = temperature;\nmsg.topic = 'Temperature';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2850,
        "y": 720,
        "wires": [
            [
                "f46caf3d6c12b818",
                "f13619bee97a5da0"
            ]
        ]
    },
    {
        "id": "0a144ae50fb8d1f2",
        "type": "function",
        "z": "38b54e049c9b78a2",
        "g": "5c256e156f8f7362",
        "name": "Sensebox1 Temperature Box",
        "func": "var temperature_min = msg.payload.data.temperature_min.toFixed(2);\nmsg.payload = temperature_min;\nmsg.topic = 'Minimum Temperature';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2860,
        "y": 760,
        "wires": [
            [
                "eb98eb6c3b2fc4f2",
                "e736f70c11de29f0"
            ]
        ]
    },
    {
        "id": "4bf49a859678b174",
        "type": "function",
        "z": "38b54e049c9b78a2",
        "g": "5c256e156f8f7362",
        "name": "Sensebox1 Humidity",
        "func": "var humidity = msg.payload.data.humidity.toFixed(2);\nmsg.payload = humidity+'%';\nmsg.topic = \"Relative Humidity\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2840,
        "y": 800,
        "wires": [
            [
                "e2f0dd099997f631",
                "5e8944e8a99ef5b4"
            ]
        ]
    },
    {
        "id": "fcba1e6a9ccddb66",
        "type": "function",
        "z": "38b54e049c9b78a2",
        "g": "5c256e156f8f7362",
        "name": "Sensebox1 Lux",
        "func": "var lux = msg.payload.data.lux.toFixed(2);\nmsg.payload = lux;\nmsg.topic = \"Illuminance\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2820,
        "y": 840,
        "wires": [
            [
                "288d8650647e8af6",
                "e50335a07bed3da5"
            ]
        ]
    },
    {
        "id": "2181e868a5d2732e",
        "type": "function",
        "z": "38b54e049c9b78a2",
        "g": "5c256e156f8f7362",
        "name": "Sensebox1 UV",
        "func": "var uv = msg.payload.data.uv.toFixed(2);\nmsg.payload = uv;\nmsg.topic = \"UV Intensity\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2820,
        "y": 880,
        "wires": [
            [
                "0c83c20e142a0b8a",
                "2591a9a7a473e839"
            ]
        ]
    },
    {
        "id": "f46caf3d6c12b818",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "5c256e156f8f7362",
        "name": "Temperature Gauge",
        "group": "4e8918bf6c385740",
        "order": 2,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 3140,
        "y": 720,
        "wires": []
    },
    {
        "id": "eb98eb6c3b2fc4f2",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "5c256e156f8f7362",
        "name": "Box Temperature Gauge",
        "group": "4e8918bf6c385740",
        "order": 3,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Box Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 3150,
        "y": 760,
        "wires": []
    },
    {
        "id": "e2f0dd099997f631",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "5c256e156f8f7362",
        "name": "Humidity Gauge",
        "group": "4e8918bf6c385740",
        "order": 4,
        "width": 4,
        "height": 3,
        "gtype": "wave",
        "title": "Humidity",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 3120,
        "y": 800,
        "wires": []
    },
    {
        "id": "288d8650647e8af6",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "5c256e156f8f7362",
        "name": "illuminance gauge",
        "group": "4e8918bf6c385740",
        "order": 5,
        "width": 4,
        "height": 3,
        "gtype": "donut",
        "title": "Illuminance",
        "label": "lx",
        "format": "{{value}}",
        "min": 0,
        "max": "170000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "50000",
        "seg2": "120000",
        "diff": false,
        "className": "",
        "x": 3130,
        "y": 840,
        "wires": []
    },
    {
        "id": "0c83c20e142a0b8a",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "5c256e156f8f7362",
        "name": "UV Intensity Gauge",
        "group": "4e8918bf6c385740",
        "order": 6,
        "width": 4,
        "height": 3,
        "gtype": "donut",
        "title": "UV Intensity",
        "label": "µW⋅cm⁻²",
        "format": "{{value}}",
        "min": 0,
        "max": "600",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "200",
        "seg2": "400",
        "diff": false,
        "className": "",
        "x": 3130,
        "y": 880,
        "wires": []
    },
    {
        "id": "bce8ebc03dec8282",
        "type": "function",
        "z": "38b54e049c9b78a2",
        "g": "5c256e156f8f7362",
        "name": "Sensebox1 Fan Active",
        "func": "var fan_active = msg.payload.data.fan_active;\nif (fan_active == 0) {\n    msg.payload = 'Inactive';\n} else {\n    msg.payload = 'Active';\n}\n\nmsg.topic = \"Fan Status\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2840,
        "y": 920,
        "wires": [
            [
                "b267bf0b99ce7948",
                "3c1d872032da9754"
            ]
        ]
    },
    {
        "id": "b267bf0b99ce7948",
        "type": "ui_text",
        "z": "38b54e049c9b78a2",
        "g": "5c256e156f8f7362",
        "group": "4e8918bf6c385740",
        "order": 7,
        "width": 4,
        "height": 3,
        "name": "Fan Status",
        "label": "Fan Status",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Georgia,Georgia,serif",
        "fontSize": 16,
        "color": "#000000",
        "x": 3110,
        "y": 920,
        "wires": []
    },
    {
        "id": "6ffd19fd2800a125",
        "type": "function",
        "z": "38b54e049c9b78a2",
        "name": "Temp Sensor Summary",
        "func": "var att = msg.payload;\nvar sensor = att.device_id;\n\n// Retrieve existing sensor data from context\nvar data = context.get('sensorData') || {\n    sensor_id1: 'Sensebox-1',\n    temperature1: null,\n    humidity1: null,\n    sensor_id2: 'Sensebox-2',\n    temperature2: null,\n    humidity2: null,\n    sensor_id3: 'Sensebox-3',\n    temperature3: null,\n    humidity3: null,\n    sensor_id4: 'Sensebox-4',\n    temperature4: null,\n    humidity4: null,\n    sensor_id6: 'Sensebox-6',\n    temperature6: null,\n    humidity6: null,\n    sensor_id7: 'Sensebox-7',\n    temperature7: null,\n    humidity7: null\n};\n\n// Update the relevant sensor data\nif (sensor == 'sensebox-01') {\n    data.temperature1 = parseFloat(att.data.temperature).toFixed(2);\n    data.humidity1 = att.data.humidity;\n}\n\nif (sensor == 'sensebox-02') {\n    data.temperature2 = parseFloat(att.data.temperature).toFixed(2);\n    data.humidity2 = att.data.humidity;\n}\n\nif (sensor == 'sensebox-03') {\n    data.temperature3 = parseFloat(att.data.temperature).toFixed(2);\n    data.humidity3 = att.data.humidity;\n}\n\nif (sensor == 'sensebox-04') {\n    data.temperature4 = parseFloat(att.data.temperature).toFixed(2);\n    data.humidity4 = att.data.humidity;\n}\n\nif (sensor == 'sensebox-06') {\n    data.temperature6 = parseFloat(att.data.temperature).toFixed(2);\n    data.humidity6 = att.data.humidity;\n}\n\nif (sensor == 'sensebox-07') {\n    data.temperature7 = parseFloat(att.data.temperature).toFixed(2);\n    data.humidity7 = att.data.humidity;\n}\n\n// Store the updated data back in context\ncontext.set('sensorData', data);\n\n// Set the updated data as the message payload\nmsg.payload = data;\nmsg.threshold1 = 32;\nmsg.threshold2 = 38;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 960,
        "wires": [
            [
                "c8489b6b03a6d9ce"
            ]
        ]
    },
    {
        "id": "c8489b6b03a6d9ce",
        "type": "ui_template",
        "z": "38b54e049c9b78a2",
        "group": "b44e2d3b2bac6f8e",
        "name": "Temp Sensor Table",
        "order": 2,
        "width": 14,
        "height": "8",
        "format": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Temperature Sensor</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\n    <script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js\"></script>\n    <style>\n        /* Add a unique class to namespace table1 styles */\n        .table1-container .normal {\n            background-color: #85dc85 !important;\n        }\n    \n        .table1-container .orange {\n            background-color: #f4d03f !important;\n        }\n    \n        .table1-container .red {\n            background-color: #e74c3c !important;\n        }\n    \n        .table1-container .col-sensor {\n            width: 30%;\n        }\n    \n        .table1-container .col-temp {\n            width: 25%;\n        }\n    \n        .table1-container .col-humidity {\n            width: 25%;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container table1-container\">\n        <table class=\"table table-striped table-bordered table-hover text-center\">\n            <thead class=\"table-primary\">\n                <tr>\n                    <th class=\"col-sensor\">Sensor ID</th>\n                    <th class=\"col-temp\">Air Temperature (°C)</th>\n                    <th class=\"col-humidity\">Relative Humidity (%)</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td><a href=\"#!/5?socketid=1sl4YbucrOoM13bMAAZ9\" target=\"_blank\"><button class=\"btn btn-light\">{{msg.payload.sensor_id1}}</button></a></td>\n\n                    <td ng-class=\"{'normal': msg.payload.temperature1<msg.threshold1, 'orange': msg.payload.temperature1>=msg.threshold1 && msg.payload.temperature1<msg.threshold2, 'red':msg.payload.temperature1>=msg.threshold2}\">{{msg.payload.temperature1}}</td>\n\n                    <td ng-class=\"{'normal': msg.payload.humidity1<=70, 'orange': msg.payload.humidity1>70 && msg.payload.humidity1<=85, 'red':msg.payload.humidity1>85}\">{{msg.payload.humidity1}}</td>\n                    \n                </tr>\n                <tr>\n                    <td><a href=\"#!/6?socketid=P6thRpRp8T7Or8VCAAaF\" target=\"_blank\"><button class=\"btn btn-light\">{{msg.payload.sensor_id2}}</button></a></td>\n\n                    <td ng-class=\"{'normal': msg.payload.temperature2<msg.threshold1, 'orange': msg.payload.temperature2>=msg.threshold1 && msg.payload.temperature2<msg.threshold2, 'red':msg.payload.temperature2>=msg.threshold2}\">{{msg.payload.temperature2}}</td>\n\n                    <td ng-class=\"{'normal': msg.payload.humidity2<=70, 'orange': msg.payload.humidity2>70 && msg.payload.humidity2<=85, 'red':msg.payload.humidity2>85}\">{{msg.payload.humidity2}}</td>\n                    \n                </tr>\n                <tr>\n                    <td><a href=\"#!/7?socketid=P6thRpRp8T7Or8VCAAaF\" target=\"_blank\"><button class=\"btn btn-light\">{{msg.payload.sensor_id3}}</button></a></td>\n\n                    <td ng-class=\"{'normal': msg.payload.temperature3<msg.threshold1, 'orange': msg.payload.temperature3>=msg.threshold1 && msg.payload.temperature3<msg.threshold2, 'red':msg.payload.temperature3>=msg.threshold2}\">{{msg.payload.temperature3}}</td>\n\n                    <td ng-class=\"{'normal': msg.payload.humidity3<=70, 'orange': msg.payload.humidity3>70 && msg.payload.humidity3<=85, 'red':msg.payload.humidity3>85}\">{{msg.payload.humidity3}}</td>\n                    \n                </tr>\n                <tr>\n                    <td><a href=\"#!/8?socketid=P6thRpRp8T7Or8VCAAaF\" target=\"_blank\"><button class=\"btn btn-light\">{{msg.payload.sensor_id4}}</button></a></td>\n\n                    <td ng-class=\"{'normal': msg.payload.temperature4<msg.threshold1, 'orange': msg.payload.temperature4>=msg.threshold1 && msg.payload.temperature4<msg.threshold2, 'red':msg.payload.temperature4>=msg.threshold2}\">{{msg.payload.temperature4}}</td>\n\n                    <td ng-class=\"{'normal': msg.payload.humidity4<=70, 'orange': msg.payload.humidity4>70 && msg.payload.humidity4<=85, 'red':msg.payload.humidity4>85}\">{{msg.payload.humidity4}}</td>\n                    \n                </tr>\n                <tr>\n                    <td><a href=\"#!/9?socketid=P6thRpRp8T7Or8VCAAaF\" target=\"_blank\"><button class=\"btn btn-light\">{{msg.payload.sensor_id6}}</button></a></td>\n\n                    <td ng-class=\"{'normal': msg.payload.temperature6<msg.threshold1, 'orange': msg.payload.temperature6>=msg.threshold1 && msg.payload.temperature6<msg.threshold2, 'red':msg.payload.temperature6>=msg.threshold2}\">{{msg.payload.temperature6}}</td>\n\n                    <td ng-class=\"{'normal': msg.payload.humidity6<=70, 'orange': msg.payload.humidity6>70 && msg.payload.humidity6<=85, 'red':msg.payload.humidity6>85}\">{{msg.payload.humidity6}}</td>\n                    \n                </tr>\n                <tr>\n                    <td><a href=\"#!/10?socketid=P6thRpRp8T7Or8VCAAaF\" target=\"_blank\"><button class=\"btn btn-light\">{{msg.payload.sensor_id7}}</button></a></td>\n\n                    <td ng-class=\"{'normal': msg.payload.temperature7<msg.threshold1, 'orange': msg.payload.temperature7>=msg.threshold1 && msg.payload.temperature7<msg.threshold2, 'red':msg.payload.temperature7>=msg.threshold2}\">{{msg.payload.temperature7}}</td>\n\n                    <td ng-class=\"{'normal': msg.payload.humidity7<=70, 'orange': msg.payload.humidity7>70 && msg.payload.humidity7<=85, 'red':msg.payload.humidity7>85}\">{{msg.payload.humidity7}}</td>\n                    \n                </tr>\n               \n            </tbody>\n        </table>\n    </div>\n</body>\n</html>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 770,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "d84ba076229b2830",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "a1a35ba9bcbdc331",
        "name": "Temperature Gauge",
        "group": "a5281de7acfee762",
        "order": 2,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 2140,
        "y": 100,
        "wires": []
    },
    {
        "id": "e27baaab49f78a23",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "a1a35ba9bcbdc331",
        "name": "Box Temperature Gauge",
        "group": "a5281de7acfee762",
        "order": 3,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Box Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 2150,
        "y": 140,
        "wires": []
    },
    {
        "id": "562e28fbfd47b8ca",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "a1a35ba9bcbdc331",
        "name": "illuminance gauge",
        "group": "a5281de7acfee762",
        "order": 5,
        "width": 4,
        "height": 3,
        "gtype": "donut",
        "title": "Illuminance",
        "label": "lx",
        "format": "{{value}}",
        "min": 0,
        "max": "170000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "50000",
        "seg2": "120000",
        "diff": false,
        "className": "",
        "x": 2130,
        "y": 220,
        "wires": []
    },
    {
        "id": "080b6aa76dca3552",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "a1a35ba9bcbdc331",
        "name": "Humidity Gauge",
        "group": "a5281de7acfee762",
        "order": 4,
        "width": 4,
        "height": 3,
        "gtype": "wave",
        "title": "Humidity",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 2120,
        "y": 180,
        "wires": []
    },
    {
        "id": "0afb2dbcec7fde45",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "a1a35ba9bcbdc331",
        "name": "UV Intensity Gauge",
        "group": "a5281de7acfee762",
        "order": 6,
        "width": 4,
        "height": 3,
        "gtype": "donut",
        "title": "UV Intensity",
        "label": "µW⋅cm⁻²",
        "format": "{{value}}",
        "min": 0,
        "max": "600",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "200",
        "seg2": "400",
        "diff": false,
        "className": "",
        "x": 2130,
        "y": 260,
        "wires": []
    },
    {
        "id": "75340353cad78e79",
        "type": "ui_text",
        "z": "38b54e049c9b78a2",
        "g": "a1a35ba9bcbdc331",
        "group": "a5281de7acfee762",
        "order": 7,
        "width": 4,
        "height": 3,
        "name": "Fan Status",
        "label": "Fan Status",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "Georgia,Georgia,serif",
        "fontSize": 16,
        "color": "#000000",
        "x": 2110,
        "y": 300,
        "wires": []
    },
    {
        "id": "1d1912f4b5053182",
        "type": "comment",
        "z": "38b54e049c9b78a2",
        "g": "a1a35ba9bcbdc331",
        "name": "For Hyperlink",
        "info": "",
        "x": 2150,
        "y": 60,
        "wires": []
    },
    {
        "id": "7764c3f0ed2557de",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "b579cf62cb73e1e1",
        "name": "Temperature Gauge",
        "group": "f22c80946683f6a8",
        "order": 2,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 2140,
        "y": 420,
        "wires": []
    },
    {
        "id": "8fefa9fe35b1a077",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "b579cf62cb73e1e1",
        "name": "Box Temperature Gauge",
        "group": "f22c80946683f6a8",
        "order": 3,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Box Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 2150,
        "y": 460,
        "wires": []
    },
    {
        "id": "2c40b1a2f4e49291",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "b579cf62cb73e1e1",
        "name": "Humidity Gauge",
        "group": "f22c80946683f6a8",
        "order": 4,
        "width": 4,
        "height": 3,
        "gtype": "wave",
        "title": "Humidity",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 2120,
        "y": 500,
        "wires": []
    },
    {
        "id": "2de80bc2ac8215f6",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "b579cf62cb73e1e1",
        "name": "illuminance gauge",
        "group": "f22c80946683f6a8",
        "order": 5,
        "width": 4,
        "height": 3,
        "gtype": "donut",
        "title": "Illuminance",
        "label": "lx",
        "format": "{{value}}",
        "min": 0,
        "max": "170000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "50000",
        "seg2": "120000",
        "diff": false,
        "className": "",
        "x": 2130,
        "y": 540,
        "wires": []
    },
    {
        "id": "3f69e791f089a0e8",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "b579cf62cb73e1e1",
        "name": "UV Intensity Gauge",
        "group": "f22c80946683f6a8",
        "order": 6,
        "width": 4,
        "height": 3,
        "gtype": "donut",
        "title": "UV Intensity",
        "label": "µW⋅cm⁻²",
        "format": "{{value}}",
        "min": 0,
        "max": "600",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "200",
        "seg2": "400",
        "diff": false,
        "className": "",
        "x": 2130,
        "y": 580,
        "wires": []
    },
    {
        "id": "cab53c3b4389de15",
        "type": "ui_text",
        "z": "38b54e049c9b78a2",
        "g": "b579cf62cb73e1e1",
        "group": "f22c80946683f6a8",
        "order": 7,
        "width": 4,
        "height": 3,
        "name": "Fan Status",
        "label": "Fan Status",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Georgia,Georgia,serif",
        "fontSize": 16,
        "color": "#000000",
        "x": 2110,
        "y": 620,
        "wires": []
    },
    {
        "id": "f9e92c035abfb61e",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "f174edef7e963973",
        "name": "Temperature Gauge",
        "group": "894ffb0a4bc5684d",
        "order": 2,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 2140,
        "y": 740,
        "wires": []
    },
    {
        "id": "f06412d54e78e072",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "f174edef7e963973",
        "name": "Box Temperature Gauge",
        "group": "894ffb0a4bc5684d",
        "order": 3,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Box Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 2150,
        "y": 780,
        "wires": []
    },
    {
        "id": "0af80c47b97f60cb",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "f174edef7e963973",
        "name": "Humidity Gauge",
        "group": "894ffb0a4bc5684d",
        "order": 4,
        "width": 4,
        "height": 3,
        "gtype": "wave",
        "title": "Humidity",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 2120,
        "y": 820,
        "wires": []
    },
    {
        "id": "5fe47adc65b0071f",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "f174edef7e963973",
        "name": "illuminance gauge",
        "group": "894ffb0a4bc5684d",
        "order": 5,
        "width": 4,
        "height": 3,
        "gtype": "donut",
        "title": "Illuminance",
        "label": "lx",
        "format": "{{value}}",
        "min": 0,
        "max": "170000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "50000",
        "seg2": "120000",
        "diff": false,
        "className": "",
        "x": 2130,
        "y": 860,
        "wires": []
    },
    {
        "id": "3e6aba94f453fe80",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "f174edef7e963973",
        "name": "UV Intensity Gauge",
        "group": "894ffb0a4bc5684d",
        "order": 6,
        "width": 4,
        "height": 3,
        "gtype": "donut",
        "title": "UV Intensity",
        "label": "µW⋅cm⁻²",
        "format": "{{value}}",
        "min": 0,
        "max": "600",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "200",
        "seg2": "400",
        "diff": false,
        "className": "",
        "x": 2130,
        "y": 900,
        "wires": []
    },
    {
        "id": "0c245a8ee8c75d5b",
        "type": "ui_text",
        "z": "38b54e049c9b78a2",
        "g": "f174edef7e963973",
        "group": "894ffb0a4bc5684d",
        "order": 7,
        "width": 4,
        "height": 3,
        "name": "Fan Status",
        "label": "Fan Status",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Georgia,Georgia,serif",
        "fontSize": 16,
        "color": "#000000",
        "x": 2110,
        "y": 940,
        "wires": []
    },
    {
        "id": "03cd5477d9dd23ba",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "12e64bef091f31a6",
        "name": "Temperature Gauge",
        "group": "2227c2cd15473dbf",
        "order": 2,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 3420,
        "y": 80,
        "wires": []
    },
    {
        "id": "8b0d9387585ffa40",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "12e64bef091f31a6",
        "name": "Box Temperature Gauge",
        "group": "2227c2cd15473dbf",
        "order": 3,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Box Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 3430,
        "y": 120,
        "wires": []
    },
    {
        "id": "73085b29fa0e72df",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "12e64bef091f31a6",
        "name": "Humidity Gauge",
        "group": "2227c2cd15473dbf",
        "order": 4,
        "width": 4,
        "height": 3,
        "gtype": "wave",
        "title": "Humidity",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 3400,
        "y": 160,
        "wires": []
    },
    {
        "id": "3cd212e77e7802bc",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "12e64bef091f31a6",
        "name": "illuminance gauge",
        "group": "2227c2cd15473dbf",
        "order": 5,
        "width": 4,
        "height": 3,
        "gtype": "donut",
        "title": "Illuminance",
        "label": "lx",
        "format": "{{value}}",
        "min": 0,
        "max": "170000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "50000",
        "seg2": "120000",
        "diff": false,
        "className": "",
        "x": 3410,
        "y": 200,
        "wires": []
    },
    {
        "id": "5e25c3a5d274d92a",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "12e64bef091f31a6",
        "name": "UV Intensity Gauge",
        "group": "2227c2cd15473dbf",
        "order": 6,
        "width": 4,
        "height": 3,
        "gtype": "donut",
        "title": "UV Intensity",
        "label": "µW⋅cm⁻²",
        "format": "{{value}}",
        "min": 0,
        "max": "600",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "200",
        "seg2": "400",
        "diff": false,
        "className": "",
        "x": 3410,
        "y": 240,
        "wires": []
    },
    {
        "id": "8288b460598eefb0",
        "type": "ui_text",
        "z": "38b54e049c9b78a2",
        "g": "12e64bef091f31a6",
        "group": "2227c2cd15473dbf",
        "order": 7,
        "width": 4,
        "height": 3,
        "name": "Fan Status",
        "label": "Fan Status",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Georgia,Georgia,serif",
        "fontSize": 16,
        "color": "#000000",
        "x": 3390,
        "y": 280,
        "wires": []
    },
    {
        "id": "b72adbf962de8de5",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "f990b6905dd85c4c",
        "name": "Temperature Gauge",
        "group": "875b63263cbb26ab",
        "order": 2,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 3420,
        "y": 420,
        "wires": []
    },
    {
        "id": "97e79c728e3d0213",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "f990b6905dd85c4c",
        "name": "Box Temperature Gauge",
        "group": "875b63263cbb26ab",
        "order": 3,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Box Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 3430,
        "y": 460,
        "wires": []
    },
    {
        "id": "bba5bc60f950589a",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "f990b6905dd85c4c",
        "name": "Humidity Gauge",
        "group": "875b63263cbb26ab",
        "order": 4,
        "width": 4,
        "height": 3,
        "gtype": "wave",
        "title": "Humidity",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 3400,
        "y": 500,
        "wires": []
    },
    {
        "id": "92588b5572afbe71",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "f990b6905dd85c4c",
        "name": "illuminance gauge",
        "group": "875b63263cbb26ab",
        "order": 5,
        "width": 4,
        "height": 3,
        "gtype": "donut",
        "title": "Illuminance",
        "label": "lx",
        "format": "{{value}}",
        "min": 0,
        "max": "170000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "50000",
        "seg2": "120000",
        "diff": false,
        "className": "",
        "x": 3410,
        "y": 540,
        "wires": []
    },
    {
        "id": "da1a2f6f760b74ef",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "f990b6905dd85c4c",
        "name": "UV Intensity Gauge",
        "group": "875b63263cbb26ab",
        "order": 6,
        "width": 4,
        "height": 3,
        "gtype": "donut",
        "title": "UV Intensity",
        "label": "µW⋅cm⁻²",
        "format": "{{value}}",
        "min": 0,
        "max": "600",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "200",
        "seg2": "400",
        "diff": false,
        "className": "",
        "x": 3410,
        "y": 580,
        "wires": []
    },
    {
        "id": "7b820a5bfb247f11",
        "type": "ui_text",
        "z": "38b54e049c9b78a2",
        "g": "f990b6905dd85c4c",
        "group": "875b63263cbb26ab",
        "order": 7,
        "width": 4,
        "height": 3,
        "name": "Fan Status",
        "label": "Fan Status",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Georgia,Georgia,serif",
        "fontSize": 16,
        "color": "#000000",
        "x": 3390,
        "y": 620,
        "wires": []
    },
    {
        "id": "f13619bee97a5da0",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "5c256e156f8f7362",
        "name": "Temperature Gauge",
        "group": "2f8d4cbc385125d3",
        "order": 2,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 3420,
        "y": 720,
        "wires": []
    },
    {
        "id": "e736f70c11de29f0",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "5c256e156f8f7362",
        "name": "Box Temperature Gauge",
        "group": "2f8d4cbc385125d3",
        "order": 3,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Box Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 3430,
        "y": 760,
        "wires": []
    },
    {
        "id": "5e8944e8a99ef5b4",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "5c256e156f8f7362",
        "name": "Humidity Gauge",
        "group": "2f8d4cbc385125d3",
        "order": 4,
        "width": 4,
        "height": 3,
        "gtype": "wave",
        "title": "Humidity",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 3400,
        "y": 800,
        "wires": []
    },
    {
        "id": "e50335a07bed3da5",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "5c256e156f8f7362",
        "name": "illuminance gauge",
        "group": "2f8d4cbc385125d3",
        "order": 5,
        "width": 4,
        "height": 3,
        "gtype": "donut",
        "title": "Illuminance",
        "label": "lx",
        "format": "{{value}}",
        "min": 0,
        "max": "170000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "50000",
        "seg2": "120000",
        "diff": false,
        "className": "",
        "x": 3410,
        "y": 840,
        "wires": []
    },
    {
        "id": "2591a9a7a473e839",
        "type": "ui_gauge",
        "z": "38b54e049c9b78a2",
        "g": "5c256e156f8f7362",
        "name": "UV Intensity Gauge",
        "group": "2f8d4cbc385125d3",
        "order": 6,
        "width": 4,
        "height": 3,
        "gtype": "donut",
        "title": "UV Intensity",
        "label": "µW⋅cm⁻²",
        "format": "{{value}}",
        "min": 0,
        "max": "600",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "200",
        "seg2": "400",
        "diff": false,
        "className": "",
        "x": 3410,
        "y": 880,
        "wires": []
    },
    {
        "id": "3c1d872032da9754",
        "type": "ui_text",
        "z": "38b54e049c9b78a2",
        "g": "5c256e156f8f7362",
        "group": "2f8d4cbc385125d3",
        "order": 7,
        "width": 4,
        "height": 3,
        "name": "Fan Status",
        "label": "Fan Status",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Georgia,Georgia,serif",
        "fontSize": 16,
        "color": "#000000",
        "x": 3390,
        "y": 920,
        "wires": []
    },
    {
        "id": "f8c6e665c5f25f70",
        "type": "ui_text",
        "z": "38b54e049c9b78a2",
        "group": "b44e2d3b2bac6f8e",
        "order": 1,
        "width": 14,
        "height": 1,
        "name": "",
        "label": "Temperature Sensor",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "20",
        "color": "#0527b3",
        "x": 780,
        "y": 920,
        "wires": []
    },
    {
        "id": "1e9e275c45386b39",
        "type": "mqtt in",
        "z": "b50396a4b33e90b1",
        "name": "Soil Sensor",
        "topic": "#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "3b9fb07e0e6380c8",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 290,
        "y": 200,
        "wires": [
            [
                "50e0e1d8807751fa",
                "31c3b31863422f79",
                "9d85abdad92ad821"
            ]
        ]
    },
    {
        "id": "50e0e1d8807751fa",
        "type": "debug",
        "z": "b50396a4b33e90b1",
        "name": "Soil Sensor Output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 140,
        "wires": []
    },
    {
        "id": "31c3b31863422f79",
        "type": "function",
        "z": "b50396a4b33e90b1",
        "name": "Extracting Soil Sensor Data",
        "func": "var att = msg.payload.uplink_message.decoded_payload;\n\nvar data = {};\n\nif (att.BatV) {\n    data.battery_voltage = att.BatV;\n}\n\nif (att.Mod==0 || att.Mod ==1) {\n    data.mod = att.Mod;\n}\n\nif (att.conduct_SOIL) {\n    data.conduct_soil = att.conduct_SOIL;\n}\n\nif (att.i_flag == 0 || att.i_flag == 1) {\n    data.i_flag = att.i_flag;\n}\n\nif (att.s_flag == 0 || att.s_flag == 1) {\n    data.s_flag = att.s_flag;\n}\n\nif (att.temp_DS18B20) {\n    data.temp_DS18B20 = att.temp_DS18B20;\n}\n\nif (att.temp_SOIL) {\n    data.temp_soil = att.temp_SOIL;\n}\n\nif (att.water_SOIL) {\n    data.water_soil = att.water_SOIL\n}\n\nvar body = {\n    timestamp: new Date(msg.payload.received_at),\n    metadata: msg._msgid,\n    type: \"soil_sensor\",\n    device_id: msg.payload.end_device_ids.device_id,\n    data: data\n};\n\nmsg.payload = body;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 260,
        "wires": [
            [
                "b49928c4445beeaa",
                "4563ed83471c21aa",
                "88a84be3b64723e7",
                "7e794dc9e0edacb2",
                "86380fd3535c869f",
                "6501355bea310b65",
                "65f3349637b23aa2",
                "e29db05210299c7d"
            ]
        ]
    },
    {
        "id": "65f3349637b23aa2",
        "type": "mongodb4",
        "z": "b50396a4b33e90b1",
        "clientNode": "6c246c6eea0c6943",
        "mode": "collection",
        "collection": "soil_sensor",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "Storing Soil Data",
        "x": 810,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "b49928c4445beeaa",
        "type": "debug",
        "z": "b50396a4b33e90b1",
        "name": "Soil Sensor Formatted Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 180,
        "wires": []
    },
    {
        "id": "9d85abdad92ad821",
        "type": "function",
        "z": "b50396a4b33e90b1",
        "name": "Checking Missing Data",
        "func": "var att = msg.payload.uplink_message.decoded_payload;\n\nvar error_messages = [];\n\nif (!att.BatV) {\n    error_messages.push(\"Battery voltage is missing\");\n}\n\nif (att.Mod !== 0 && att.Mod !== 1) {\n    error_messages.push(\"Mod is missing\");\n}\n\nif (!att.conduct_SOIL) {\n    error_messages.push(\"Conduct soil is missing\");\n}\n\nif (att.i_flag !== 0 && att.i_flag !==1) {\n    error_messages.push(\"i_flag is missing\");\n}\n\nif (att.s_flag !== 0 && att.s_flag !==1) {\n    error_messages.push(\"s_flag is missing\");\n}\n\nif (!att.temp_DS18B20) {\n    error_messages.push(\"temp_DS18B20 is missing\");\n}\n\nif (!att.temp_SOIL) {\n    error_messages.push(\"temp_SOIL is missing\");\n}\n\nif (!att.water_SOIL) {\n    error_messages.push(\"water_SOIL is missing\");\n}\n\nvar error_count = error_messages.length;\n\nmsg.error_count = error_count;\nmsg.error_messages = error_messages;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 420,
        "wires": [
            [
                "ddb679c4a1261048"
            ]
        ]
    },
    {
        "id": "ddb679c4a1261048",
        "type": "switch",
        "z": "b50396a4b33e90b1",
        "name": "",
        "property": "error_count",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 810,
        "y": 480,
        "wires": [
            [
                "297f2ab8863bb817"
            ]
        ]
    },
    {
        "id": "297f2ab8863bb817",
        "type": "function",
        "z": "b50396a4b33e90b1",
        "name": "Formatting Error Message",
        "func": "\nvar body = {\n    time: new Date(),\n    sensorId: msg.payload.end_device_ids.device_id,\n    sensorType: \"soil_sensor\",\n    metadata: {\n        logtype: \"error\",\n        logmsg: msg.error_messages\n    }\n};\n\nmsg.payload = body;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 600,
        "wires": [
            [
                "3506c0330210154a",
                "bfbd11ea7bdba8a8"
            ]
        ]
    },
    {
        "id": "bfbd11ea7bdba8a8",
        "type": "mongodb4",
        "z": "b50396a4b33e90b1",
        "clientNode": "6c246c6eea0c6943",
        "mode": "collection",
        "collection": "log",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "Storing Error Data",
        "x": 1030,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "3506c0330210154a",
        "type": "debug",
        "z": "b50396a4b33e90b1",
        "name": "Error Message",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 660,
        "wires": []
    },
    {
        "id": "4563ed83471c21aa",
        "type": "switch",
        "z": "b50396a4b33e90b1",
        "g": "8663c14927fd9226",
        "name": "Device1",
        "property": "payload.device_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "eui-a840412881881c6a",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1320,
        "y": 200,
        "wires": [
            [
                "217978befbbbfa0c",
                "ad38ab9b71758c44",
                "fa31029b0d9ea44e",
                "264fdaff09f951a8",
                "4be4a97e523353ae"
            ]
        ]
    },
    {
        "id": "217978befbbbfa0c",
        "type": "function",
        "z": "b50396a4b33e90b1",
        "g": "8663c14927fd9226",
        "name": "Device1 Temperature of Soil",
        "func": "// Parse the temp_soil string value to a float\nvar temp_soil = parseFloat(msg.payload.data.temp_soil).toFixed(2);\n\n// Convert temp_soil back to a number to ensure it's a decimal\ntemp_soil = Number(temp_soil);\n\n// Set the message payload and topic\nmsg.payload = temp_soil;\nmsg.topic = 'Temperature of Soil';\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 120,
        "wires": [
            [
                "70bd2598b3dc9752",
                "94ba9f44e774b5d3"
            ]
        ]
    },
    {
        "id": "ad38ab9b71758c44",
        "type": "function",
        "z": "b50396a4b33e90b1",
        "g": "8663c14927fd9226",
        "name": "Device1 Water in Soil",
        "func": "// Parse the temp_soil string value to a float\nvar water_soil = parseFloat(msg.payload.data.water_soil).toFixed(2);\n\n// Convert temp_soil back to a number to ensure it's a decimal\nwater_soil = Number(water_soil);\n\n// Set the message payload and topic\nmsg.payload = water_soil;\nmsg.topic = 'Water in Soill';\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 160,
        "wires": [
            [
                "242be5c39dd97c35",
                "89aef8527d89cfc8"
            ]
        ]
    },
    {
        "id": "fa31029b0d9ea44e",
        "type": "function",
        "z": "b50396a4b33e90b1",
        "g": "8663c14927fd9226",
        "name": "Device1 Battery Voltage",
        "func": "var battery_voltage = msg.payload.data.battery_voltage.toFixed(3);\nmsg.payload = battery_voltage;\nmsg.topic = 'Battery Voltage';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 200,
        "wires": [
            [
                "7aef85e93b48cfb8",
                "391e880e222365df"
            ]
        ]
    },
    {
        "id": "264fdaff09f951a8",
        "type": "function",
        "z": "b50396a4b33e90b1",
        "g": "8663c14927fd9226",
        "name": "Device1 Soil Conductivity",
        "func": "var conduct_soil = msg.payload.data.conduct_soil.toFixed(2);\nmsg.payload = conduct_soil;\nmsg.topic = 'Conductivity of Soil';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 240,
        "wires": [
            [
                "9d8ca530ce7a8fe6",
                "9dc3e010eb5a4c11"
            ]
        ]
    },
    {
        "id": "70bd2598b3dc9752",
        "type": "ui_gauge",
        "z": "b50396a4b33e90b1",
        "g": "8663c14927fd9226",
        "name": "Temperature of Soil Gauge",
        "group": "b0ba5a219f0523bb",
        "order": 2,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Soil Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 1880,
        "y": 120,
        "wires": []
    },
    {
        "id": "7aef85e93b48cfb8",
        "type": "ui_gauge",
        "z": "b50396a4b33e90b1",
        "g": "8663c14927fd9226",
        "name": "Battery Voltage Gauge",
        "group": "b0ba5a219f0523bb",
        "order": 3,
        "width": 5,
        "height": 3,
        "gtype": "wave",
        "title": "Battery Voltage",
        "label": "volt",
        "format": "{{value}}",
        "min": 0,
        "max": "4.2",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 1860,
        "y": 200,
        "wires": []
    },
    {
        "id": "242be5c39dd97c35",
        "type": "ui_gauge",
        "z": "b50396a4b33e90b1",
        "g": "8663c14927fd9226",
        "name": "Temperature in Soil Gauge",
        "group": "b0ba5a219f0523bb",
        "order": 4,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Soil Water",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 1880,
        "y": 160,
        "wires": []
    },
    {
        "id": "9d8ca530ce7a8fe6",
        "type": "ui_gauge",
        "z": "b50396a4b33e90b1",
        "g": "8663c14927fd9226",
        "name": "Conductivity of Soil Gauge",
        "group": "b0ba5a219f0523bb",
        "order": 5,
        "width": 5,
        "height": 3,
        "gtype": "donut",
        "title": "Soil Conductivity",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": "500",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "200",
        "seg2": "350",
        "diff": false,
        "className": "",
        "x": 1880,
        "y": 240,
        "wires": []
    },
    {
        "id": "1d3c5cb12682fd44",
        "type": "ui_text",
        "z": "b50396a4b33e90b1",
        "g": "8663c14927fd9226",
        "group": "b0ba5a219f0523bb",
        "order": 6,
        "width": 6,
        "height": 3,
        "name": "Device ID",
        "label": "Device ID",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Georgia,Georgia,serif",
        "fontSize": 16,
        "color": "#000000",
        "x": 1820,
        "y": 280,
        "wires": []
    },
    {
        "id": "4be4a97e523353ae",
        "type": "function",
        "z": "b50396a4b33e90b1",
        "g": "8663c14927fd9226",
        "name": "Device ID",
        "func": "var device_id = msg.payload.device_id;\nmsg.payload = device_id;\nmsg.topic = 'Device ID';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 280,
        "wires": [
            [
                "1d3c5cb12682fd44",
                "10fd35a071370328"
            ]
        ]
    },
    {
        "id": "88a84be3b64723e7",
        "type": "switch",
        "z": "b50396a4b33e90b1",
        "g": "ef9c31610e5d0f68",
        "name": "Device2",
        "property": "payload.device_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "eui-a8404111d1881c80",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1320,
        "y": 480,
        "wires": [
            [
                "ad4aee3aba9644c0",
                "12220c8934a8d5b7",
                "a095e490b16fab97",
                "e9b8eef01fd2a5c9",
                "9a48ef428dca614c"
            ]
        ]
    },
    {
        "id": "ad4aee3aba9644c0",
        "type": "function",
        "z": "b50396a4b33e90b1",
        "g": "ef9c31610e5d0f68",
        "name": "Device1 Temperature of Soil",
        "func": "// Parse the temp_soil string value to a float\nvar temp_soil = parseFloat(msg.payload.data.temp_soil).toFixed(2);\n\n// Convert temp_soil back to a number to ensure it's a decimal\ntemp_soil = Number(temp_soil);\n\n// Set the message payload and topic\nmsg.payload = temp_soil;\nmsg.topic = 'Temperature of Soil';\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 400,
        "wires": [
            [
                "e493a72b0bf83b5f",
                "44d300d3131f5218"
            ]
        ]
    },
    {
        "id": "12220c8934a8d5b7",
        "type": "function",
        "z": "b50396a4b33e90b1",
        "g": "ef9c31610e5d0f68",
        "name": "Device1 Water in Soil",
        "func": "// Parse the temp_soil string value to a float\nvar water_soil = parseFloat(msg.payload.data.water_soil).toFixed(2);\n\n// Convert temp_soil back to a number to ensure it's a decimal\nwater_soil = Number(water_soil);\n\n// Set the message payload and topic\nmsg.payload = water_soil;\nmsg.topic = 'Water in Soill';\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 440,
        "wires": [
            [
                "961598c082d2c47d",
                "bb4ad7e6772dd40e"
            ]
        ]
    },
    {
        "id": "a095e490b16fab97",
        "type": "function",
        "z": "b50396a4b33e90b1",
        "g": "ef9c31610e5d0f68",
        "name": "Device1 Battery Voltage",
        "func": "var battery_voltage = msg.payload.data.battery_voltage.toFixed(3);\nmsg.payload = battery_voltage;\nmsg.topic = 'Battery Voltage';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 480,
        "wires": [
            [
                "80b4ef5975bb134d",
                "9a8a18d3d1c5c708"
            ]
        ]
    },
    {
        "id": "e9b8eef01fd2a5c9",
        "type": "function",
        "z": "b50396a4b33e90b1",
        "g": "ef9c31610e5d0f68",
        "name": "Device1 Soil Conductivity",
        "func": "var conduct_soil = msg.payload.data.conduct_soil.toFixed(2);\nmsg.payload = conduct_soil;\nmsg.topic = 'Conductivity of Soil';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 520,
        "wires": [
            [
                "762c98afb44e9aeb",
                "47f9e8ee14e9d134"
            ]
        ]
    },
    {
        "id": "e493a72b0bf83b5f",
        "type": "ui_gauge",
        "z": "b50396a4b33e90b1",
        "g": "ef9c31610e5d0f68",
        "name": "Temperature of Soil Gauge",
        "group": "ab874b0e93334cc4",
        "order": 2,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Soil Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 1880,
        "y": 400,
        "wires": []
    },
    {
        "id": "80b4ef5975bb134d",
        "type": "ui_gauge",
        "z": "b50396a4b33e90b1",
        "g": "ef9c31610e5d0f68",
        "name": "Battery Voltage Gauge",
        "group": "ab874b0e93334cc4",
        "order": 3,
        "width": 5,
        "height": 3,
        "gtype": "wave",
        "title": "Battery Voltage",
        "label": "volt",
        "format": "{{value}}",
        "min": 0,
        "max": "4.2",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 1860,
        "y": 480,
        "wires": []
    },
    {
        "id": "961598c082d2c47d",
        "type": "ui_gauge",
        "z": "b50396a4b33e90b1",
        "g": "ef9c31610e5d0f68",
        "name": "Temperature in Soil Gauge",
        "group": "ab874b0e93334cc4",
        "order": 4,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Soil Water",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 1880,
        "y": 440,
        "wires": []
    },
    {
        "id": "762c98afb44e9aeb",
        "type": "ui_gauge",
        "z": "b50396a4b33e90b1",
        "g": "ef9c31610e5d0f68",
        "name": "Conductivity of Soil Gauge",
        "group": "ab874b0e93334cc4",
        "order": 5,
        "width": 5,
        "height": 3,
        "gtype": "donut",
        "title": "Soil Conductivity",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": "500",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "200",
        "seg2": "350",
        "diff": false,
        "className": "",
        "x": 1880,
        "y": 520,
        "wires": []
    },
    {
        "id": "375460a0719dbc93",
        "type": "ui_text",
        "z": "b50396a4b33e90b1",
        "g": "ef9c31610e5d0f68",
        "group": "ab874b0e93334cc4",
        "order": 6,
        "width": 6,
        "height": 3,
        "name": "Device ID",
        "label": "Device ID",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Georgia,Georgia,serif",
        "fontSize": 16,
        "color": "#000000",
        "x": 1820,
        "y": 560,
        "wires": []
    },
    {
        "id": "9a48ef428dca614c",
        "type": "function",
        "z": "b50396a4b33e90b1",
        "g": "ef9c31610e5d0f68",
        "name": "Device ID",
        "func": "var device_id = msg.payload.device_id;\nmsg.payload = device_id;\nmsg.topic = 'Device ID';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 560,
        "wires": [
            [
                "375460a0719dbc93",
                "5d7ff1bd846c255a"
            ]
        ]
    },
    {
        "id": "7e794dc9e0edacb2",
        "type": "switch",
        "z": "b50396a4b33e90b1",
        "g": "f9895c6258bd1c27",
        "name": "Device3",
        "property": "payload.device_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "eui-a84041e0c1881c65",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1320,
        "y": 760,
        "wires": [
            [
                "2591a5c778a065c6",
                "e0abed3d2163abc6",
                "0c96686ab704d4a3",
                "a69916fc9b72e554",
                "3713f5157f517f7a"
            ]
        ]
    },
    {
        "id": "2591a5c778a065c6",
        "type": "function",
        "z": "b50396a4b33e90b1",
        "g": "f9895c6258bd1c27",
        "name": "Device1 Temperature of Soil",
        "func": "// Parse the temp_soil string value to a float\nvar temp_soil = parseFloat(msg.payload.data.temp_soil).toFixed(2);\n\n// Convert temp_soil back to a number to ensure it's a decimal\ntemp_soil = Number(temp_soil);\n\n// Set the message payload and topic\nmsg.payload = temp_soil;\nmsg.topic = 'Temperature of Soil';\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 680,
        "wires": [
            [
                "a3049f0ee1b6c504",
                "5c4ab044b60a5b30"
            ]
        ]
    },
    {
        "id": "e0abed3d2163abc6",
        "type": "function",
        "z": "b50396a4b33e90b1",
        "g": "f9895c6258bd1c27",
        "name": "Device1 Water in Soil",
        "func": "// Parse the temp_soil string value to a float\nvar water_soil = parseFloat(msg.payload.data.water_soil).toFixed(2);\n\n// Convert temp_soil back to a number to ensure it's a decimal\nwater_soil = Number(water_soil);\n\n// Set the message payload and topic\nmsg.payload = water_soil;\nmsg.topic = 'Water in Soill';\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 720,
        "wires": [
            [
                "7b23ca937567bd61",
                "253e08ddf55f68f1"
            ]
        ]
    },
    {
        "id": "0c96686ab704d4a3",
        "type": "function",
        "z": "b50396a4b33e90b1",
        "g": "f9895c6258bd1c27",
        "name": "Device1 Battery Voltage",
        "func": "var battery_voltage = msg.payload.data.battery_voltage.toFixed(3);\nmsg.payload = battery_voltage;\nmsg.topic = 'Battery Voltage';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 760,
        "wires": [
            [
                "a9ff9d312565c663",
                "549496de3c20a1cf"
            ]
        ]
    },
    {
        "id": "a69916fc9b72e554",
        "type": "function",
        "z": "b50396a4b33e90b1",
        "g": "f9895c6258bd1c27",
        "name": "Device1 Soil Conductivity",
        "func": "var conduct_soil = msg.payload.data.conduct_soil.toFixed(2);\nmsg.payload = conduct_soil;\nmsg.topic = 'Conductivity of Soil';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 800,
        "wires": [
            [
                "92ede44d8f222de6",
                "2e00a6a6c6c623e8"
            ]
        ]
    },
    {
        "id": "a3049f0ee1b6c504",
        "type": "ui_gauge",
        "z": "b50396a4b33e90b1",
        "g": "f9895c6258bd1c27",
        "name": "Temperature of Soil Gauge",
        "group": "a60134d115fb105c",
        "order": 2,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Soil Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 1880,
        "y": 680,
        "wires": []
    },
    {
        "id": "a9ff9d312565c663",
        "type": "ui_gauge",
        "z": "b50396a4b33e90b1",
        "g": "f9895c6258bd1c27",
        "name": "Battery Voltage Gauge",
        "group": "a60134d115fb105c",
        "order": 3,
        "width": 5,
        "height": 3,
        "gtype": "wave",
        "title": "Battery Voltage",
        "label": "volt",
        "format": "{{value}}",
        "min": 0,
        "max": "4.2",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 1860,
        "y": 760,
        "wires": []
    },
    {
        "id": "7b23ca937567bd61",
        "type": "ui_gauge",
        "z": "b50396a4b33e90b1",
        "g": "f9895c6258bd1c27",
        "name": "Temperature in Soil Gauge",
        "group": "a60134d115fb105c",
        "order": 4,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Soil Water",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 1880,
        "y": 720,
        "wires": []
    },
    {
        "id": "92ede44d8f222de6",
        "type": "ui_gauge",
        "z": "b50396a4b33e90b1",
        "g": "f9895c6258bd1c27",
        "name": "Conductivity of Soil Gauge",
        "group": "a60134d115fb105c",
        "order": 5,
        "width": 5,
        "height": 3,
        "gtype": "donut",
        "title": "Soil Conductivity",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": "500",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "200",
        "seg2": "350",
        "diff": false,
        "className": "",
        "x": 1880,
        "y": 800,
        "wires": []
    },
    {
        "id": "5908878471cbcfc5",
        "type": "ui_text",
        "z": "b50396a4b33e90b1",
        "g": "f9895c6258bd1c27",
        "group": "a60134d115fb105c",
        "order": 6,
        "width": 6,
        "height": 3,
        "name": "Device ID",
        "label": "Device ID",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Georgia,Georgia,serif",
        "fontSize": 16,
        "color": "#000000",
        "x": 1820,
        "y": 840,
        "wires": []
    },
    {
        "id": "3713f5157f517f7a",
        "type": "function",
        "z": "b50396a4b33e90b1",
        "g": "f9895c6258bd1c27",
        "name": "Device ID",
        "func": "var device_id = msg.payload.device_id;\nmsg.payload = device_id;\nmsg.topic = 'Device ID';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 840,
        "wires": [
            [
                "5908878471cbcfc5",
                "31d3c9782a35c2d4"
            ]
        ]
    },
    {
        "id": "86380fd3535c869f",
        "type": "switch",
        "z": "b50396a4b33e90b1",
        "g": "bd7804f9d8f3f54e",
        "name": "Device4",
        "property": "payload.device_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "eui-a84041ffb1881c77",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2440,
        "y": 200,
        "wires": [
            [
                "715cee35d0775154",
                "3bfdc79cfb70fd0f",
                "fad6c8443ba2f065",
                "c52338ba3fc4c3aa",
                "28da842ed89ac72d"
            ]
        ]
    },
    {
        "id": "715cee35d0775154",
        "type": "function",
        "z": "b50396a4b33e90b1",
        "g": "bd7804f9d8f3f54e",
        "name": "Device1 Temperature of Soil",
        "func": "// Parse the temp_soil string value to a float\nvar temp_soil = parseFloat(msg.payload.data.temp_soil).toFixed(2);\n\n// Convert temp_soil back to a number to ensure it's a decimal\ntemp_soil = Number(temp_soil);\n\n// Set the message payload and topic\nmsg.payload = temp_soil;\nmsg.topic = 'Temperature of Soil';\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2720,
        "y": 120,
        "wires": [
            [
                "68fbc9c76508433f",
                "dc4024092f5ab783"
            ]
        ]
    },
    {
        "id": "3bfdc79cfb70fd0f",
        "type": "function",
        "z": "b50396a4b33e90b1",
        "g": "bd7804f9d8f3f54e",
        "name": "Device1 Water in Soil",
        "func": "// Parse the temp_soil string value to a float\nvar water_soil = parseFloat(msg.payload.data.water_soil).toFixed(2);\n\n// Convert temp_soil back to a number to ensure it's a decimal\nwater_soil = Number(water_soil);\n\n// Set the message payload and topic\nmsg.payload = water_soil;\nmsg.topic = 'Water in Soill';\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2700,
        "y": 160,
        "wires": [
            [
                "3f486393d495b909",
                "089a301aae5b4c15"
            ]
        ]
    },
    {
        "id": "fad6c8443ba2f065",
        "type": "function",
        "z": "b50396a4b33e90b1",
        "g": "bd7804f9d8f3f54e",
        "name": "Device1 Battery Voltage",
        "func": "var battery_voltage = msg.payload.data.battery_voltage.toFixed(3);\nmsg.payload = battery_voltage;\nmsg.topic = 'Battery Voltage';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2710,
        "y": 200,
        "wires": [
            [
                "e0b9619d3d14673a",
                "47b7ed85e8856128"
            ]
        ]
    },
    {
        "id": "c52338ba3fc4c3aa",
        "type": "function",
        "z": "b50396a4b33e90b1",
        "g": "bd7804f9d8f3f54e",
        "name": "Device1 Soil Conductivity",
        "func": "var conduct_soil = msg.payload.data.conduct_soil.toFixed(2);\nmsg.payload = conduct_soil;\nmsg.topic = 'Conductivity of Soil';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2710,
        "y": 240,
        "wires": [
            [
                "07f14f3959225a89",
                "15dce1e5381b6d10"
            ]
        ]
    },
    {
        "id": "68fbc9c76508433f",
        "type": "ui_gauge",
        "z": "b50396a4b33e90b1",
        "g": "bd7804f9d8f3f54e",
        "name": "Temperature of Soil Gauge",
        "group": "f5ba2cb56977521d",
        "order": 2,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Soil Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 3000,
        "y": 120,
        "wires": []
    },
    {
        "id": "e0b9619d3d14673a",
        "type": "ui_gauge",
        "z": "b50396a4b33e90b1",
        "g": "bd7804f9d8f3f54e",
        "name": "Battery Voltage Gauge",
        "group": "f5ba2cb56977521d",
        "order": 3,
        "width": 5,
        "height": 3,
        "gtype": "wave",
        "title": "Battery Voltage",
        "label": "volt",
        "format": "{{value}}",
        "min": 0,
        "max": "4.2",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 2980,
        "y": 200,
        "wires": []
    },
    {
        "id": "3f486393d495b909",
        "type": "ui_gauge",
        "z": "b50396a4b33e90b1",
        "g": "bd7804f9d8f3f54e",
        "name": "Temperature in Soil Gauge",
        "group": "f5ba2cb56977521d",
        "order": 4,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Soil Water",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 3000,
        "y": 160,
        "wires": []
    },
    {
        "id": "07f14f3959225a89",
        "type": "ui_gauge",
        "z": "b50396a4b33e90b1",
        "g": "bd7804f9d8f3f54e",
        "name": "Conductivity of Soil Gauge",
        "group": "f5ba2cb56977521d",
        "order": 5,
        "width": 5,
        "height": 3,
        "gtype": "donut",
        "title": "Soil Conductivity",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": "500",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "200",
        "seg2": "350",
        "diff": false,
        "className": "",
        "x": 3000,
        "y": 240,
        "wires": []
    },
    {
        "id": "1ef4d418fa92becc",
        "type": "ui_text",
        "z": "b50396a4b33e90b1",
        "g": "bd7804f9d8f3f54e",
        "group": "f5ba2cb56977521d",
        "order": 6,
        "width": 6,
        "height": 3,
        "name": "Device ID",
        "label": "Device ID",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Georgia,Georgia,serif",
        "fontSize": 16,
        "color": "#000000",
        "x": 2940,
        "y": 280,
        "wires": []
    },
    {
        "id": "28da842ed89ac72d",
        "type": "function",
        "z": "b50396a4b33e90b1",
        "g": "bd7804f9d8f3f54e",
        "name": "Device ID",
        "func": "var device_id = msg.payload.device_id;\nmsg.payload = device_id;\nmsg.topic = 'Device ID';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2660,
        "y": 280,
        "wires": [
            [
                "1ef4d418fa92becc",
                "5cdeb5c1a9860cf2"
            ]
        ]
    },
    {
        "id": "6501355bea310b65",
        "type": "switch",
        "z": "b50396a4b33e90b1",
        "g": "2185f0a93b1a69a0",
        "name": "Device5",
        "property": "payload.device_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "eui-a840416c21881c78",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2440,
        "y": 480,
        "wires": [
            [
                "aa4769aad8b6ad6a",
                "f253839774d062ac",
                "f37347ad4729ef61",
                "a63f09b922b31032",
                "4bda3f1fd6c91b56"
            ]
        ]
    },
    {
        "id": "aa4769aad8b6ad6a",
        "type": "function",
        "z": "b50396a4b33e90b1",
        "g": "2185f0a93b1a69a0",
        "name": "Device1 Temperature of Soil",
        "func": "// Parse the temp_soil string value to a float\nvar temp_soil = parseFloat(msg.payload.data.temp_soil).toFixed(2);\n\n// Convert temp_soil back to a number to ensure it's a decimal\ntemp_soil = Number(temp_soil);\n\n// Set the message payload and topic\nmsg.payload = temp_soil;\nmsg.topic = 'Temperature of Soil';\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2720,
        "y": 400,
        "wires": [
            [
                "102f9a8046479be3",
                "0991eff36f303ac4"
            ]
        ]
    },
    {
        "id": "f253839774d062ac",
        "type": "function",
        "z": "b50396a4b33e90b1",
        "g": "2185f0a93b1a69a0",
        "name": "Device1 Water in Soil",
        "func": "// Parse the temp_soil string value to a float\nvar water_soil = parseFloat(msg.payload.data.water_soil).toFixed(2);\n\n// Convert temp_soil back to a number to ensure it's a decimal\nwater_soil = Number(water_soil);\n\n// Set the message payload and topic\nmsg.payload = water_soil;\nmsg.topic = 'Water in Soill';\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2700,
        "y": 440,
        "wires": [
            [
                "04e44647e56a6241",
                "b73d41317baf1b0e"
            ]
        ]
    },
    {
        "id": "f37347ad4729ef61",
        "type": "function",
        "z": "b50396a4b33e90b1",
        "g": "2185f0a93b1a69a0",
        "name": "Device1 Battery Voltage",
        "func": "var battery_voltage = msg.payload.data.battery_voltage.toFixed(3);\nmsg.payload = battery_voltage;\nmsg.topic = 'Battery Voltage';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2710,
        "y": 480,
        "wires": [
            [
                "6186ef6303838264",
                "aecc06e6034e6e1a"
            ]
        ]
    },
    {
        "id": "a63f09b922b31032",
        "type": "function",
        "z": "b50396a4b33e90b1",
        "g": "2185f0a93b1a69a0",
        "name": "Device1 Soil Conductivity",
        "func": "var conduct_soil = msg.payload.data.conduct_soil.toFixed(2);\nmsg.payload = conduct_soil;\nmsg.topic = 'Conductivity of Soil';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2710,
        "y": 520,
        "wires": [
            [
                "0a69e6d48a811d85",
                "5032bef450a8cca1"
            ]
        ]
    },
    {
        "id": "102f9a8046479be3",
        "type": "ui_gauge",
        "z": "b50396a4b33e90b1",
        "g": "2185f0a93b1a69a0",
        "name": "Temperature of Soil Gauge",
        "group": "7e566a81e6655eca",
        "order": 2,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Soil Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 3000,
        "y": 400,
        "wires": []
    },
    {
        "id": "6186ef6303838264",
        "type": "ui_gauge",
        "z": "b50396a4b33e90b1",
        "g": "2185f0a93b1a69a0",
        "name": "Battery Voltage Gauge",
        "group": "7e566a81e6655eca",
        "order": 3,
        "width": 5,
        "height": 3,
        "gtype": "wave",
        "title": "Battery Voltage",
        "label": "volt",
        "format": "{{value}}",
        "min": 0,
        "max": "4.2",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 2980,
        "y": 480,
        "wires": []
    },
    {
        "id": "04e44647e56a6241",
        "type": "ui_gauge",
        "z": "b50396a4b33e90b1",
        "g": "2185f0a93b1a69a0",
        "name": "Temperature in Soil Gauge",
        "group": "7e566a81e6655eca",
        "order": 4,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Soil Water",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 3000,
        "y": 440,
        "wires": []
    },
    {
        "id": "0a69e6d48a811d85",
        "type": "ui_gauge",
        "z": "b50396a4b33e90b1",
        "g": "2185f0a93b1a69a0",
        "name": "Conductivity of Soil Gauge",
        "group": "7e566a81e6655eca",
        "order": 5,
        "width": 5,
        "height": 3,
        "gtype": "donut",
        "title": "Soil Conductivity",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": "500",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "200",
        "seg2": "350",
        "diff": false,
        "className": "",
        "x": 3000,
        "y": 520,
        "wires": []
    },
    {
        "id": "462212ccb183fc47",
        "type": "ui_text",
        "z": "b50396a4b33e90b1",
        "g": "2185f0a93b1a69a0",
        "group": "7e566a81e6655eca",
        "order": 6,
        "width": 6,
        "height": 3,
        "name": "Device ID",
        "label": "Device ID",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Georgia,Georgia,serif",
        "fontSize": 16,
        "color": "#000000",
        "x": 2940,
        "y": 560,
        "wires": []
    },
    {
        "id": "4bda3f1fd6c91b56",
        "type": "function",
        "z": "b50396a4b33e90b1",
        "g": "2185f0a93b1a69a0",
        "name": "Device ID",
        "func": "var device_id = msg.payload.device_id;\nmsg.payload = device_id;\nmsg.topic = 'Device ID';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2660,
        "y": 560,
        "wires": [
            [
                "462212ccb183fc47",
                "4a378ff7ff3bf66f"
            ]
        ]
    },
    {
        "id": "e29db05210299c7d",
        "type": "function",
        "z": "b50396a4b33e90b1",
        "name": "Soil Sensor Summary",
        "func": "var att = msg.payload;\nvar sensor = att.device_id;\n\n// Retrieve existing sensor data from context\nvar data = context.get('sensorData') || {\n    sensor_id1: 'eui-a840412881881c6a',\n    temp_soil1: null,\n    water_soil1: null,\n    sensor_id2: 'eui-a840412881881c6a',\n    temp_soil2: null,\n    water_soil2: null,\n    sensor_id3: 'eui-a84041e0c1881c65',\n    temp_soil3: null,\n    water_soil3: null,\n    sensor_id4: 'eui-a84041ffb1881c77',\n    temp_soil4: null,\n    water_soil4: null,\n    sensor_id5: 'eui-a840416c21881c78',\n    temp_soil5: null,\n    water_soil5: null\n};\n\n// Update the relevant sensor data\nif (sensor == 'eui-a840412881881c6a') {\n    data.temp_soil1 = parseFloat(att.data.temp_soil).toFixed(2);\n    data.water_soil1 = att.data.water_soil;\n}\n\nif (sensor == 'eui-a840412881881c6a') {\n    data.temp_soil2 = parseFloat(att.data.temp_soil).toFixed(2);\n    data.water_soil2 = att.data.water_soil;\n}\n\nif (sensor == 'eui-a84041e0c1881c65') {\n    data.temp_soil3 = parseFloat(att.data.temp_soil).toFixed(2);\n    data.water_soil3 = att.data.water_soil;\n}\n\nif (sensor == 'eui-a84041ffb1881c77') {\n    data.temp_soil4 = parseFloat(att.data.temp_soil).toFixed(2);\n    data.water_soil4 = att.data.water_soil;\n}\n\nif (sensor == 'eui-a840416c21881c78') {\n    data.temp_soil5 = parseFloat(att.data.temp_soil).toFixed(2);\n    data.water_soil5 = att.data.water_soil;\n}\n\n// Store the updated data back in context\ncontext.set('sensorData', data);\n\n// Set the updated data as the message payload\nmsg.payload = data;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 720,
        "wires": [
            [
                "7606d531339c3610"
            ]
        ]
    },
    {
        "id": "7606d531339c3610",
        "type": "ui_template",
        "z": "b50396a4b33e90b1",
        "group": "80171453c5dc622f",
        "name": "Soil Sensor Table",
        "order": 2,
        "width": 14,
        "height": "8",
        "format": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Soil Sensor</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\n    <script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js\"></script>\n    <style>\n        .normal {\n            background-color: #85dc85 !important;\n        }\n        .orange {\n            background-color: #f4d03f  !important; \n        }\n        .red {\n            background-color: #e74c3c  !important;\n        }\n\n        .col-sensor {\n            width: 30%;\n        }\n        .col-temp {\n            width: 25%;\n        }\n        .col-humidity {\n            width: 25%;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <table class=\"table table-striped table-bordered table-hover text-center\">\n            <thead class=\"table-primary\">\n                <tr>\n                    <th class=\"col-sensor\">Sensor ID</th>\n                    <th class=\"col-temp\">Soil Temperature (°C)</th>\n                    <th class=\"col-humidity\">Soil Water</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td><a href=\"#!/11?socketid=P6thRpRp8T7Or8VCAAaF\" target=\"_blank\"><button class=\"btn btn-light\">{{msg.payload.sensor_id1}}</button></a></td>\n\n                    <td ng-class=\"{'normal': msg.payload.temp_soil1<=18, 'orange': msg.payload.temp_soil1>18 && msg.payload.temp_soil1<=22, 'red':msg.payload.temp_soil1>22}\">{{msg.payload.temp_soil1}}</td>\n\n                    <td ng-class=\"{'normal': msg.payload.water_soil1<=25, 'orange': msg.payload.water_soil1>25 && msg.payload.water_soil1<=45, 'red':msg.payload.water_soil1>45}\">{{msg.payload.water_soil1}}</td>\n                    \n                </tr>\n                <tr>\n                    <td><a href=\"#!/12?socketid=P6thRpRp8T7Or8VCAAaF\" target=\"_blank\"><button class=\"btn btn-light\">{{msg.payload.sensor_id2}}</button></a></td>\n\n                    <td ng-class=\"{'normal': msg.payload.temp_soil2<=18, 'orange': msg.payload.temp_soil2>18 && msg.payload.temp_soil2<=22, 'red':msg.payload.temp_soil2>22}\">{{msg.payload.temp_soil2}}</td>\n\n                    <td ng-class=\"{'normal': msg.payload.water_soil2<=25, 'orange': msg.payload.water_soil2>25 && msg.payload.water_soil2<=45, 'red':msg.payload.water_soil2>45}\">{{msg.payload.water_soil2}}</td>\n                    \n                </tr>\n                <tr>\n                    <td><a href=\"#!/13?socketid=P6thRpRp8T7Or8VCAAaF\" target=\"_blank\"><button class=\"btn btn-light\">{{msg.payload.sensor_id3}}</button></a></td>\n\n                    <td ng-class=\"{'normal': msg.payload.temp_soil3<=18, 'orange': msg.payload.temp_soil3>18 && msg.payload.temp_soil3<=22, 'red':msg.payload.temp_soil3>22}\">{{msg.payload.temp_soil3}}</td>\n\n                    <td ng-class=\"{'normal': msg.payload.water_soil3<=25, 'orange': msg.payload.water_soil3>25 && msg.payload.water_soil3<=45, 'red':msg.payload.water_soil3>45}\">{{msg.payload.water_soil3}}</td>\n                    \n                </tr>\n                <tr>\n                    <td><a href=\"#!/14?socketid=P6thRpRp8T7Or8VCAAaF\" target=\"_blank\"><button class=\"btn btn-light\">{{msg.payload.sensor_id4}}</button></a></td>\n\n                    <td ng-class=\"{'normal': msg.payload.temp_soil4<=18, 'orange': msg.payload.temp_soil4>18 && msg.payload.temp_soil4<=22, 'red':msg.payload.temp_soil4>22}\">{{msg.payload.temp_soil4}}</td>\n\n                    <td ng-class=\"{'normal': msg.payload.water_soil4<=25, 'orange': msg.payload.water_soil4>25 && msg.payload.water_soil4<=45, 'red':msg.payload.water_soil4>45}\">{{msg.payload.water_soil4}}</td>\n                    \n                </tr>\n                <tr>\n                    <td><a href=\"#!/15?socketid=rPhLCHLGC2EpLY5gAAaQ\" target=\"_blank\"><button class=\"btn btn-light\">{{msg.payload.sensor_id5}}</button></a></td>\n\n                    <td ng-class=\"{'normal': msg.payload.temp_soil5<=18, 'orange': msg.payload.temp_soil5>18 && msg.payload.temp_soil5<=22, 'red':msg.payload.temp_soil5>22}\">{{msg.payload.temp_soil5}}</td>\n\n                    <td ng-class=\"{'normal': msg.payload.water_soil5<=25, 'orange': msg.payload.water_soil5>25 && msg.payload.water_soil5<=45, 'red':msg.payload.water_soil5>45}\">{{msg.payload.water_soil5}}</td>\n                    \n                </tr>\n               \n            </tbody>\n        </table>\n    </div>\n</body>\n</html>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 670,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "94ba9f44e774b5d3",
        "type": "ui_gauge",
        "z": "b50396a4b33e90b1",
        "g": "8663c14927fd9226",
        "name": "Temperature of Soil Gauge",
        "group": "07177cef4a16e738",
        "order": 2,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Soil Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 2180,
        "y": 120,
        "wires": []
    },
    {
        "id": "391e880e222365df",
        "type": "ui_gauge",
        "z": "b50396a4b33e90b1",
        "g": "8663c14927fd9226",
        "name": "Battery Voltage Gauge",
        "group": "07177cef4a16e738",
        "order": 3,
        "width": 5,
        "height": 3,
        "gtype": "wave",
        "title": "Battery Voltage",
        "label": "volt",
        "format": "{{value}}",
        "min": 0,
        "max": "4.2",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 2160,
        "y": 200,
        "wires": []
    },
    {
        "id": "89aef8527d89cfc8",
        "type": "ui_gauge",
        "z": "b50396a4b33e90b1",
        "g": "8663c14927fd9226",
        "name": "Temperature in Soil Gauge",
        "group": "07177cef4a16e738",
        "order": 4,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Soil Water",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 2180,
        "y": 160,
        "wires": []
    },
    {
        "id": "9dc3e010eb5a4c11",
        "type": "ui_gauge",
        "z": "b50396a4b33e90b1",
        "g": "8663c14927fd9226",
        "name": "Conductivity of Soil Gauge",
        "group": "07177cef4a16e738",
        "order": 5,
        "width": 5,
        "height": 3,
        "gtype": "donut",
        "title": "Soil Conductivity",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": "500",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "200",
        "seg2": "350",
        "diff": false,
        "className": "",
        "x": 2180,
        "y": 240,
        "wires": []
    },
    {
        "id": "10fd35a071370328",
        "type": "ui_text",
        "z": "b50396a4b33e90b1",
        "g": "8663c14927fd9226",
        "group": "07177cef4a16e738",
        "order": 6,
        "width": 6,
        "height": 3,
        "name": "Device ID",
        "label": "Device ID",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Georgia,Georgia,serif",
        "fontSize": 16,
        "color": "#000000",
        "x": 2120,
        "y": 280,
        "wires": []
    },
    {
        "id": "44d300d3131f5218",
        "type": "ui_gauge",
        "z": "b50396a4b33e90b1",
        "g": "ef9c31610e5d0f68",
        "name": "Temperature of Soil Gauge",
        "group": "dcfb4c81b704c5b9",
        "order": 2,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Soil Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 2180,
        "y": 400,
        "wires": []
    },
    {
        "id": "9a8a18d3d1c5c708",
        "type": "ui_gauge",
        "z": "b50396a4b33e90b1",
        "g": "ef9c31610e5d0f68",
        "name": "Battery Voltage Gauge",
        "group": "dcfb4c81b704c5b9",
        "order": 3,
        "width": 5,
        "height": 3,
        "gtype": "wave",
        "title": "Battery Voltage",
        "label": "volt",
        "format": "{{value}}",
        "min": 0,
        "max": "4.2",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 2160,
        "y": 480,
        "wires": []
    },
    {
        "id": "bb4ad7e6772dd40e",
        "type": "ui_gauge",
        "z": "b50396a4b33e90b1",
        "g": "ef9c31610e5d0f68",
        "name": "Temperature in Soil Gauge",
        "group": "dcfb4c81b704c5b9",
        "order": 4,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Soil Water",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 2180,
        "y": 440,
        "wires": []
    },
    {
        "id": "47f9e8ee14e9d134",
        "type": "ui_gauge",
        "z": "b50396a4b33e90b1",
        "g": "ef9c31610e5d0f68",
        "name": "Conductivity of Soil Gauge",
        "group": "dcfb4c81b704c5b9",
        "order": 5,
        "width": 5,
        "height": 3,
        "gtype": "donut",
        "title": "Soil Conductivity",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": "500",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "200",
        "seg2": "350",
        "diff": false,
        "className": "",
        "x": 2180,
        "y": 520,
        "wires": []
    },
    {
        "id": "5d7ff1bd846c255a",
        "type": "ui_text",
        "z": "b50396a4b33e90b1",
        "g": "ef9c31610e5d0f68",
        "group": "dcfb4c81b704c5b9",
        "order": 6,
        "width": 6,
        "height": 3,
        "name": "Device ID",
        "label": "Device ID",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Georgia,Georgia,serif",
        "fontSize": 16,
        "color": "#000000",
        "x": 2120,
        "y": 560,
        "wires": []
    },
    {
        "id": "5c4ab044b60a5b30",
        "type": "ui_gauge",
        "z": "b50396a4b33e90b1",
        "g": "f9895c6258bd1c27",
        "name": "Temperature of Soil Gauge",
        "group": "2ace20c313dc6130",
        "order": 2,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Soil Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 2180,
        "y": 680,
        "wires": []
    },
    {
        "id": "549496de3c20a1cf",
        "type": "ui_gauge",
        "z": "b50396a4b33e90b1",
        "g": "f9895c6258bd1c27",
        "name": "Battery Voltage Gauge",
        "group": "2ace20c313dc6130",
        "order": 3,
        "width": 5,
        "height": 3,
        "gtype": "wave",
        "title": "Battery Voltage",
        "label": "volt",
        "format": "{{value}}",
        "min": 0,
        "max": "4.2",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 2160,
        "y": 760,
        "wires": []
    },
    {
        "id": "253e08ddf55f68f1",
        "type": "ui_gauge",
        "z": "b50396a4b33e90b1",
        "g": "f9895c6258bd1c27",
        "name": "Temperature in Soil Gauge",
        "group": "2ace20c313dc6130",
        "order": 4,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Soil Water",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 2180,
        "y": 720,
        "wires": []
    },
    {
        "id": "2e00a6a6c6c623e8",
        "type": "ui_gauge",
        "z": "b50396a4b33e90b1",
        "g": "f9895c6258bd1c27",
        "name": "Conductivity of Soil Gauge",
        "group": "2ace20c313dc6130",
        "order": 5,
        "width": 5,
        "height": 3,
        "gtype": "donut",
        "title": "Soil Conductivity",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": "500",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "200",
        "seg2": "350",
        "diff": false,
        "className": "",
        "x": 2180,
        "y": 800,
        "wires": []
    },
    {
        "id": "31d3c9782a35c2d4",
        "type": "ui_text",
        "z": "b50396a4b33e90b1",
        "g": "f9895c6258bd1c27",
        "group": "2ace20c313dc6130",
        "order": 6,
        "width": 6,
        "height": 3,
        "name": "Device ID",
        "label": "Device ID",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Georgia,Georgia,serif",
        "fontSize": 16,
        "color": "#000000",
        "x": 2120,
        "y": 840,
        "wires": []
    },
    {
        "id": "dc4024092f5ab783",
        "type": "ui_gauge",
        "z": "b50396a4b33e90b1",
        "g": "bd7804f9d8f3f54e",
        "name": "Temperature of Soil Gauge",
        "group": "c9e43854125296e0",
        "order": 2,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Soil Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 3300,
        "y": 120,
        "wires": []
    },
    {
        "id": "47b7ed85e8856128",
        "type": "ui_gauge",
        "z": "b50396a4b33e90b1",
        "g": "bd7804f9d8f3f54e",
        "name": "Battery Voltage Gauge",
        "group": "c9e43854125296e0",
        "order": 3,
        "width": 5,
        "height": 3,
        "gtype": "wave",
        "title": "Battery Voltage",
        "label": "volt",
        "format": "{{value}}",
        "min": 0,
        "max": "4.2",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 3280,
        "y": 200,
        "wires": []
    },
    {
        "id": "089a301aae5b4c15",
        "type": "ui_gauge",
        "z": "b50396a4b33e90b1",
        "g": "bd7804f9d8f3f54e",
        "name": "Temperature in Soil Gauge",
        "group": "c9e43854125296e0",
        "order": 4,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Soil Water",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 3300,
        "y": 160,
        "wires": []
    },
    {
        "id": "15dce1e5381b6d10",
        "type": "ui_gauge",
        "z": "b50396a4b33e90b1",
        "g": "bd7804f9d8f3f54e",
        "name": "Conductivity of Soil Gauge",
        "group": "c9e43854125296e0",
        "order": 5,
        "width": 5,
        "height": 3,
        "gtype": "donut",
        "title": "Soil Conductivity",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": "500",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "200",
        "seg2": "350",
        "diff": false,
        "className": "",
        "x": 3300,
        "y": 240,
        "wires": []
    },
    {
        "id": "5cdeb5c1a9860cf2",
        "type": "ui_text",
        "z": "b50396a4b33e90b1",
        "g": "bd7804f9d8f3f54e",
        "group": "c9e43854125296e0",
        "order": 6,
        "width": 6,
        "height": 3,
        "name": "Device ID",
        "label": "Device ID",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Georgia,Georgia,serif",
        "fontSize": 16,
        "color": "#000000",
        "x": 3240,
        "y": 280,
        "wires": []
    },
    {
        "id": "0991eff36f303ac4",
        "type": "ui_gauge",
        "z": "b50396a4b33e90b1",
        "g": "2185f0a93b1a69a0",
        "name": "Temperature of Soil Gauge",
        "group": "3ab557bf8f377e10",
        "order": 2,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Soil Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 3300,
        "y": 400,
        "wires": []
    },
    {
        "id": "aecc06e6034e6e1a",
        "type": "ui_gauge",
        "z": "b50396a4b33e90b1",
        "g": "2185f0a93b1a69a0",
        "name": "Battery Voltage Gauge",
        "group": "3ab557bf8f377e10",
        "order": 3,
        "width": 5,
        "height": 3,
        "gtype": "wave",
        "title": "Battery Voltage",
        "label": "volt",
        "format": "{{value}}",
        "min": 0,
        "max": "4.2",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 3280,
        "y": 480,
        "wires": []
    },
    {
        "id": "b73d41317baf1b0e",
        "type": "ui_gauge",
        "z": "b50396a4b33e90b1",
        "g": "2185f0a93b1a69a0",
        "name": "Temperature in Soil Gauge",
        "group": "3ab557bf8f377e10",
        "order": 4,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "Soil Water",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 3300,
        "y": 440,
        "wires": []
    },
    {
        "id": "5032bef450a8cca1",
        "type": "ui_gauge",
        "z": "b50396a4b33e90b1",
        "g": "2185f0a93b1a69a0",
        "name": "Conductivity of Soil Gauge",
        "group": "3ab557bf8f377e10",
        "order": 5,
        "width": 5,
        "height": 3,
        "gtype": "donut",
        "title": "Soil Conductivity",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": "500",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "200",
        "seg2": "350",
        "diff": false,
        "className": "",
        "x": 3300,
        "y": 520,
        "wires": []
    },
    {
        "id": "4a378ff7ff3bf66f",
        "type": "ui_text",
        "z": "b50396a4b33e90b1",
        "g": "2185f0a93b1a69a0",
        "group": "3ab557bf8f377e10",
        "order": 6,
        "width": 6,
        "height": 3,
        "name": "Device ID",
        "label": "Device ID",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Georgia,Georgia,serif",
        "fontSize": 16,
        "color": "#000000",
        "x": 3240,
        "y": 560,
        "wires": []
    },
    {
        "id": "5d9119479236c712",
        "type": "ui_text",
        "z": "b50396a4b33e90b1",
        "group": "80171453c5dc622f",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Soil Sensor",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "20",
        "color": "#0527b3",
        "x": 650,
        "y": 680,
        "wires": []
    },
    {
        "id": "c73832561b1e097b",
        "type": "mongodb4",
        "z": "bc70283693a5505d",
        "g": "f769dfedbb3f9361",
        "clientNode": "6c246c6eea0c6943",
        "mode": "collection",
        "collection": "temp_sensor",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 510,
        "y": 220,
        "wires": [
            [
                "615974c7a01d8948",
                "cf93dd3c8d08bd3a",
                "4a81730fede584ba",
                "ea871f71a3d935d8",
                "307eecbf901e1e7a"
            ]
        ]
    },
    {
        "id": "55cd926a43f6b5d0",
        "type": "inject",
        "z": "bc70283693a5505d",
        "g": "f769dfedbb3f9361",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 170,
        "y": 220,
        "wires": [
            [
                "a533cdabe25bbcc5"
            ]
        ]
    },
    {
        "id": "a533cdabe25bbcc5",
        "type": "function",
        "z": "bc70283693a5505d",
        "g": "f769dfedbb3f9361",
        "name": "1 Day Data",
        "func": "// Get the current date and time\nvar endDate = new Date();\n\n// Calculate the date 1 day before the current date\nvar startDate = new Date();\nstartDate.setDate(endDate.getDate() - 1);\n\n// Create the query object\nmsg.payload = {\n    \"timestamp\": {\n        \"$gte\": startDate,\n        \"$lte\": endDate\n    },\n    \"device_id\": \"sensebox-01\"\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 220,
        "wires": [
            [
                "c73832561b1e097b"
            ]
        ]
    },
    {
        "id": "615974c7a01d8948",
        "type": "function",
        "z": "bc70283693a5505d",
        "g": "f769dfedbb3f9361",
        "name": "Temperature",
        "func": "var results = msg.payload; \nvar temperature_data = [];\nvar min_temperature_data = [];\nvar max_temperature_data = [];\n\nfor (var i = 0; i < results.length; i++) {\n\n    var temp = parseFloat(results[i].data.temperature).toFixed(2);\n    var tempMin = parseFloat(results[i].data.temperature_min).toFixed(2);\n    var tempMax = parseFloat(results[i].data.temperature_max).toFixed(2);\n\n    temperature_data.push({\n        \"x\": results[i].timestamp,\n        \"y\": parseFloat(temp)\n    });\n    min_temperature_data.push({\n        \"x\": results[i].timestamp,\n        \"y\": parseFloat(tempMin)\n    });\n    max_temperature_data.push({\n        \"x\": results[i].timestamp,\n        \"y\": parseFloat(tempMax)\n    });\n}\n\nmsg.payload = [{\n    \"series\": [\"Temperature\", \"Temperature Max\", \"Temperature Min\"],\n    \"data\": [\n        temperature_data,\n        min_temperature_data,\n        max_temperature_data\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 140,
        "wires": [
            [
                "b0c5a11c65a04ec2",
                "eb2de4b416b6c175"
            ]
        ]
    },
    {
        "id": "e803cd54e4e081bb",
        "type": "ui_form",
        "z": "bc70283693a5505d",
        "g": "f769dfedbb3f9361",
        "name": "Select Time",
        "label": "Select Time",
        "group": "d6de265f36f661c0",
        "order": 8,
        "width": 4,
        "height": 5,
        "options": [
            {
                "label": "From",
                "value": "startDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "To",
                "value": "endDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "Download Data",
                "value": "dataDownload",
                "type": "switch",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "startDate": "",
            "endDate": "",
            "dataDownload": false
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": false,
        "className": "",
        "x": 170,
        "y": 300,
        "wires": [
            [
                "ba536606976c0c0a"
            ]
        ]
    },
    {
        "id": "ba536606976c0c0a",
        "type": "function",
        "z": "bc70283693a5505d",
        "g": "f769dfedbb3f9361",
        "name": "User Request",
        "func": "var endDate = new Date(msg.payload.endDate);\nvar startDate = new Date(msg.payload.startDate);\n\nif (msg.payload.dataDownload) {\n    var dataDownload = msg.payload.dataDownload;\n    msg.action = 'normal';\n}\n\nif (msg.payload.dataDownload1) {\n    var dataDownload = msg.payload.dataDownload1;\n    msg.action = 'seperate';\n}\n\n\nmsg.payload = {\n    \"timestamp\": {\n        \"$gte\": startDate,\n        \"$lte\": endDate\n    },\n    \"device_id\": \"sensebox-01\"\n};\n\nmsg.dataDownload = dataDownload;\nmsg.device_id = \"sensebox-01\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 300,
        "wires": [
            [
                "c73832561b1e097b"
            ]
        ]
    },
    {
        "id": "cf93dd3c8d08bd3a",
        "type": "function",
        "z": "bc70283693a5505d",
        "g": "f769dfedbb3f9361",
        "name": "Humidity",
        "func": "var results = msg.payload; \nvar humidity = [];\n\nfor (var i = 0; i < results.length; i++) {\n    humidity.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.humidity\n    })\n}\n\nmsg.payload = [{\n    \"series\": [\"Relative Humidity\"],\n    \"data\": [\n        humidity\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 200,
        "wires": [
            [
                "64900bd708ae264e",
                "075370ce2d65b7ec"
            ]
        ]
    },
    {
        "id": "64900bd708ae264e",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "f769dfedbb3f9361",
        "name": "Humidity",
        "group": "d6de265f36f661c0",
        "order": 10,
        "width": 7,
        "height": 6,
        "label": "Humidity (%)",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 900,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "b0c5a11c65a04ec2",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "f769dfedbb3f9361",
        "name": "Temperature",
        "group": "d6de265f36f661c0",
        "order": 9,
        "width": 15,
        "height": 6,
        "label": "Temperature (°C)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 910,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "f6fb98a8cd22d3c4",
        "type": "ui_button",
        "z": "bc70283693a5505d",
        "g": "f769dfedbb3f9361",
        "name": "",
        "group": "d6de265f36f661c0",
        "order": 11,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "red",
        "bgcolor": "white",
        "className": "",
        "icon": "fa-refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 170,
        "y": 140,
        "wires": [
            [
                "a533cdabe25bbcc5"
            ]
        ]
    },
    {
        "id": "488968eed61e42e8",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "f769dfedbb3f9361",
        "name": "Illuminance",
        "group": "d6de265f36f661c0",
        "order": 12,
        "width": 13,
        "height": 6,
        "label": "Illuminance (lx)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 910,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "4a81730fede584ba",
        "type": "function",
        "z": "bc70283693a5505d",
        "g": "f769dfedbb3f9361",
        "name": "Illuminance",
        "func": "var results = msg.payload; \nvar lux = [];\nvar lux_max = [];\nvar lux_min = [];\n\nfor (var i = 0; i < results.length; i++) {\n    lux.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.lux\n    });\n    lux_max.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.lux_max\n    });\n    lux_min.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.lux_min\n    });\n}\n\nmsg.payload = [{\n    \"series\": [\"Illuminance\", \"Maximum Illuminance\", \"Minimum Illuminance\"],\n    \"data\": [\n        lux,\n        lux_max,\n        lux_min\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 260,
        "wires": [
            [
                "488968eed61e42e8",
                "9a23299a2b64b216"
            ]
        ]
    },
    {
        "id": "ea871f71a3d935d8",
        "type": "function",
        "z": "bc70283693a5505d",
        "g": "f769dfedbb3f9361",
        "name": "UV Intensity",
        "func": "var results = msg.payload; \nvar uv = [];\nvar uv_max = [];\nvar uv_min = [];\n\nfor (var i = 0; i < results.length; i++) {\n    uv.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.uv\n    });\n    uv_max.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.uv_max\n    });\n    uv_min.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.uv_min\n    });\n}\n\nmsg.payload = [{\n    \"series\": [\"UV Intensity\", \"Maximum UV Intensity\", \"Minimum UV Intensity\"],\n    \"data\": [\n        uv,\n        uv_max,\n        uv_min\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 320,
        "wires": [
            [
                "45fdb4ed620d56fd",
                "68d822b4122c24bb"
            ]
        ]
    },
    {
        "id": "45fdb4ed620d56fd",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "f769dfedbb3f9361",
        "name": "UV Intensity",
        "group": "d6de265f36f661c0",
        "order": 13,
        "width": 13,
        "height": 6,
        "label": "UV Intensity (µW⋅cm⁻²)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 910,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "158d25ae0e8a9820",
        "type": "ui_text",
        "z": "bc70283693a5505d",
        "g": "f769dfedbb3f9361",
        "group": "d6de265f36f661c0",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "SENSEBOX-1",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "20",
        "color": "#0f22ae",
        "x": 480,
        "y": 80,
        "wires": []
    },
    {
        "id": "37746e402dc0d5a7",
        "type": "mongodb4",
        "z": "bc70283693a5505d",
        "g": "9d38849303bb0904",
        "clientNode": "6c246c6eea0c6943",
        "mode": "collection",
        "collection": "temp_sensor",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 510,
        "y": 620,
        "wires": [
            [
                "2bcb830197212210",
                "5cfdae0cc77b851d",
                "9cd7d11e0fce3d9e",
                "646e0f3f20368094",
                "307eecbf901e1e7a"
            ]
        ]
    },
    {
        "id": "f739b3407e613c41",
        "type": "inject",
        "z": "bc70283693a5505d",
        "g": "9d38849303bb0904",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 170,
        "y": 620,
        "wires": [
            [
                "2e5027e76ceb2584"
            ]
        ]
    },
    {
        "id": "2e5027e76ceb2584",
        "type": "function",
        "z": "bc70283693a5505d",
        "g": "9d38849303bb0904",
        "name": "1 Day Data",
        "func": "// Get the current date and time\nvar endDate = new Date();\n\n// Calculate the date 1 day before the current date\nvar startDate = new Date();\nstartDate.setDate(endDate.getDate() - 1);\n\n// Create the query object\nmsg.payload = {\n    \"timestamp\": {\n        \"$gte\": startDate,\n        \"$lte\": endDate\n    },\n    \"device_id\": \"sensebox-02\"\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 620,
        "wires": [
            [
                "37746e402dc0d5a7"
            ]
        ]
    },
    {
        "id": "2bcb830197212210",
        "type": "function",
        "z": "bc70283693a5505d",
        "g": "9d38849303bb0904",
        "name": "Temperature",
        "func": "var results = msg.payload;\nvar temperature_data = [];\nvar min_temperature_data = [];\nvar max_temperature_data = [];\n\nfor (var i = 0; i < results.length; i++) {\n\n    var temp = parseFloat(results[i].data.temperature).toFixed(2);\n    var tempMin = parseFloat(results[i].data.temperature_min).toFixed(2);\n    var tempMax = parseFloat(results[i].data.temperature_max).toFixed(2);\n\n    temperature_data.push({\n        \"x\": results[i].timestamp,\n        \"y\": parseFloat(temp)\n    });\n    min_temperature_data.push({\n        \"x\": results[i].timestamp,\n        \"y\": parseFloat(tempMin)\n    });\n    max_temperature_data.push({\n        \"x\": results[i].timestamp,\n        \"y\": parseFloat(tempMax)\n    });\n}\n\nmsg.payload = [{\n    \"series\": [\"Temperature\", \"Temperature Max\", \"Temperature Min\"],\n    \"data\": [\n        temperature_data,\n        min_temperature_data,\n        max_temperature_data\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 540,
        "wires": [
            [
                "b118f0e7d18962f5",
                "1921553e58ddab82"
            ]
        ]
    },
    {
        "id": "80e5ddfad95928f1",
        "type": "ui_form",
        "z": "bc70283693a5505d",
        "g": "9d38849303bb0904",
        "name": "Select Time",
        "label": "Select Time",
        "group": "4c0dae9a2cd86da7",
        "order": 8,
        "width": 4,
        "height": 5,
        "options": [
            {
                "label": "From",
                "value": "startDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "To",
                "value": "endDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "Download Data",
                "value": "dataDownload",
                "type": "switch",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "startDate": "",
            "endDate": "",
            "dataDownload": false
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": false,
        "className": "",
        "x": 170,
        "y": 700,
        "wires": [
            [
                "c122a3610a1271e5"
            ]
        ]
    },
    {
        "id": "c122a3610a1271e5",
        "type": "function",
        "z": "bc70283693a5505d",
        "g": "9d38849303bb0904",
        "name": "User Request",
        "func": "var endDate = new Date(msg.payload.endDate);\nvar startDate = new Date(msg.payload.startDate);\n\nif (msg.payload.dataDownload) {\n    var dataDownload = msg.payload.dataDownload;\n    msg.action = 'normal';\n}\n\nif (msg.payload.dataDownload1) {\n    var dataDownload = msg.payload.dataDownload1;\n    msg.action = 'seperate';\n}\n\nmsg.payload = {\n    \"timestamp\": {\n        \"$gte\": startDate,\n        \"$lte\": endDate\n    },\n    \"device_id\": \"sensebox-02\"\n};\n\nmsg.dataDownload = dataDownload;\nmsg.device_id = \"sensebox-02\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 700,
        "wires": [
            [
                "37746e402dc0d5a7"
            ]
        ]
    },
    {
        "id": "5cfdae0cc77b851d",
        "type": "function",
        "z": "bc70283693a5505d",
        "g": "9d38849303bb0904",
        "name": "Humidity",
        "func": "var results = msg.payload; \nvar humidity = [];\n\nfor (var i = 0; i < results.length; i++) {\n    humidity.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.humidity\n    })\n}\n\nmsg.payload = [{\n    \"series\": [\"Relative Humidity\"],\n    \"data\": [\n        humidity\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 600,
        "wires": [
            [
                "3089793277f46e05",
                "7c8bac1f47172ffc"
            ]
        ]
    },
    {
        "id": "3089793277f46e05",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "9d38849303bb0904",
        "name": "Humidity",
        "group": "4c0dae9a2cd86da7",
        "order": 10,
        "width": 7,
        "height": 6,
        "label": "Humidity (%)",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 900,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "b118f0e7d18962f5",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "9d38849303bb0904",
        "name": "Temperature",
        "group": "4c0dae9a2cd86da7",
        "order": 9,
        "width": 15,
        "height": 6,
        "label": "Temperature (°C)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 910,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "82ce3dee15b00e14",
        "type": "ui_button",
        "z": "bc70283693a5505d",
        "g": "9d38849303bb0904",
        "name": "",
        "group": "4c0dae9a2cd86da7",
        "order": 11,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "red",
        "bgcolor": "white",
        "className": "",
        "icon": "fa-refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 170,
        "y": 540,
        "wires": [
            [
                "2e5027e76ceb2584"
            ]
        ]
    },
    {
        "id": "3582f6808561444a",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "9d38849303bb0904",
        "name": "Illuminance",
        "group": "4c0dae9a2cd86da7",
        "order": 12,
        "width": 13,
        "height": 6,
        "label": "Illuminance (lx)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 910,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "9cd7d11e0fce3d9e",
        "type": "function",
        "z": "bc70283693a5505d",
        "g": "9d38849303bb0904",
        "name": "Illuminance",
        "func": "var results = msg.payload; \nvar lux = [];\nvar lux_max = [];\nvar lux_min = [];\n\nfor (var i = 0; i < results.length; i++) {\n    lux.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.lux\n    });\n    lux_max.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.lux_max\n    });\n    lux_min.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.lux_min\n    });\n}\n\nmsg.payload = [{\n    \"series\": [\"Illuminance\", \"Maximum Illuminance\", \"Minimum Illuminance\"],\n    \"data\": [\n        lux,\n        lux_max,\n        lux_min\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 660,
        "wires": [
            [
                "3582f6808561444a",
                "5442f02ddce54e30"
            ]
        ]
    },
    {
        "id": "646e0f3f20368094",
        "type": "function",
        "z": "bc70283693a5505d",
        "g": "9d38849303bb0904",
        "name": "UV Intensity",
        "func": "var results = msg.payload; \nvar uv = [];\nvar uv_max = [];\nvar uv_min = [];\n\nfor (var i = 0; i < results.length; i++) {\n    uv.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.uv\n    });\n    uv_max.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.uv_max\n    });\n    uv_min.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.uv_min\n    });\n}\n\nmsg.payload = [{\n    \"series\": [\"UV Intensity\", \"Maximum UV Intensity\", \"Minimum UV Intensity\"],\n    \"data\": [\n        uv,\n        uv_max,\n        uv_min\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 720,
        "wires": [
            [
                "ac419fa6bc36883d",
                "c6bab75f2731b4ed"
            ]
        ]
    },
    {
        "id": "ac419fa6bc36883d",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "9d38849303bb0904",
        "name": "UV Intensity",
        "group": "4c0dae9a2cd86da7",
        "order": 13,
        "width": 13,
        "height": 6,
        "label": "UV Intensity (µW⋅cm⁻²)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 910,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "696de90e3f4df436",
        "type": "ui_text",
        "z": "bc70283693a5505d",
        "g": "9d38849303bb0904",
        "group": "4c0dae9a2cd86da7",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "SENSEBOX-2",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "20",
        "color": "#0f22ae",
        "x": 500,
        "y": 500,
        "wires": []
    },
    {
        "id": "be1d88a54079f559",
        "type": "mongodb4",
        "z": "bc70283693a5505d",
        "g": "c79106f3978724b1",
        "clientNode": "6c246c6eea0c6943",
        "mode": "collection",
        "collection": "temp_sensor",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 510,
        "y": 980,
        "wires": [
            [
                "aff3462d9231303f",
                "866726cf10160da8",
                "35d1502c601fe8be",
                "5a365871cd4171e0",
                "307eecbf901e1e7a"
            ]
        ]
    },
    {
        "id": "514ca58e1a0b9998",
        "type": "inject",
        "z": "bc70283693a5505d",
        "g": "c79106f3978724b1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 170,
        "y": 980,
        "wires": [
            [
                "0e5467e442361569"
            ]
        ]
    },
    {
        "id": "0e5467e442361569",
        "type": "function",
        "z": "bc70283693a5505d",
        "g": "c79106f3978724b1",
        "name": "1 Day Data",
        "func": "// Get the current date and time\nvar endDate = new Date();\n\n// Calculate the date 1 day before the current date\nvar startDate = new Date();\nstartDate.setDate(endDate.getDate() - 1);\n\n// Create the query object\nmsg.payload = {\n    \"timestamp\": {\n        \"$gte\": startDate,\n        \"$lte\": endDate\n    },\n    \"device_id\": \"sensebox-03\"\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 980,
        "wires": [
            [
                "be1d88a54079f559"
            ]
        ]
    },
    {
        "id": "aff3462d9231303f",
        "type": "function",
        "z": "bc70283693a5505d",
        "g": "c79106f3978724b1",
        "name": "Temperature",
        "func": "var results = msg.payload; \nvar temperature_data = [];\nvar min_temperature_data = [];\nvar max_temperature_data = [];\n\nfor (var i = 0; i < results.length; i++) {\n\n    var temp = parseFloat(results[i].data.temperature).toFixed(2);\n    var tempMin = parseFloat(results[i].data.temperature_min).toFixed(2);\n    var tempMax = parseFloat(results[i].data.temperature_max).toFixed(2);\n\n    temperature_data.push({\n        \"x\": results[i].timestamp,\n        \"y\": parseFloat(temp)\n    });\n    min_temperature_data.push({\n        \"x\": results[i].timestamp,\n        \"y\": parseFloat(tempMin)\n    });\n    max_temperature_data.push({\n        \"x\": results[i].timestamp,\n        \"y\": parseFloat(tempMax)\n    });\n}\n\nmsg.payload = [{\n    \"series\": [\"Temperature\", \"Temperature Max\", \"Temperature Min\"],\n    \"data\": [\n        temperature_data,\n        min_temperature_data,\n        max_temperature_data\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 900,
        "wires": [
            [
                "9f7c0c947c02e812",
                "b3854f5585baa59f"
            ]
        ]
    },
    {
        "id": "ccc7c69b63ecc3fa",
        "type": "ui_form",
        "z": "bc70283693a5505d",
        "g": "c79106f3978724b1",
        "name": "Select Time",
        "label": "Select Time",
        "group": "2cfaf224e1791a9f",
        "order": 8,
        "width": 4,
        "height": 5,
        "options": [
            {
                "label": "From",
                "value": "startDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "To",
                "value": "endDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "Download Data",
                "value": "dataDownload",
                "type": "switch",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "startDate": "",
            "endDate": "",
            "dataDownload": false
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": false,
        "className": "",
        "x": 170,
        "y": 1060,
        "wires": [
            [
                "0ef0e35ae2df7ddc"
            ]
        ]
    },
    {
        "id": "0ef0e35ae2df7ddc",
        "type": "function",
        "z": "bc70283693a5505d",
        "g": "c79106f3978724b1",
        "name": "User Request",
        "func": "var endDate = new Date(msg.payload.endDate);\nvar startDate = new Date(msg.payload.startDate);\n\nif (msg.payload.dataDownload) {\n    var dataDownload = msg.payload.dataDownload;\n    msg.action = 'normal';\n}\n\nif (msg.payload.dataDownload1) {\n    var dataDownload = msg.payload.dataDownload1;\n    msg.action = 'seperate';\n}\n\nmsg.payload = {\n    \"timestamp\": {\n        \"$gte\": startDate,\n        \"$lte\": endDate\n    },\n    \"device_id\": \"sensebox-03\"\n};\n\nmsg.dataDownload = dataDownload;\nmsg.device_id = \"sensebox-03\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1060,
        "wires": [
            [
                "be1d88a54079f559"
            ]
        ]
    },
    {
        "id": "866726cf10160da8",
        "type": "function",
        "z": "bc70283693a5505d",
        "g": "c79106f3978724b1",
        "name": "Humidity",
        "func": "var results = msg.payload; \nvar humidity = [];\n\nfor (var i = 0; i < results.length; i++) {\n    humidity.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.humidity\n    })\n}\n\nmsg.payload = [{\n    \"series\": [\"Relative Humidity\"],\n    \"data\": [\n        humidity\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 960,
        "wires": [
            [
                "ead5219c8c2a1df1",
                "37b1a9417dfa9cd6"
            ]
        ]
    },
    {
        "id": "ead5219c8c2a1df1",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "c79106f3978724b1",
        "name": "Humidity",
        "group": "2cfaf224e1791a9f",
        "order": 10,
        "width": 7,
        "height": 6,
        "label": "Humidity (%)",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 900,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "9f7c0c947c02e812",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "c79106f3978724b1",
        "name": "Temperature",
        "group": "2cfaf224e1791a9f",
        "order": 9,
        "width": 15,
        "height": 6,
        "label": "Temperature (°C)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 910,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "75ef07c4ad71a9e9",
        "type": "ui_button",
        "z": "bc70283693a5505d",
        "g": "c79106f3978724b1",
        "name": "",
        "group": "2cfaf224e1791a9f",
        "order": 11,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "red",
        "bgcolor": "white",
        "className": "",
        "icon": "fa-refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 170,
        "y": 900,
        "wires": [
            [
                "0e5467e442361569"
            ]
        ]
    },
    {
        "id": "eb3a677c65e3d43e",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "c79106f3978724b1",
        "name": "Illuminance",
        "group": "2cfaf224e1791a9f",
        "order": 12,
        "width": 13,
        "height": 6,
        "label": "Illuminance (lx)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 910,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "35d1502c601fe8be",
        "type": "function",
        "z": "bc70283693a5505d",
        "g": "c79106f3978724b1",
        "name": "Illuminance",
        "func": "var results = msg.payload; \nvar lux = [];\nvar lux_max = [];\nvar lux_min = [];\n\nfor (var i = 0; i < results.length; i++) {\n    lux.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.lux\n    });\n    lux_max.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.lux_max\n    });\n    lux_min.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.lux_min\n    });\n}\n\nmsg.payload = [{\n    \"series\": [\"Illuminance\", \"Maximum Illuminance\", \"Minimum Illuminance\"],\n    \"data\": [\n        lux,\n        lux_max,\n        lux_min\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1020,
        "wires": [
            [
                "eb3a677c65e3d43e",
                "a4d6887f660bba58"
            ]
        ]
    },
    {
        "id": "5a365871cd4171e0",
        "type": "function",
        "z": "bc70283693a5505d",
        "g": "c79106f3978724b1",
        "name": "UV Intensity",
        "func": "var results = msg.payload; \nvar uv = [];\nvar uv_max = [];\nvar uv_min = [];\n\nfor (var i = 0; i < results.length; i++) {\n    uv.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.uv\n    });\n    uv_max.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.uv_max\n    });\n    uv_min.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.uv_min\n    });\n}\n\nmsg.payload = [{\n    \"series\": [\"UV Intensity\", \"Maximum UV Intensity\", \"Minimum UV Intensity\"],\n    \"data\": [\n        uv,\n        uv_max,\n        uv_min\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1080,
        "wires": [
            [
                "e28a1b6545d8f88c",
                "218e18966a8f365b"
            ]
        ]
    },
    {
        "id": "e28a1b6545d8f88c",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "c79106f3978724b1",
        "name": "UV Intensity",
        "group": "2cfaf224e1791a9f",
        "order": 13,
        "width": 13,
        "height": 6,
        "label": "UV Intensity (µW⋅cm⁻²)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 910,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "8e40ffae6ceb8e0f",
        "type": "ui_text",
        "z": "bc70283693a5505d",
        "g": "c79106f3978724b1",
        "group": "2cfaf224e1791a9f",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "SENSEBOX-3",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "20",
        "color": "#0f22ae",
        "x": 500,
        "y": 860,
        "wires": []
    },
    {
        "id": "a2da559b3aee3cac",
        "type": "mongodb4",
        "z": "bc70283693a5505d",
        "g": "c95b710f0ef9ba35",
        "clientNode": "6c246c6eea0c6943",
        "mode": "collection",
        "collection": "temp_sensor",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 510,
        "y": 1360,
        "wires": [
            [
                "843306742c87cca7",
                "b189cbe958ad48e9",
                "76e0d6f24975cb7f",
                "048740a15c8911a7",
                "307eecbf901e1e7a"
            ]
        ]
    },
    {
        "id": "9bde71c0c7ae22d8",
        "type": "inject",
        "z": "bc70283693a5505d",
        "g": "c95b710f0ef9ba35",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 170,
        "y": 1360,
        "wires": [
            [
                "3a6d8130dd111692"
            ]
        ]
    },
    {
        "id": "3a6d8130dd111692",
        "type": "function",
        "z": "bc70283693a5505d",
        "g": "c95b710f0ef9ba35",
        "name": "1 Day Data",
        "func": "// Get the current date and time\nvar endDate = new Date();\n\n// Calculate the date 1 day before the current date\nvar startDate = new Date();\nstartDate.setDate(endDate.getDate() - 1);\n\n// Create the query object\nmsg.payload = {\n    \"timestamp\": {\n        \"$gte\": startDate,\n        \"$lte\": endDate\n    },\n    \"device_id\": \"sensebox-04\"\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1360,
        "wires": [
            [
                "a2da559b3aee3cac"
            ]
        ]
    },
    {
        "id": "843306742c87cca7",
        "type": "function",
        "z": "bc70283693a5505d",
        "g": "c95b710f0ef9ba35",
        "name": "Temperature",
        "func": "var results = msg.payload;\nvar temperature_data = [];\nvar min_temperature_data = [];\nvar max_temperature_data = [];\n\nfor (var i = 0; i < results.length; i++) {\n\n    var temp = parseFloat(results[i].data.temperature).toFixed(2);\n    var tempMin = parseFloat(results[i].data.temperature_min).toFixed(2);\n    var tempMax = parseFloat(results[i].data.temperature_max).toFixed(2);\n\n    temperature_data.push({\n        \"x\": results[i].timestamp,\n        \"y\": parseFloat(temp)\n    });\n    min_temperature_data.push({\n        \"x\": results[i].timestamp,\n        \"y\": parseFloat(tempMin)\n    });\n    max_temperature_data.push({\n        \"x\": results[i].timestamp,\n        \"y\": parseFloat(tempMax)\n    });\n}\n\nmsg.payload = [{\n    \"series\": [\"Temperature\", \"Temperature Max\", \"Temperature Min\"],\n    \"data\": [\n        temperature_data,\n        min_temperature_data,\n        max_temperature_data\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1280,
        "wires": [
            [
                "0eb2880ada7beaba",
                "279573798d1f7768"
            ]
        ]
    },
    {
        "id": "808d79b4c881e393",
        "type": "ui_form",
        "z": "bc70283693a5505d",
        "g": "c95b710f0ef9ba35",
        "name": "Select Time",
        "label": "Select Time",
        "group": "9bc8f00db1f06ac5",
        "order": 8,
        "width": 4,
        "height": 5,
        "options": [
            {
                "label": "From",
                "value": "startDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "To",
                "value": "endDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "Download Data",
                "value": "dataDownload",
                "type": "switch",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "startDate": "",
            "endDate": "",
            "dataDownload": false
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": false,
        "className": "",
        "x": 170,
        "y": 1440,
        "wires": [
            [
                "095a1ae08ec1140d"
            ]
        ]
    },
    {
        "id": "095a1ae08ec1140d",
        "type": "function",
        "z": "bc70283693a5505d",
        "g": "c95b710f0ef9ba35",
        "name": "User Request",
        "func": "var endDate = new Date(msg.payload.endDate);\nvar startDate = new Date(msg.payload.startDate);\n\nif (msg.payload.dataDownload) {\n    var dataDownload = msg.payload.dataDownload;\n    msg.action = 'normal';\n}\n\nif (msg.payload.dataDownload1) {\n    var dataDownload = msg.payload.dataDownload1;\n    msg.action = 'seperate';\n}\n\nmsg.payload = {\n    \"timestamp\": {\n        \"$gte\": startDate,\n        \"$lte\": endDate\n    },\n    \"device_id\": \"sensebox-04\"\n};\n\nmsg.dataDownload = dataDownload;\nmsg.device_id = \"sensebox-04\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1440,
        "wires": [
            [
                "a2da559b3aee3cac"
            ]
        ]
    },
    {
        "id": "b189cbe958ad48e9",
        "type": "function",
        "z": "bc70283693a5505d",
        "g": "c95b710f0ef9ba35",
        "name": "Humidity",
        "func": "var results = msg.payload; \nvar humidity = [];\n\nfor (var i = 0; i < results.length; i++) {\n    humidity.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.humidity\n    })\n}\n\nmsg.payload = [{\n    \"series\": [\"Relative Humidity\"],\n    \"data\": [\n        humidity\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 1340,
        "wires": [
            [
                "7a59773f3316ea80",
                "74b19042c3d582f7"
            ]
        ]
    },
    {
        "id": "7a59773f3316ea80",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "c95b710f0ef9ba35",
        "name": "Humidity",
        "group": "9bc8f00db1f06ac5",
        "order": 10,
        "width": 7,
        "height": 6,
        "label": "Humidity (%)",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 900,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "0eb2880ada7beaba",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "c95b710f0ef9ba35",
        "name": "Temperature",
        "group": "9bc8f00db1f06ac5",
        "order": 9,
        "width": 15,
        "height": 6,
        "label": "Temperature (°C)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 910,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "f337f8a3e76df055",
        "type": "ui_button",
        "z": "bc70283693a5505d",
        "g": "c95b710f0ef9ba35",
        "name": "",
        "group": "9bc8f00db1f06ac5",
        "order": 11,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "red",
        "bgcolor": "white",
        "className": "",
        "icon": "fa-refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 170,
        "y": 1280,
        "wires": [
            [
                "3a6d8130dd111692"
            ]
        ]
    },
    {
        "id": "9b99fda537e90599",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "c95b710f0ef9ba35",
        "name": "Illuminance",
        "group": "9bc8f00db1f06ac5",
        "order": 12,
        "width": 13,
        "height": 6,
        "label": "Illuminance (lx)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 910,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "76e0d6f24975cb7f",
        "type": "function",
        "z": "bc70283693a5505d",
        "g": "c95b710f0ef9ba35",
        "name": "Illuminance",
        "func": "var results = msg.payload; \nvar lux = [];\nvar lux_max = [];\nvar lux_min = [];\n\nfor (var i = 0; i < results.length; i++) {\n    lux.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.lux\n    });\n    lux_max.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.lux_max\n    });\n    lux_min.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.lux_min\n    });\n}\n\nmsg.payload = [{\n    \"series\": [\"Illuminance\", \"Maximum Illuminance\", \"Minimum Illuminance\"],\n    \"data\": [\n        lux,\n        lux_max,\n        lux_min\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1400,
        "wires": [
            [
                "9b99fda537e90599",
                "0a95d8c7778bc1ad"
            ]
        ]
    },
    {
        "id": "048740a15c8911a7",
        "type": "function",
        "z": "bc70283693a5505d",
        "g": "c95b710f0ef9ba35",
        "name": "UV Intensity",
        "func": "var results = msg.payload; \nvar uv = [];\nvar uv_max = [];\nvar uv_min = [];\n\nfor (var i = 0; i < results.length; i++) {\n    uv.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.uv\n    });\n    uv_max.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.uv_max\n    });\n    uv_min.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.uv_min\n    });\n}\n\nmsg.payload = [{\n    \"series\": [\"UV Intensity\", \"Maximum UV Intensity\", \"Minimum UV Intensity\"],\n    \"data\": [\n        uv,\n        uv_max,\n        uv_min\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1460,
        "wires": [
            [
                "29055774fb469802",
                "9c6dc8f57a553455"
            ]
        ]
    },
    {
        "id": "29055774fb469802",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "c95b710f0ef9ba35",
        "name": "UV Intensity",
        "group": "9bc8f00db1f06ac5",
        "order": 13,
        "width": 13,
        "height": 6,
        "label": "UV Intensity (µW⋅cm⁻²)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 910,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "9219cc7811e28215",
        "type": "ui_text",
        "z": "bc70283693a5505d",
        "g": "c95b710f0ef9ba35",
        "group": "9bc8f00db1f06ac5",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "SENSEBOX-4",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "20",
        "color": "#0f22ae",
        "x": 500,
        "y": 1240,
        "wires": []
    },
    {
        "id": "bd372aed04631208",
        "type": "mongodb4",
        "z": "bc70283693a5505d",
        "g": "af1ea1044f640237",
        "clientNode": "6c246c6eea0c6943",
        "mode": "collection",
        "collection": "temp_sensor",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 510,
        "y": 1760,
        "wires": [
            [
                "9f428113b4d17208",
                "c9d79a214925595f",
                "bfbcaeb6808ae830",
                "443564a756d194e6",
                "307eecbf901e1e7a"
            ]
        ]
    },
    {
        "id": "1448fa4280994e6a",
        "type": "inject",
        "z": "bc70283693a5505d",
        "g": "af1ea1044f640237",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 170,
        "y": 1760,
        "wires": [
            [
                "39dc16886c52c3a3"
            ]
        ]
    },
    {
        "id": "39dc16886c52c3a3",
        "type": "function",
        "z": "bc70283693a5505d",
        "g": "af1ea1044f640237",
        "name": "1 Day Data",
        "func": "// Get the current date and time\nvar endDate = new Date();\n\n// Calculate the date 1 day before the current date\nvar startDate = new Date();\nstartDate.setDate(endDate.getDate() - 1);\n\n// Create the query object\nmsg.payload = {\n    \"timestamp\": {\n        \"$gte\": startDate,\n        \"$lte\": endDate\n    },\n    \"device_id\": \"sensebox-06\"\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1760,
        "wires": [
            [
                "bd372aed04631208"
            ]
        ]
    },
    {
        "id": "9f428113b4d17208",
        "type": "function",
        "z": "bc70283693a5505d",
        "g": "af1ea1044f640237",
        "name": "Temperature",
        "func": "var results = msg.payload; \nvar temperature_data = [];\nvar min_temperature_data = [];\nvar max_temperature_data = [];\n\nfor (var i = 0; i < results.length; i++) {\n\n    var temp = parseFloat(results[i].data.temperature).toFixed(2);\n    var tempMin = parseFloat(results[i].data.temperature_min).toFixed(2);\n    var tempMax = parseFloat(results[i].data.temperature_max).toFixed(2);\n\n    temperature_data.push({\n        \"x\": results[i].timestamp,\n        \"y\": parseFloat(temp)\n    });\n    min_temperature_data.push({\n        \"x\": results[i].timestamp,\n        \"y\": parseFloat(tempMin)\n    });\n    max_temperature_data.push({\n        \"x\": results[i].timestamp,\n        \"y\": parseFloat(tempMax)\n    });\n}\n\nmsg.payload = [{\n    \"series\": [\"Temperature\", \"Temperature Max\", \"Temperature Min\"],\n    \"data\": [\n        temperature_data,\n        min_temperature_data,\n        max_temperature_data\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1680,
        "wires": [
            [
                "c7d3430d192cb84e"
            ]
        ]
    },
    {
        "id": "cf11b0139d15f504",
        "type": "ui_form",
        "z": "bc70283693a5505d",
        "g": "af1ea1044f640237",
        "name": "Select Time",
        "label": "Select Time",
        "group": "e94fdd1c5dec442c",
        "order": 8,
        "width": 4,
        "height": 5,
        "options": [
            {
                "label": "From",
                "value": "startDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "To",
                "value": "endDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "Download Data",
                "value": "dataDownload",
                "type": "switch",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "startDate": "",
            "endDate": "",
            "dataDownload": false
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": false,
        "className": "",
        "x": 170,
        "y": 1840,
        "wires": [
            [
                "137b5b4e82797e01"
            ]
        ]
    },
    {
        "id": "137b5b4e82797e01",
        "type": "function",
        "z": "bc70283693a5505d",
        "g": "af1ea1044f640237",
        "name": "User Request",
        "func": "var endDate = new Date(msg.payload.endDate);\nvar startDate = new Date(msg.payload.startDate);\n\nif (msg.payload.dataDownload) {\n    var dataDownload = msg.payload.dataDownload;\n    msg.action = 'normal';\n}\n\nif (msg.payload.dataDownload1) {\n    var dataDownload = msg.payload.dataDownload1;\n    msg.action = 'seperate';\n}\n\nmsg.payload = {\n    \"timestamp\": {\n        \"$gte\": startDate,\n        \"$lte\": endDate\n    },\n    \"device_id\": \"sensebox-06\"\n};\n\nmsg.dataDownload = dataDownload;\nmsg.device_id = \"sensebox-06\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1840,
        "wires": [
            [
                "bd372aed04631208"
            ]
        ]
    },
    {
        "id": "c9d79a214925595f",
        "type": "function",
        "z": "bc70283693a5505d",
        "g": "af1ea1044f640237",
        "name": "Humidity",
        "func": "var results = msg.payload; \nvar humidity = [];\n\nfor (var i = 0; i < results.length; i++) {\n    humidity.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.humidity\n    })\n}\n\nmsg.payload = [{\n    \"series\": [\"Relative Humidity\"],\n    \"data\": [\n        humidity\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 1740,
        "wires": [
            [
                "301139d4436286a3"
            ]
        ]
    },
    {
        "id": "301139d4436286a3",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "af1ea1044f640237",
        "name": "Humidity",
        "group": "e94fdd1c5dec442c",
        "order": 10,
        "width": 7,
        "height": 6,
        "label": "Humidity (%)",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 900,
        "y": 1740,
        "wires": [
            [
                "f65db1feef73dd2e"
            ]
        ]
    },
    {
        "id": "c7d3430d192cb84e",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "af1ea1044f640237",
        "name": "Temperature",
        "group": "e94fdd1c5dec442c",
        "order": 9,
        "width": 15,
        "height": 6,
        "label": "Temperature (°C)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 910,
        "y": 1680,
        "wires": [
            [
                "f05f78990a018a2c"
            ]
        ]
    },
    {
        "id": "e44ddd4d97874dec",
        "type": "ui_button",
        "z": "bc70283693a5505d",
        "g": "af1ea1044f640237",
        "name": "",
        "group": "e94fdd1c5dec442c",
        "order": 11,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "red",
        "bgcolor": "white",
        "className": "",
        "icon": "fa-refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 170,
        "y": 1680,
        "wires": [
            [
                "39dc16886c52c3a3"
            ]
        ]
    },
    {
        "id": "211389631c60578b",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "af1ea1044f640237",
        "name": "Illuminance",
        "group": "e94fdd1c5dec442c",
        "order": 12,
        "width": 13,
        "height": 6,
        "label": "Illuminance (lx)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 910,
        "y": 1800,
        "wires": [
            [
                "ae4a84b5e1ae9dfa"
            ]
        ]
    },
    {
        "id": "bfbcaeb6808ae830",
        "type": "function",
        "z": "bc70283693a5505d",
        "g": "af1ea1044f640237",
        "name": "Illuminance",
        "func": "var results = msg.payload; \nvar lux = [];\nvar lux_max = [];\nvar lux_min = [];\n\nfor (var i = 0; i < results.length; i++) {\n    lux.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.lux\n    });\n    lux_max.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.lux_max\n    });\n    lux_min.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.lux_min\n    });\n}\n\nmsg.payload = [{\n    \"series\": [\"Illuminance\", \"Maximum Illuminance\", \"Minimum Illuminance\"],\n    \"data\": [\n        lux,\n        lux_max,\n        lux_min\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1800,
        "wires": [
            [
                "211389631c60578b"
            ]
        ]
    },
    {
        "id": "443564a756d194e6",
        "type": "function",
        "z": "bc70283693a5505d",
        "g": "af1ea1044f640237",
        "name": "UV Intensity",
        "func": "var results = msg.payload; \nvar uv = [];\nvar uv_max = [];\nvar uv_min = [];\n\nfor (var i = 0; i < results.length; i++) {\n    uv.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.uv\n    });\n    uv_max.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.uv_max\n    });\n    uv_min.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.uv_min\n    });\n}\n\nmsg.payload = [{\n    \"series\": [\"UV Intensity\", \"Maximum UV Intensity\", \"Minimum UV Intensity\"],\n    \"data\": [\n        uv,\n        uv_max,\n        uv_min\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1860,
        "wires": [
            [
                "e899a59139513804"
            ]
        ]
    },
    {
        "id": "e899a59139513804",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "af1ea1044f640237",
        "name": "UV Intensity",
        "group": "e94fdd1c5dec442c",
        "order": 13,
        "width": 13,
        "height": 6,
        "label": "UV Intensity (µW⋅cm⁻²)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 910,
        "y": 1860,
        "wires": [
            [
                "e919eb6c062e18d6"
            ]
        ]
    },
    {
        "id": "53c03897a3a1f2c4",
        "type": "ui_text",
        "z": "bc70283693a5505d",
        "g": "af1ea1044f640237",
        "group": "e94fdd1c5dec442c",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "SENSEBOX-6",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "20",
        "color": "#0f22ae",
        "x": 500,
        "y": 1640,
        "wires": []
    },
    {
        "id": "5046a6a15ee7d97f",
        "type": "mongodb4",
        "z": "bc70283693a5505d",
        "g": "3a9c1833b4c05e0a",
        "clientNode": "6c246c6eea0c6943",
        "mode": "collection",
        "collection": "temp_sensor",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 510,
        "y": 2160,
        "wires": [
            [
                "5350d03e715d0051",
                "8c9268612330ee5b",
                "0b9f735f39b341f7",
                "9d332d132e44a12b",
                "307eecbf901e1e7a"
            ]
        ]
    },
    {
        "id": "8c3839aadb02f512",
        "type": "inject",
        "z": "bc70283693a5505d",
        "g": "3a9c1833b4c05e0a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 170,
        "y": 2160,
        "wires": [
            [
                "d9860eca5db39148"
            ]
        ]
    },
    {
        "id": "d9860eca5db39148",
        "type": "function",
        "z": "bc70283693a5505d",
        "g": "3a9c1833b4c05e0a",
        "name": "1 Day Data",
        "func": "// Get the current date and time\nvar endDate = new Date();\n\n// Calculate the date 1 day before the current date\nvar startDate = new Date();\nstartDate.setDate(endDate.getDate() - 1);\n\n// Create the query object\nmsg.payload = {\n    \"timestamp\": {\n        \"$gte\": startDate,\n        \"$lte\": endDate\n    },\n    \"device_id\": \"sensebox-07\"\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2160,
        "wires": [
            [
                "5046a6a15ee7d97f"
            ]
        ]
    },
    {
        "id": "5350d03e715d0051",
        "type": "function",
        "z": "bc70283693a5505d",
        "g": "3a9c1833b4c05e0a",
        "name": "Temperature",
        "func": "var results = msg.payload;\nvar temperature_data = [];\nvar min_temperature_data = [];\nvar max_temperature_data = [];\n\nfor (var i = 0; i < results.length; i++) {\n\n    var temp = parseFloat(results[i].data.temperature).toFixed(2);\n    var tempMin = parseFloat(results[i].data.temperature_min).toFixed(2);\n    var tempMax = parseFloat(results[i].data.temperature_max).toFixed(2);\n\n    temperature_data.push({\n        \"x\": results[i].timestamp,\n        \"y\": parseFloat(temp)\n    });\n    min_temperature_data.push({\n        \"x\": results[i].timestamp,\n        \"y\": parseFloat(tempMin)\n    });\n    max_temperature_data.push({\n        \"x\": results[i].timestamp,\n        \"y\": parseFloat(tempMax)\n    });\n}\n\nmsg.payload = [{\n    \"series\": [\"Temperature\", \"Temperature Max\", \"Temperature Min\"],\n    \"data\": [\n        temperature_data,\n        min_temperature_data,\n        max_temperature_data\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 2080,
        "wires": [
            [
                "47fa8d2e317be4f5",
                "8d88ac2e170a2a75"
            ]
        ]
    },
    {
        "id": "a813a186d13bed0a",
        "type": "ui_form",
        "z": "bc70283693a5505d",
        "g": "3a9c1833b4c05e0a",
        "name": "Select Time",
        "label": "Select Time",
        "group": "4e8918bf6c385740",
        "order": 8,
        "width": 4,
        "height": 5,
        "options": [
            {
                "label": "From",
                "value": "startDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "To",
                "value": "endDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "Download Data",
                "value": "dataDownload",
                "type": "switch",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "startDate": "",
            "endDate": "",
            "dataDownload": false
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": false,
        "className": "",
        "x": 170,
        "y": 2240,
        "wires": [
            [
                "c0ba90ae9869a099"
            ]
        ]
    },
    {
        "id": "c0ba90ae9869a099",
        "type": "function",
        "z": "bc70283693a5505d",
        "g": "3a9c1833b4c05e0a",
        "name": "User Request",
        "func": "var endDate = new Date(msg.payload.endDate);\nvar startDate = new Date(msg.payload.startDate);\n\nif (msg.payload.dataDownload) {\n    var dataDownload = msg.payload.dataDownload;\n    msg.action = 'normal';\n}\n\nif (msg.payload.dataDownload1) {\n    var dataDownload = msg.payload.dataDownload1;\n    msg.action = 'seperate';\n}\n\nmsg.payload = {\n    \"timestamp\": {\n        \"$gte\": startDate,\n        \"$lte\": endDate\n    },\n    \"device_id\": \"sensebox-07\"\n};\n\nmsg.dataDownload = dataDownload;\nmsg.device_id = \"sensebox-07\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 2240,
        "wires": [
            [
                "5046a6a15ee7d97f"
            ]
        ]
    },
    {
        "id": "8c9268612330ee5b",
        "type": "function",
        "z": "bc70283693a5505d",
        "g": "3a9c1833b4c05e0a",
        "name": "Humidity",
        "func": "var results = msg.payload; \nvar humidity = [];\n\nfor (var i = 0; i < results.length; i++) {\n    humidity.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.humidity\n    })\n}\n\nmsg.payload = [{\n    \"series\": [\"Relative Humidity\"],\n    \"data\": [\n        humidity\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 2140,
        "wires": [
            [
                "9ea9c00b920c1124",
                "6b5f692ee5606eec"
            ]
        ]
    },
    {
        "id": "9ea9c00b920c1124",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "3a9c1833b4c05e0a",
        "name": "Humidity",
        "group": "4e8918bf6c385740",
        "order": 10,
        "width": 7,
        "height": 6,
        "label": "Humidity (%)",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 900,
        "y": 2140,
        "wires": [
            []
        ]
    },
    {
        "id": "47fa8d2e317be4f5",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "3a9c1833b4c05e0a",
        "name": "Temperature",
        "group": "4e8918bf6c385740",
        "order": 9,
        "width": 15,
        "height": 6,
        "label": "Temperature (°C)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 910,
        "y": 2080,
        "wires": [
            []
        ]
    },
    {
        "id": "8bf11a9034adc962",
        "type": "ui_button",
        "z": "bc70283693a5505d",
        "g": "3a9c1833b4c05e0a",
        "name": "",
        "group": "4e8918bf6c385740",
        "order": 11,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "red",
        "bgcolor": "white",
        "className": "",
        "icon": "fa-refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 170,
        "y": 2080,
        "wires": [
            [
                "d9860eca5db39148"
            ]
        ]
    },
    {
        "id": "4483fc54dbd049b6",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "3a9c1833b4c05e0a",
        "name": "Illuminance",
        "group": "4e8918bf6c385740",
        "order": 12,
        "width": 13,
        "height": 6,
        "label": "Illuminance (lx)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 910,
        "y": 2200,
        "wires": [
            []
        ]
    },
    {
        "id": "0b9f735f39b341f7",
        "type": "function",
        "z": "bc70283693a5505d",
        "g": "3a9c1833b4c05e0a",
        "name": "Illuminance",
        "func": "var results = msg.payload; \nvar lux = [];\nvar lux_max = [];\nvar lux_min = [];\n\nfor (var i = 0; i < results.length; i++) {\n    lux.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.lux\n    });\n    lux_max.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.lux_max\n    });\n    lux_min.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.lux_min\n    });\n}\n\nmsg.payload = [{\n    \"series\": [\"Illuminance\", \"Maximum Illuminance\", \"Minimum Illuminance\"],\n    \"data\": [\n        lux,\n        lux_max,\n        lux_min\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 2200,
        "wires": [
            [
                "4483fc54dbd049b6",
                "9d1f13ee2846f197"
            ]
        ]
    },
    {
        "id": "9d332d132e44a12b",
        "type": "function",
        "z": "bc70283693a5505d",
        "g": "3a9c1833b4c05e0a",
        "name": "UV Intensity",
        "func": "var results = msg.payload; \nvar uv = [];\nvar uv_max = [];\nvar uv_min = [];\n\nfor (var i = 0; i < results.length; i++) {\n    uv.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.uv\n    });\n    uv_max.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.uv_max\n    });\n    uv_min.push({\n        \"x\": results[i].timestamp,\n        \"y\": results[i].data.uv_min\n    });\n}\n\nmsg.payload = [{\n    \"series\": [\"UV Intensity\", \"Maximum UV Intensity\", \"Minimum UV Intensity\"],\n    \"data\": [\n        uv,\n        uv_max,\n        uv_min\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 2260,
        "wires": [
            [
                "e4af75d969b4995d",
                "7ec0090c6fabb488"
            ]
        ]
    },
    {
        "id": "e4af75d969b4995d",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "3a9c1833b4c05e0a",
        "name": "UV Intensity",
        "group": "4e8918bf6c385740",
        "order": 13,
        "width": 13,
        "height": 6,
        "label": "UV Intensity (µW⋅cm⁻²)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 910,
        "y": 2260,
        "wires": [
            []
        ]
    },
    {
        "id": "c01c18f5aa2a779e",
        "type": "ui_text",
        "z": "bc70283693a5505d",
        "g": "3a9c1833b4c05e0a",
        "group": "4e8918bf6c385740",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "SENSEBOX-7",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "20",
        "color": "#0f22ae",
        "x": 500,
        "y": 2040,
        "wires": []
    },
    {
        "id": "eb2de4b416b6c175",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "f769dfedbb3f9361",
        "name": "Temperature",
        "group": "a5281de7acfee762",
        "order": 9,
        "width": 15,
        "height": 6,
        "label": "Temperature (°C)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1110,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "075370ce2d65b7ec",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "f769dfedbb3f9361",
        "name": "Humidity",
        "group": "a5281de7acfee762",
        "order": 10,
        "width": 7,
        "height": 6,
        "label": "Humidity (%)",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1100,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "9a23299a2b64b216",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "f769dfedbb3f9361",
        "name": "Illuminance",
        "group": "a5281de7acfee762",
        "order": 12,
        "width": 13,
        "height": 6,
        "label": "Illuminance (lx)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1110,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "68d822b4122c24bb",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "f769dfedbb3f9361",
        "name": "UV Intensity",
        "group": "a5281de7acfee762",
        "order": 13,
        "width": 13,
        "height": 6,
        "label": "UV Intensity (µW⋅cm⁻²)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1110,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "d3b3aefe8cca83fd",
        "type": "ui_text",
        "z": "bc70283693a5505d",
        "g": "f769dfedbb3f9361",
        "group": "a5281de7acfee762",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "SENSEBOX-1",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "20",
        "color": "#0f22ae",
        "x": 1120,
        "y": 80,
        "wires": []
    },
    {
        "id": "47364060440be65d",
        "type": "ui_button",
        "z": "bc70283693a5505d",
        "g": "f769dfedbb3f9361",
        "name": "",
        "group": "a5281de7acfee762",
        "order": 11,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "red",
        "bgcolor": "white",
        "className": "",
        "icon": "fa-refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 170,
        "y": 100,
        "wires": [
            [
                "a533cdabe25bbcc5"
            ]
        ]
    },
    {
        "id": "cb0c185b3383d45e",
        "type": "ui_form",
        "z": "bc70283693a5505d",
        "g": "f769dfedbb3f9361",
        "name": "Select Time",
        "label": "Select Time",
        "group": "a5281de7acfee762",
        "order": 8,
        "width": 4,
        "height": 5,
        "options": [
            {
                "label": "From",
                "value": "startDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "To",
                "value": "endDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "Download Data",
                "value": "dataDownload1",
                "type": "switch",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "startDate": "",
            "endDate": "",
            "dataDownload1": false
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": false,
        "className": "",
        "x": 170,
        "y": 360,
        "wires": [
            [
                "ba536606976c0c0a"
            ]
        ]
    },
    {
        "id": "1921553e58ddab82",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "9d38849303bb0904",
        "name": "Temperature",
        "group": "f22c80946683f6a8",
        "order": 9,
        "width": 15,
        "height": 6,
        "label": "Temperature (°C)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1110,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "7c8bac1f47172ffc",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "9d38849303bb0904",
        "name": "Humidity",
        "group": "f22c80946683f6a8",
        "order": 10,
        "width": 7,
        "height": 6,
        "label": "Humidity (%)",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1100,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "5442f02ddce54e30",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "9d38849303bb0904",
        "name": "Illuminance",
        "group": "f22c80946683f6a8",
        "order": 12,
        "width": 13,
        "height": 6,
        "label": "Illuminance (lx)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1110,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "c6bab75f2731b4ed",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "9d38849303bb0904",
        "name": "UV Intensity",
        "group": "f22c80946683f6a8",
        "order": 13,
        "width": 13,
        "height": 6,
        "label": "UV Intensity (µW⋅cm⁻²)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1110,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "bdf2762e47c695e7",
        "type": "ui_text",
        "z": "bc70283693a5505d",
        "g": "9d38849303bb0904",
        "group": "f22c80946683f6a8",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "SENSEBOX-2",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "20",
        "color": "#0f22ae",
        "x": 1120,
        "y": 480,
        "wires": []
    },
    {
        "id": "e9098045e3568254",
        "type": "ui_button",
        "z": "bc70283693a5505d",
        "g": "9d38849303bb0904",
        "name": "",
        "group": "f22c80946683f6a8",
        "order": 11,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "red",
        "bgcolor": "white",
        "className": "",
        "icon": "fa-refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 170,
        "y": 500,
        "wires": [
            [
                "2e5027e76ceb2584"
            ]
        ]
    },
    {
        "id": "91d695cf4709930b",
        "type": "ui_form",
        "z": "bc70283693a5505d",
        "g": "9d38849303bb0904",
        "name": "Select Time",
        "label": "Select Time",
        "group": "f22c80946683f6a8",
        "order": 8,
        "width": 4,
        "height": 5,
        "options": [
            {
                "label": "From",
                "value": "startDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "To",
                "value": "endDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "Download Data",
                "value": "dataDownload1",
                "type": "switch",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "startDate": "",
            "endDate": "",
            "dataDownload1": false
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": false,
        "className": "",
        "x": 170,
        "y": 740,
        "wires": [
            [
                "c122a3610a1271e5"
            ]
        ]
    },
    {
        "id": "30884a0e0ebc3033",
        "type": "ui_button",
        "z": "bc70283693a5505d",
        "g": "c79106f3978724b1",
        "name": "",
        "group": "894ffb0a4bc5684d",
        "order": 11,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "red",
        "bgcolor": "white",
        "className": "",
        "icon": "fa-refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 170,
        "y": 860,
        "wires": [
            [
                "0e5467e442361569"
            ]
        ]
    },
    {
        "id": "8b16c61e4b195406",
        "type": "ui_form",
        "z": "bc70283693a5505d",
        "g": "c79106f3978724b1",
        "name": "Select Time",
        "label": "Select Time",
        "group": "894ffb0a4bc5684d",
        "order": 8,
        "width": 4,
        "height": 5,
        "options": [
            {
                "label": "From",
                "value": "startDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "To",
                "value": "endDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "Download Data",
                "value": "dataDownload1",
                "type": "switch",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "startDate": "",
            "endDate": "",
            "dataDownload1": false
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": false,
        "className": "",
        "x": 170,
        "y": 1100,
        "wires": [
            [
                "0ef0e35ae2df7ddc"
            ]
        ]
    },
    {
        "id": "b3854f5585baa59f",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "c79106f3978724b1",
        "name": "Temperature",
        "group": "894ffb0a4bc5684d",
        "order": 9,
        "width": 15,
        "height": 6,
        "label": "Temperature (°C)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1110,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "37b1a9417dfa9cd6",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "c79106f3978724b1",
        "name": "Humidity",
        "group": "894ffb0a4bc5684d",
        "order": 10,
        "width": 7,
        "height": 6,
        "label": "Humidity (%)",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1100,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "a4d6887f660bba58",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "c79106f3978724b1",
        "name": "Illuminance",
        "group": "894ffb0a4bc5684d",
        "order": 12,
        "width": 13,
        "height": 6,
        "label": "Illuminance (lx)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1110,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "218e18966a8f365b",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "c79106f3978724b1",
        "name": "UV Intensity",
        "group": "894ffb0a4bc5684d",
        "order": 13,
        "width": 13,
        "height": 6,
        "label": "UV Intensity (µW⋅cm⁻²)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1110,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "5fafe5d75a23c903",
        "type": "ui_text",
        "z": "bc70283693a5505d",
        "g": "c79106f3978724b1",
        "group": "894ffb0a4bc5684d",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "SENSEBOX-3",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "20",
        "color": "#0f22ae",
        "x": 1120,
        "y": 860,
        "wires": []
    },
    {
        "id": "7ab06038ed0756e5",
        "type": "ui_button",
        "z": "bc70283693a5505d",
        "g": "c95b710f0ef9ba35",
        "name": "",
        "group": "2227c2cd15473dbf",
        "order": 11,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "red",
        "bgcolor": "white",
        "className": "",
        "icon": "fa-refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 170,
        "y": 1240,
        "wires": [
            [
                "3a6d8130dd111692"
            ]
        ]
    },
    {
        "id": "e9284fca82e50250",
        "type": "ui_form",
        "z": "bc70283693a5505d",
        "g": "c95b710f0ef9ba35",
        "name": "Select Time",
        "label": "Select Time",
        "group": "2227c2cd15473dbf",
        "order": 8,
        "width": 4,
        "height": 5,
        "options": [
            {
                "label": "From",
                "value": "startDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "To",
                "value": "endDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "Download Data",
                "value": "dataDownload1",
                "type": "switch",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "startDate": "",
            "endDate": "",
            "dataDownload1": false
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": false,
        "className": "",
        "x": 170,
        "y": 1480,
        "wires": [
            [
                "095a1ae08ec1140d"
            ]
        ]
    },
    {
        "id": "74b19042c3d582f7",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "c95b710f0ef9ba35",
        "name": "Humidity",
        "group": "2227c2cd15473dbf",
        "order": 10,
        "width": 7,
        "height": 6,
        "label": "Humidity (%)",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1100,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "279573798d1f7768",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "c95b710f0ef9ba35",
        "name": "Temperature",
        "group": "2227c2cd15473dbf",
        "order": 9,
        "width": 15,
        "height": 6,
        "label": "Temperature (°C)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1110,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "0a95d8c7778bc1ad",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "c95b710f0ef9ba35",
        "name": "Illuminance",
        "group": "2227c2cd15473dbf",
        "order": 12,
        "width": 13,
        "height": 6,
        "label": "Illuminance (lx)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1110,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "9c6dc8f57a553455",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "c95b710f0ef9ba35",
        "name": "UV Intensity",
        "group": "2227c2cd15473dbf",
        "order": 13,
        "width": 13,
        "height": 6,
        "label": "UV Intensity (µW⋅cm⁻²)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1110,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "2cd35d7dd0fab841",
        "type": "ui_text",
        "z": "bc70283693a5505d",
        "g": "c95b710f0ef9ba35",
        "group": "2227c2cd15473dbf",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "SENSEBOX-4",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "20",
        "color": "#0f22ae",
        "x": 1100,
        "y": 1220,
        "wires": []
    },
    {
        "id": "5d60d239aa85acc2",
        "type": "ui_button",
        "z": "bc70283693a5505d",
        "g": "af1ea1044f640237",
        "name": "",
        "group": "875b63263cbb26ab",
        "order": 11,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "red",
        "bgcolor": "white",
        "className": "",
        "icon": "fa-refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 170,
        "y": 1640,
        "wires": [
            [
                "39dc16886c52c3a3"
            ]
        ]
    },
    {
        "id": "b0e544a311df3473",
        "type": "ui_form",
        "z": "bc70283693a5505d",
        "g": "af1ea1044f640237",
        "name": "Select Time",
        "label": "Select Time",
        "group": "875b63263cbb26ab",
        "order": 8,
        "width": 4,
        "height": 5,
        "options": [
            {
                "label": "From",
                "value": "startDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "To",
                "value": "endDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "Data Download",
                "value": "dataDownload1",
                "type": "switch",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "startDate": "",
            "endDate": "",
            "dataDownload1": false
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": false,
        "className": "",
        "x": 170,
        "y": 1880,
        "wires": [
            [
                "137b5b4e82797e01"
            ]
        ]
    },
    {
        "id": "f65db1feef73dd2e",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "af1ea1044f640237",
        "name": "Humidity",
        "group": "875b63263cbb26ab",
        "order": 10,
        "width": 7,
        "height": 6,
        "label": "Humidity (%)",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1100,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "f05f78990a018a2c",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "af1ea1044f640237",
        "name": "Temperature",
        "group": "875b63263cbb26ab",
        "order": 9,
        "width": 15,
        "height": 6,
        "label": "Temperature (°C)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1110,
        "y": 1680,
        "wires": [
            []
        ]
    },
    {
        "id": "ae4a84b5e1ae9dfa",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "af1ea1044f640237",
        "name": "Illuminance",
        "group": "875b63263cbb26ab",
        "order": 12,
        "width": 13,
        "height": 6,
        "label": "Illuminance (lx)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1110,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "e919eb6c062e18d6",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "af1ea1044f640237",
        "name": "UV Intensity",
        "group": "875b63263cbb26ab",
        "order": 13,
        "width": 13,
        "height": 6,
        "label": "UV Intensity (µW⋅cm⁻²)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1110,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "2f286f0d2a063e1c",
        "type": "ui_text",
        "z": "bc70283693a5505d",
        "g": "af1ea1044f640237",
        "group": "875b63263cbb26ab",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "SENSEBOX-6",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "20",
        "color": "#0f22ae",
        "x": 1120,
        "y": 1620,
        "wires": []
    },
    {
        "id": "719a09cd5e971b30",
        "type": "ui_button",
        "z": "bc70283693a5505d",
        "g": "3a9c1833b4c05e0a",
        "name": "",
        "group": "2f8d4cbc385125d3",
        "order": 11,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "red",
        "bgcolor": "white",
        "className": "",
        "icon": "fa-refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 170,
        "y": 2040,
        "wires": [
            [
                "d9860eca5db39148"
            ]
        ]
    },
    {
        "id": "2e7cf8e7d19c94a6",
        "type": "ui_form",
        "z": "bc70283693a5505d",
        "g": "3a9c1833b4c05e0a",
        "name": "Select Time",
        "label": "Select Time",
        "group": "2f8d4cbc385125d3",
        "order": 8,
        "width": 4,
        "height": 5,
        "options": [
            {
                "label": "From",
                "value": "startDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "To",
                "value": "endDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "Download Data",
                "value": "dataDownload1",
                "type": "switch",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "startDate": "",
            "endDate": "",
            "dataDownload1": false
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": false,
        "className": "",
        "x": 170,
        "y": 2280,
        "wires": [
            [
                "c0ba90ae9869a099"
            ]
        ]
    },
    {
        "id": "6b5f692ee5606eec",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "3a9c1833b4c05e0a",
        "name": "Humidity",
        "group": "2f8d4cbc385125d3",
        "order": 10,
        "width": 7,
        "height": 6,
        "label": "Humidity (%)",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1100,
        "y": 2140,
        "wires": [
            []
        ]
    },
    {
        "id": "8d88ac2e170a2a75",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "3a9c1833b4c05e0a",
        "name": "Temperature",
        "group": "2f8d4cbc385125d3",
        "order": 9,
        "width": 15,
        "height": 6,
        "label": "Temperature (°C)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1110,
        "y": 2080,
        "wires": [
            []
        ]
    },
    {
        "id": "9d1f13ee2846f197",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "3a9c1833b4c05e0a",
        "name": "Illuminance",
        "group": "2f8d4cbc385125d3",
        "order": 12,
        "width": 13,
        "height": 6,
        "label": "Illuminance (lx)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1110,
        "y": 2200,
        "wires": [
            []
        ]
    },
    {
        "id": "7ec0090c6fabb488",
        "type": "ui_chart",
        "z": "bc70283693a5505d",
        "g": "3a9c1833b4c05e0a",
        "name": "UV Intensity",
        "group": "2f8d4cbc385125d3",
        "order": 13,
        "width": 13,
        "height": 6,
        "label": "UV Intensity (µW⋅cm⁻²)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1110,
        "y": 2260,
        "wires": [
            []
        ]
    },
    {
        "id": "9c0d310434edc650",
        "type": "ui_text",
        "z": "bc70283693a5505d",
        "g": "3a9c1833b4c05e0a",
        "group": "2f8d4cbc385125d3",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "SENSEBOX-7",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "20",
        "color": "#0f22ae",
        "x": 1120,
        "y": 2020,
        "wires": []
    },
    {
        "id": "292f64cdccfa2def",
        "type": "function",
        "z": "bc70283693a5505d",
        "name": "Data Download",
        "func": "var results = msg.payload;\nvar dataDownload = msg.dataDownload;\n\nvar processedData = [];\n\nif (dataDownload) {\n    for (var i = 0; i < results.length; i++) {\n        processedData.push({\n            device_id: results[i].device_id,\n            time: results[i].timestamp,\n            temperature: parseFloat(results[i].data.temperature).toFixed(2),\n            temperature_max: parseFloat(results[i].data.temperature_max).toFixed(2),\n            temperature_min: parseFloat(results[i].data.temperature_min).toFixed(2),\n            temperature_box: parseFloat(results[i].data.temperature_box).toFixed(2),\n            humidity: parseFloat(results[i].data.humidity).toFixed(2),\n            lux: results[i].data.lux,\n            lux_max: results[i].data.lux_max,\n            lux_min: results[i].data.lux_min,\n            pressure: results[i].data.pressure,\n            uv: results[i].data.uv,\n            uv_max: results[i].data.uv_max,\n            uv_min: results[i].data.uv_min, // corrected from un_min\n            fan_active: results[i].data.fan_active\n        });\n    }\n}\n\nmsg.payload = processedData;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 940,
        "wires": [
            [
                "7c260b800203348b"
            ]
        ]
    },
    {
        "id": "7c260b800203348b",
        "type": "csv",
        "z": "bc70283693a5505d",
        "name": "",
        "spec": "rfc",
        "sep": ",",
        "hdrin": "",
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": true,
        "include_null_values": true,
        "x": 1830,
        "y": 940,
        "wires": [
            [
                "8b8f5f47134acc99"
            ]
        ]
    },
    {
        "id": "8b8f5f47134acc99",
        "type": "function",
        "z": "bc70283693a5505d",
        "name": "File Path",
        "func": "msg.path = '.node-red/data/static_files/temp_sensor.csv';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2000,
        "y": 940,
        "wires": [
            [
                "3864f32916e4756b"
            ]
        ]
    },
    {
        "id": "3864f32916e4756b",
        "type": "file",
        "z": "bc70283693a5505d",
        "name": "",
        "filename": "path",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 2180,
        "y": 940,
        "wires": [
            [
                "504c4ecd63527cc6"
            ]
        ]
    },
    {
        "id": "504c4ecd63527cc6",
        "type": "trigger",
        "z": "bc70283693a5505d",
        "name": "",
        "op1": "open",
        "op2": "reset",
        "op1type": "str",
        "op2type": "str",
        "duration": "500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2380,
        "y": 940,
        "wires": [
            [
                "d59d665334aefe8c"
            ]
        ]
    },
    {
        "id": "d59d665334aefe8c",
        "type": "ui_template",
        "z": "bc70283693a5505d",
        "group": "d6de265f36f661c0",
        "name": "",
        "order": 13,
        "width": 0,
        "height": 0,
        "format": "<script>\n    (function(scope) {\n        scope.$watch('msg', function(msg) {\n            if (msg.payload == \"open\") {\n                window.open(\"http://78.46.151.191:1880/temp_sensor\",\"_blank\");\n                \n            }\n        })\n    })(scope);\n\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2580,
        "y": 940,
        "wires": [
            [
                "2292a91b9f12ab8c"
            ]
        ]
    },
    {
        "id": "2292a91b9f12ab8c",
        "type": "debug",
        "z": "bc70283693a5505d",
        "name": "debug 30",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2740,
        "y": 940,
        "wires": []
    },
    {
        "id": "dc6dd140bfd85511",
        "type": "http in",
        "z": "bc70283693a5505d",
        "name": "",
        "url": "temp_sensor",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1470,
        "y": 1340,
        "wires": [
            [
                "8f54daf7315ba40b"
            ]
        ]
    },
    {
        "id": "8f54daf7315ba40b",
        "type": "file in",
        "z": "bc70283693a5505d",
        "name": "",
        "filename": ".node-red/data/static_files/temp_sensor.csv",
        "filenameType": "str",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1810,
        "y": 1340,
        "wires": [
            [
                "c1f9725b472cf664"
            ]
        ]
    },
    {
        "id": "c1f9725b472cf664",
        "type": "http response",
        "z": "bc70283693a5505d",
        "name": "",
        "statusCode": "",
        "headers": {
            "Content-Disposition": "attachment; filename=\"Temperature_sensor_data.csv\"",
            "Content-Type": "text/csv"
        },
        "x": 2070,
        "y": 1340,
        "wires": []
    },
    {
        "id": "307eecbf901e1e7a",
        "type": "switch",
        "z": "bc70283693a5505d",
        "name": "",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "normal",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "seperate",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1430,
        "y": 1040,
        "wires": [
            [
                "292f64cdccfa2def"
            ],
            [
                "af6d5f795bc79edf"
            ]
        ]
    },
    {
        "id": "af6d5f795bc79edf",
        "type": "switch",
        "z": "bc70283693a5505d",
        "name": "",
        "property": "device_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "sensebox-01",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sensebox-02",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sensebox-03",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sensebox-04",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sensebox-06",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sensebox-07",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 1590,
        "y": 1160,
        "wires": [
            [
                "fa80fd69ae9f3d8e"
            ],
            [
                "6dc0fbb8755c53ce"
            ],
            [
                "e7c3d8a45b5fb2d1"
            ],
            [
                "1547f8316d4f354b"
            ],
            [
                "9d83564090243150"
            ],
            [
                "34def32c79a2dab1"
            ]
        ]
    },
    {
        "id": "fa80fd69ae9f3d8e",
        "type": "function",
        "z": "bc70283693a5505d",
        "name": "Data Download",
        "func": "var results = msg.payload;\nvar dataDownload = msg.dataDownload;\n\nvar processedData = [];\n\nif (dataDownload) {\n    for (var i = 0; i < results.length; i++) {\n        processedData.push({\n            device_id: results[i].device_id,\n            time: results[i].timestamp,\n            temperature: parseFloat(results[i].data.temperature).toFixed(2),\n            temperature_max: parseFloat(results[i].data.temperature_max).toFixed(2),\n            temperature_min: parseFloat(results[i].data.temperature_min).toFixed(2),\n            temperature_box: parseFloat(results[i].data.temperature_box).toFixed(2),\n            humidity: parseFloat(results[i].data.humidity).toFixed(2),\n            lux: results[i].data.lux,\n            lux_max: results[i].data.lux_max,\n            lux_min: results[i].data.lux_min,\n            pressure: results[i].data.pressure,\n            uv: results[i].data.uv,\n            uv_max: results[i].data.uv_max,\n            uv_min: results[i].data.uv_min, // corrected from un_min\n            fan_active: results[i].data.fan_active\n        });\n    }\n}\n\nmsg.payload = processedData;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1820,
        "y": 1060,
        "wires": [
            [
                "b487fc390a691f2a"
            ]
        ]
    },
    {
        "id": "b487fc390a691f2a",
        "type": "csv",
        "z": "bc70283693a5505d",
        "name": "",
        "spec": "rfc",
        "sep": ",",
        "hdrin": "",
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": true,
        "include_null_values": true,
        "x": 2010,
        "y": 1060,
        "wires": [
            [
                "4588eafdaa14aee4"
            ]
        ]
    },
    {
        "id": "4588eafdaa14aee4",
        "type": "function",
        "z": "bc70283693a5505d",
        "name": "File Path",
        "func": "msg.path = '.node-red/data/static_files/temp_sensor.csv';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2180,
        "y": 1060,
        "wires": [
            [
                "70e94182dfd340ab"
            ]
        ]
    },
    {
        "id": "70e94182dfd340ab",
        "type": "file",
        "z": "bc70283693a5505d",
        "name": "",
        "filename": "path",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 2360,
        "y": 1060,
        "wires": [
            [
                "5fdc1556c106464f"
            ]
        ]
    },
    {
        "id": "5fdc1556c106464f",
        "type": "trigger",
        "z": "bc70283693a5505d",
        "name": "",
        "op1": "open",
        "op2": "reset",
        "op1type": "str",
        "op2type": "str",
        "duration": "500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2560,
        "y": 1060,
        "wires": [
            [
                "385043f74690af39"
            ]
        ]
    },
    {
        "id": "385043f74690af39",
        "type": "ui_template",
        "z": "bc70283693a5505d",
        "group": "a5281de7acfee762",
        "name": "",
        "order": 13,
        "width": 0,
        "height": 0,
        "format": "<script>\n    (function(scope) {\n        scope.$watch('msg', function(msg) {\n            if (msg.payload == \"open\") {\n                window.open(\"http://78.46.151.191:1880/temp_sensor\",\"_blank\");\n                \n            }\n        })\n    })(scope);\n\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2760,
        "y": 1060,
        "wires": [
            [
                "2f49c6be65498288"
            ]
        ]
    },
    {
        "id": "2f49c6be65498288",
        "type": "debug",
        "z": "bc70283693a5505d",
        "name": "debug 36",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2920,
        "y": 1060,
        "wires": []
    },
    {
        "id": "6dc0fbb8755c53ce",
        "type": "function",
        "z": "bc70283693a5505d",
        "name": "Data Download",
        "func": "var results = msg.payload;\nvar dataDownload = msg.dataDownload;\n\nvar processedData = [];\n\nif (dataDownload) {\n    for (var i = 0; i < results.length; i++) {\n        processedData.push({\n            device_id: results[i].device_id,\n            time: results[i].timestamp,\n            temperature: parseFloat(results[i].data.temperature).toFixed(2),\n            temperature_max: parseFloat(results[i].data.temperature_max).toFixed(2),\n            temperature_min: parseFloat(results[i].data.temperature_min).toFixed(2),\n            temperature_box: parseFloat(results[i].data.temperature_box).toFixed(2),\n            humidity: parseFloat(results[i].data.humidity).toFixed(2),\n            lux: results[i].data.lux,\n            lux_max: results[i].data.lux_max,\n            lux_min: results[i].data.lux_min,\n            pressure: results[i].data.pressure,\n            uv: results[i].data.uv,\n            uv_max: results[i].data.uv_max,\n            uv_min: results[i].data.uv_min, // corrected from un_min\n            fan_active: results[i].data.fan_active\n        });\n    }\n}\n\nmsg.payload = processedData;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1820,
        "y": 1100,
        "wires": [
            [
                "828cb4ea2ecdae0e"
            ]
        ]
    },
    {
        "id": "828cb4ea2ecdae0e",
        "type": "csv",
        "z": "bc70283693a5505d",
        "name": "",
        "spec": "rfc",
        "sep": ",",
        "hdrin": "",
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": true,
        "include_null_values": true,
        "x": 2010,
        "y": 1100,
        "wires": [
            [
                "0bb20ceb3398323b"
            ]
        ]
    },
    {
        "id": "0bb20ceb3398323b",
        "type": "function",
        "z": "bc70283693a5505d",
        "name": "File Path",
        "func": "msg.path = '.node-red/data/static_files/temp_sensor.csv';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2180,
        "y": 1100,
        "wires": [
            [
                "8f6db71c1505a80b"
            ]
        ]
    },
    {
        "id": "8f6db71c1505a80b",
        "type": "file",
        "z": "bc70283693a5505d",
        "name": "",
        "filename": "path",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 2360,
        "y": 1100,
        "wires": [
            [
                "2d7ca3d0f05e5505"
            ]
        ]
    },
    {
        "id": "2d7ca3d0f05e5505",
        "type": "trigger",
        "z": "bc70283693a5505d",
        "name": "",
        "op1": "open",
        "op2": "reset",
        "op1type": "str",
        "op2type": "str",
        "duration": "500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2560,
        "y": 1100,
        "wires": [
            [
                "8f4fed59d63e8b7d"
            ]
        ]
    },
    {
        "id": "8f4fed59d63e8b7d",
        "type": "ui_template",
        "z": "bc70283693a5505d",
        "group": "f22c80946683f6a8",
        "name": "",
        "order": 13,
        "width": 0,
        "height": 0,
        "format": "<script>\n    (function(scope) {\n        scope.$watch('msg', function(msg) {\n            if (msg.payload == \"open\") {\n                window.open(\"http://78.46.151.191:1880/temp_sensor\",\"_blank\");\n                \n            }\n        })\n    })(scope);\n\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2760,
        "y": 1100,
        "wires": [
            [
                "b99ba0c45bd919ab"
            ]
        ]
    },
    {
        "id": "b99ba0c45bd919ab",
        "type": "debug",
        "z": "bc70283693a5505d",
        "name": "debug 37",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2920,
        "y": 1100,
        "wires": []
    },
    {
        "id": "e7c3d8a45b5fb2d1",
        "type": "function",
        "z": "bc70283693a5505d",
        "name": "Data Download",
        "func": "var results = msg.payload;\nvar dataDownload = msg.dataDownload;\n\nvar processedData = [];\n\nif (dataDownload) {\n    for (var i = 0; i < results.length; i++) {\n        processedData.push({\n            device_id: results[i].device_id,\n            time: results[i].timestamp,\n            temperature: parseFloat(results[i].data.temperature).toFixed(2),\n            temperature_max: parseFloat(results[i].data.temperature_max).toFixed(2),\n            temperature_min: parseFloat(results[i].data.temperature_min).toFixed(2),\n            temperature_box: parseFloat(results[i].data.temperature_box).toFixed(2),\n            humidity: parseFloat(results[i].data.humidity).toFixed(2),\n            lux: results[i].data.lux,\n            lux_max: results[i].data.lux_max,\n            lux_min: results[i].data.lux_min,\n            pressure: results[i].data.pressure,\n            uv: results[i].data.uv,\n            uv_max: results[i].data.uv_max,\n            uv_min: results[i].data.uv_min, // corrected from un_min\n            fan_active: results[i].data.fan_active\n        });\n    }\n}\n\nmsg.payload = processedData;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1820,
        "y": 1140,
        "wires": [
            [
                "6e7a3aed275988f8"
            ]
        ]
    },
    {
        "id": "6e7a3aed275988f8",
        "type": "csv",
        "z": "bc70283693a5505d",
        "name": "",
        "spec": "rfc",
        "sep": ",",
        "hdrin": "",
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": true,
        "include_null_values": true,
        "x": 2010,
        "y": 1140,
        "wires": [
            [
                "fd1db3049cebd30a"
            ]
        ]
    },
    {
        "id": "fd1db3049cebd30a",
        "type": "function",
        "z": "bc70283693a5505d",
        "name": "File Path",
        "func": "msg.path = '.node-red/data/static_files/temp_sensor.csv';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2180,
        "y": 1140,
        "wires": [
            [
                "cc1318df68ba6c9b"
            ]
        ]
    },
    {
        "id": "cc1318df68ba6c9b",
        "type": "file",
        "z": "bc70283693a5505d",
        "name": "",
        "filename": "path",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 2360,
        "y": 1140,
        "wires": [
            [
                "d775106028eaa491"
            ]
        ]
    },
    {
        "id": "d775106028eaa491",
        "type": "trigger",
        "z": "bc70283693a5505d",
        "name": "",
        "op1": "open",
        "op2": "reset",
        "op1type": "str",
        "op2type": "str",
        "duration": "500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2560,
        "y": 1140,
        "wires": [
            [
                "e147988980ff8557"
            ]
        ]
    },
    {
        "id": "e147988980ff8557",
        "type": "ui_template",
        "z": "bc70283693a5505d",
        "group": "894ffb0a4bc5684d",
        "name": "",
        "order": 13,
        "width": 0,
        "height": 0,
        "format": "<script>\n    (function(scope) {\n        scope.$watch('msg', function(msg) {\n            if (msg.payload == \"open\") {\n                window.open(\"http://78.46.151.191:1880/temp_sensor\",\"_blank\");\n                \n            }\n        })\n    })(scope);\n\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2760,
        "y": 1140,
        "wires": [
            [
                "72d878491277c5ea"
            ]
        ]
    },
    {
        "id": "72d878491277c5ea",
        "type": "debug",
        "z": "bc70283693a5505d",
        "name": "debug 38",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2920,
        "y": 1140,
        "wires": []
    },
    {
        "id": "1547f8316d4f354b",
        "type": "function",
        "z": "bc70283693a5505d",
        "name": "Data Download",
        "func": "var results = msg.payload;\nvar dataDownload = msg.dataDownload;\n\nvar processedData = [];\n\nif (dataDownload) {\n    for (var i = 0; i < results.length; i++) {\n        processedData.push({\n            device_id: results[i].device_id,\n            time: results[i].timestamp,\n            temperature: parseFloat(results[i].data.temperature).toFixed(2),\n            temperature_max: parseFloat(results[i].data.temperature_max).toFixed(2),\n            temperature_min: parseFloat(results[i].data.temperature_min).toFixed(2),\n            temperature_box: parseFloat(results[i].data.temperature_box).toFixed(2),\n            humidity: parseFloat(results[i].data.humidity).toFixed(2),\n            lux: results[i].data.lux,\n            lux_max: results[i].data.lux_max,\n            lux_min: results[i].data.lux_min,\n            pressure: results[i].data.pressure,\n            uv: results[i].data.uv,\n            uv_max: results[i].data.uv_max,\n            uv_min: results[i].data.uv_min, // corrected from un_min\n            fan_active: results[i].data.fan_active\n        });\n    }\n}\n\nmsg.payload = processedData;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1820,
        "y": 1180,
        "wires": [
            [
                "58d7c17a581218fe"
            ]
        ]
    },
    {
        "id": "58d7c17a581218fe",
        "type": "csv",
        "z": "bc70283693a5505d",
        "name": "",
        "spec": "rfc",
        "sep": ",",
        "hdrin": "",
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": true,
        "include_null_values": true,
        "x": 2010,
        "y": 1180,
        "wires": [
            [
                "bc81703b5a1999c7"
            ]
        ]
    },
    {
        "id": "bc81703b5a1999c7",
        "type": "function",
        "z": "bc70283693a5505d",
        "name": "File Path",
        "func": "msg.path = '.node-red/data/static_files/temp_sensor.csv';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2180,
        "y": 1180,
        "wires": [
            [
                "808d24e8f7f20476"
            ]
        ]
    },
    {
        "id": "808d24e8f7f20476",
        "type": "file",
        "z": "bc70283693a5505d",
        "name": "",
        "filename": "path",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 2360,
        "y": 1180,
        "wires": [
            [
                "a4eb2beb1c0ea5d5"
            ]
        ]
    },
    {
        "id": "a4eb2beb1c0ea5d5",
        "type": "trigger",
        "z": "bc70283693a5505d",
        "name": "",
        "op1": "open",
        "op2": "reset",
        "op1type": "str",
        "op2type": "str",
        "duration": "500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2560,
        "y": 1180,
        "wires": [
            [
                "52ee00a1dc70b1b0"
            ]
        ]
    },
    {
        "id": "52ee00a1dc70b1b0",
        "type": "ui_template",
        "z": "bc70283693a5505d",
        "group": "2227c2cd15473dbf",
        "name": "",
        "order": 13,
        "width": 0,
        "height": 0,
        "format": "<script>\n    (function(scope) {\n        scope.$watch('msg', function(msg) {\n            if (msg.payload == \"open\") {\n                window.open(\"http://78.46.151.191:1880/temp_sensor\",\"_blank\");\n                \n            }\n        })\n    })(scope);\n\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2760,
        "y": 1180,
        "wires": [
            [
                "dd3121a66364960a"
            ]
        ]
    },
    {
        "id": "dd3121a66364960a",
        "type": "debug",
        "z": "bc70283693a5505d",
        "name": "debug 39",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2920,
        "y": 1180,
        "wires": []
    },
    {
        "id": "9d83564090243150",
        "type": "function",
        "z": "bc70283693a5505d",
        "name": "Data Download",
        "func": "var results = msg.payload;\nvar dataDownload = msg.dataDownload;\n\nvar processedData = [];\n\nif (dataDownload) {\n    for (var i = 0; i < results.length; i++) {\n        processedData.push({\n            device_id: results[i].device_id,\n            time: results[i].timestamp,\n            temperature: parseFloat(results[i].data.temperature).toFixed(2),\n            temperature_max: parseFloat(results[i].data.temperature_max).toFixed(2),\n            temperature_min: parseFloat(results[i].data.temperature_min).toFixed(2),\n            temperature_box: parseFloat(results[i].data.temperature_box).toFixed(2),\n            humidity: parseFloat(results[i].data.humidity).toFixed(2),\n            lux: results[i].data.lux,\n            lux_max: results[i].data.lux_max,\n            lux_min: results[i].data.lux_min,\n            pressure: results[i].data.pressure,\n            uv: results[i].data.uv,\n            uv_max: results[i].data.uv_max,\n            uv_min: results[i].data.uv_min, // corrected from un_min\n            fan_active: results[i].data.fan_active\n        });\n    }\n}\n\nmsg.payload = processedData;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1820,
        "y": 1220,
        "wires": [
            [
                "3b69d5898380cc53"
            ]
        ]
    },
    {
        "id": "3b69d5898380cc53",
        "type": "csv",
        "z": "bc70283693a5505d",
        "name": "",
        "spec": "rfc",
        "sep": ",",
        "hdrin": "",
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": true,
        "include_null_values": true,
        "x": 2010,
        "y": 1220,
        "wires": [
            [
                "f5570548a189a78f"
            ]
        ]
    },
    {
        "id": "f5570548a189a78f",
        "type": "function",
        "z": "bc70283693a5505d",
        "name": "File Path",
        "func": "msg.path = '.node-red/data/static_files/temp_sensor.csv';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2180,
        "y": 1220,
        "wires": [
            [
                "150e3f9d50f8eeef"
            ]
        ]
    },
    {
        "id": "150e3f9d50f8eeef",
        "type": "file",
        "z": "bc70283693a5505d",
        "name": "",
        "filename": "path",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 2360,
        "y": 1220,
        "wires": [
            [
                "89d967fd6241117c"
            ]
        ]
    },
    {
        "id": "89d967fd6241117c",
        "type": "trigger",
        "z": "bc70283693a5505d",
        "name": "",
        "op1": "open",
        "op2": "reset",
        "op1type": "str",
        "op2type": "str",
        "duration": "500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2560,
        "y": 1220,
        "wires": [
            [
                "bff1f4ab1a590d8f"
            ]
        ]
    },
    {
        "id": "bff1f4ab1a590d8f",
        "type": "ui_template",
        "z": "bc70283693a5505d",
        "group": "875b63263cbb26ab",
        "name": "",
        "order": 13,
        "width": 0,
        "height": 0,
        "format": "<script>\n    (function(scope) {\n        scope.$watch('msg', function(msg) {\n            if (msg.payload == \"open\") {\n                window.open(\"http://78.46.151.191:1880/temp_sensor\",\"_blank\");\n                \n            }\n        })\n    })(scope);\n\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2760,
        "y": 1220,
        "wires": [
            [
                "8ff4d76f17bf6812"
            ]
        ]
    },
    {
        "id": "8ff4d76f17bf6812",
        "type": "debug",
        "z": "bc70283693a5505d",
        "name": "debug 40",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2920,
        "y": 1220,
        "wires": []
    },
    {
        "id": "34def32c79a2dab1",
        "type": "function",
        "z": "bc70283693a5505d",
        "name": "Data Download",
        "func": "var results = msg.payload;\nvar dataDownload = msg.dataDownload;\n\nvar processedData = [];\n\nif (dataDownload) {\n    for (var i = 0; i < results.length; i++) {\n        processedData.push({\n            device_id: results[i].device_id,\n            time: results[i].timestamp,\n            temperature: parseFloat(results[i].data.temperature).toFixed(2),\n            temperature_max: parseFloat(results[i].data.temperature_max).toFixed(2),\n            temperature_min: parseFloat(results[i].data.temperature_min).toFixed(2),\n            temperature_box: parseFloat(results[i].data.temperature_box).toFixed(2),\n            humidity: parseFloat(results[i].data.humidity).toFixed(2),\n            lux: results[i].data.lux,\n            lux_max: results[i].data.lux_max,\n            lux_min: results[i].data.lux_min,\n            pressure: results[i].data.pressure,\n            uv: results[i].data.uv,\n            uv_max: results[i].data.uv_max,\n            uv_min: results[i].data.uv_min, // corrected from un_min\n            fan_active: results[i].data.fan_active\n        });\n    }\n}\n\nmsg.payload = processedData;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1820,
        "y": 1260,
        "wires": [
            [
                "9b7442ee6363bfd8"
            ]
        ]
    },
    {
        "id": "9b7442ee6363bfd8",
        "type": "csv",
        "z": "bc70283693a5505d",
        "name": "",
        "spec": "rfc",
        "sep": ",",
        "hdrin": "",
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": true,
        "include_null_values": true,
        "x": 2010,
        "y": 1260,
        "wires": [
            [
                "d71d796a9ec39307"
            ]
        ]
    },
    {
        "id": "d71d796a9ec39307",
        "type": "function",
        "z": "bc70283693a5505d",
        "name": "File Path",
        "func": "msg.path = '.node-red/data/static_files/temp_sensor.csv';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2180,
        "y": 1260,
        "wires": [
            [
                "9599cf0f84b638a8"
            ]
        ]
    },
    {
        "id": "9599cf0f84b638a8",
        "type": "file",
        "z": "bc70283693a5505d",
        "name": "",
        "filename": "path",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 2360,
        "y": 1260,
        "wires": [
            [
                "d382205ad5b406fb"
            ]
        ]
    },
    {
        "id": "d382205ad5b406fb",
        "type": "trigger",
        "z": "bc70283693a5505d",
        "name": "",
        "op1": "open",
        "op2": "reset",
        "op1type": "str",
        "op2type": "str",
        "duration": "500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2560,
        "y": 1260,
        "wires": [
            [
                "068d213a065dcf6a"
            ]
        ]
    },
    {
        "id": "068d213a065dcf6a",
        "type": "ui_template",
        "z": "bc70283693a5505d",
        "group": "2f8d4cbc385125d3",
        "name": "",
        "order": 13,
        "width": 0,
        "height": 0,
        "format": "<script>\n    (function(scope) {\n        scope.$watch('msg', function(msg) {\n            if (msg.payload == \"open\") {\n                window.open(\"http://78.46.151.191:1880/temp_sensor\",\"_blank\");\n                \n            }\n        })\n    })(scope);\n\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2760,
        "y": 1260,
        "wires": [
            [
                "7774fa0f0072663c"
            ]
        ]
    },
    {
        "id": "7774fa0f0072663c",
        "type": "debug",
        "z": "bc70283693a5505d",
        "name": "debug 41",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2920,
        "y": 1260,
        "wires": []
    },
    {
        "id": "e00f0f19ae85430c",
        "type": "mongodb4",
        "z": "1c38872debedfd03",
        "g": "13194d74ba141af5",
        "clientNode": "6c246c6eea0c6943",
        "mode": "collection",
        "collection": "soil_sensor",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 530,
        "y": 240,
        "wires": [
            [
                "e96480476f6148e8",
                "8ab508fd187a76a7",
                "9364fc7a7b95f8fa",
                "1fff0d4839d3733f",
                "6d78a181feba120c"
            ]
        ]
    },
    {
        "id": "dbedad5f2aa1c47f",
        "type": "inject",
        "z": "1c38872debedfd03",
        "g": "13194d74ba141af5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 190,
        "y": 240,
        "wires": [
            [
                "18b7c18450f89d38"
            ]
        ]
    },
    {
        "id": "18b7c18450f89d38",
        "type": "function",
        "z": "1c38872debedfd03",
        "g": "13194d74ba141af5",
        "name": "1 Day Data",
        "func": "// Get the current date and time\nvar endDate = new Date();\n\n// Calculate the date 1 day before the current date\nvar startDate = new Date();\nstartDate.setDate(endDate.getDate() - 1);\n\n// Create the query object\nmsg.payload = {\n    \"timestamp\": {\n        \"$gte\": startDate,\n        \"$lte\": endDate\n    },\n    \"device_id\": \"eui-a840412881881c6a\"\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 240,
        "wires": [
            [
                "e00f0f19ae85430c"
            ]
        ]
    },
    {
        "id": "e96480476f6148e8",
        "type": "function",
        "z": "1c38872debedfd03",
        "g": "13194d74ba141af5",
        "name": "Temperature",
        "func": "var results = msg.payload; \nvar temperature_data = [];\n\nfor (var i = 0; i < results.length; i++) {\n\n    var temp = parseFloat(results[i].data.temp_soil).toFixed(2);\n\n    temperature_data.push({\n        \"x\": results[i].timestamp,\n        \"y\": parseFloat(temp)\n    })\n}\n\nmsg.payload = [{\n    \"series\": [\"Temperature of Soil\"],\n    \"data\": [\n        temperature_data\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 160,
        "wires": [
            [
                "9b79e33ddd96600c",
                "24a63a3a845b9b18"
            ]
        ]
    },
    {
        "id": "c2fb4250887a3bcf",
        "type": "ui_form",
        "z": "1c38872debedfd03",
        "g": "13194d74ba141af5",
        "name": "Select Time",
        "label": "Select Time",
        "group": "b0ba5a219f0523bb",
        "order": 7,
        "width": 4,
        "height": 5,
        "options": [
            {
                "label": "From",
                "value": "startDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "To",
                "value": "endDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "Download Data",
                "value": "dataDownload",
                "type": "switch",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "startDate": "",
            "endDate": "",
            "dataDownload": false
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": false,
        "className": "",
        "x": 190,
        "y": 320,
        "wires": [
            [
                "f186890926bb32cf"
            ]
        ]
    },
    {
        "id": "f186890926bb32cf",
        "type": "function",
        "z": "1c38872debedfd03",
        "g": "13194d74ba141af5",
        "name": "User Request",
        "func": "var endDate = new Date(msg.payload.endDate);\nvar startDate = new Date(msg.payload.startDate);\n\nif (msg.payload.dataDownload) {\n    var dataDownload = msg.payload.dataDownload;\n    msg.action = 'normal';\n}\n\nif (msg.payload.dataDownload1) {\n    var dataDownload = msg.payload.dataDownload1;\n    msg.action = 'seperate';\n}\n\nmsg.payload = {\n    \"timestamp\": {\n        \"$gte\": startDate,\n        \"$lte\": endDate\n    },\n    \"device_id\": \"eui-a840412881881c6a\"\n};\n\nmsg.dataDownload = dataDownload;\nmsg.device_id = \"device1\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 320,
        "wires": [
            [
                "e00f0f19ae85430c"
            ]
        ]
    },
    {
        "id": "8ab508fd187a76a7",
        "type": "function",
        "z": "1c38872debedfd03",
        "g": "13194d74ba141af5",
        "name": "Water",
        "func": "var results = msg.payload;\nvar water_data = [];\n\nfor (var i = 0; i < results.length; i++) {\n\n    var temp = parseFloat(results[i].data.water_soil).toFixed(2);\n\n    water_data.push({\n        \"x\": results[i].timestamp,\n        \"y\": parseFloat(temp)\n    })\n}\n\nmsg.payload = [{\n    \"series\": [\"Water in Soil\"],\n    \"data\": [\n        water_data\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 220,
        "wires": [
            [
                "ea75f5e8a67fd999",
                "d787a026ead01c66"
            ]
        ]
    },
    {
        "id": "da735ea34c15aae7",
        "type": "ui_button",
        "z": "1c38872debedfd03",
        "g": "13194d74ba141af5",
        "name": "",
        "group": "b0ba5a219f0523bb",
        "order": 10,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "red",
        "bgcolor": "white",
        "className": "",
        "icon": "fa-refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 190,
        "y": 160,
        "wires": [
            [
                "18b7c18450f89d38"
            ]
        ]
    },
    {
        "id": "9364fc7a7b95f8fa",
        "type": "function",
        "z": "1c38872debedfd03",
        "g": "13194d74ba141af5",
        "name": "Conductivity",
        "func": "var results = msg.payload;\nvar conduct_soil = [];\n\nfor (var i = 0; i < results.length; i++) {\n\n    var temp = parseFloat(results[i].data.conduct_soil).toFixed(2);\n\n    conduct_soil.push({\n        \"x\": results[i].timestamp,\n        \"y\": parseFloat(temp)\n    })\n}\n\nmsg.payload = [{\n    \"series\": [\"Water in Soil\"],\n    \"data\": [\n        conduct_soil\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 280,
        "wires": [
            [
                "616cdaebb11b70c2",
                "62edc8a7a73d5ac5"
            ]
        ]
    },
    {
        "id": "1fff0d4839d3733f",
        "type": "function",
        "z": "1c38872debedfd03",
        "g": "13194d74ba141af5",
        "name": "Battery Voltage",
        "func": "var results = msg.payload;\nvar battery_voltage = [];\n\nfor (var i = 0; i < results.length; i++) {\n\n    var temp = parseFloat(results[i].data.battery_voltage).toFixed(2);\n\n    battery_voltage.push({\n        \"x\": results[i].timestamp,\n        \"y\": parseFloat(temp)\n    })\n}\n\nmsg.payload = [{\n    \"series\": [\"Water in Soil\"],\n    \"data\": [\n        battery_voltage\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 340,
        "wires": [
            [
                "0b79eb54d4357784",
                "7ca135f2c347d9c2"
            ]
        ]
    },
    {
        "id": "9b79e33ddd96600c",
        "type": "ui_chart",
        "z": "1c38872debedfd03",
        "g": "13194d74ba141af5",
        "name": "Temperature of Soil",
        "group": "b0ba5a219f0523bb",
        "order": 8,
        "width": 11,
        "height": 6,
        "label": "Temperature of Soil (°C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 950,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "ea75f5e8a67fd999",
        "type": "ui_chart",
        "z": "1c38872debedfd03",
        "g": "13194d74ba141af5",
        "name": "Water in Soil",
        "group": "b0ba5a219f0523bb",
        "order": 9,
        "width": 11,
        "height": 6,
        "label": "Water in Soil",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 930,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "616cdaebb11b70c2",
        "type": "ui_chart",
        "z": "1c38872debedfd03",
        "g": "13194d74ba141af5",
        "name": "Conductivity of Soil",
        "group": "b0ba5a219f0523bb",
        "order": 11,
        "width": 13,
        "height": 6,
        "label": "Conductivity of Soil",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "2",
        "removeOlderPoints": "500",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 950,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "0b79eb54d4357784",
        "type": "ui_chart",
        "z": "1c38872debedfd03",
        "g": "13194d74ba141af5",
        "name": "Battery Voltage",
        "group": "b0ba5a219f0523bb",
        "order": 12,
        "width": 13,
        "height": 6,
        "label": "Battery Voltage (volt)",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 940,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "a0c409a0e98d077d",
        "type": "ui_text",
        "z": "1c38872debedfd03",
        "g": "13194d74ba141af5",
        "group": "b0ba5a219f0523bb",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Device 1",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "20",
        "color": "#0f22ae",
        "x": 540,
        "y": 100,
        "wires": []
    },
    {
        "id": "f32fdd924cba25ea",
        "type": "mongodb4",
        "z": "1c38872debedfd03",
        "g": "220f83ebf102e7bf",
        "clientNode": "6c246c6eea0c6943",
        "mode": "collection",
        "collection": "soil_sensor",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 530,
        "y": 600,
        "wires": [
            [
                "c5603f384540afdf",
                "0afbf0b606022e64",
                "9aeb3026fd8cb2c8",
                "7068949c7b8f75cf",
                "6d78a181feba120c"
            ]
        ]
    },
    {
        "id": "ef5cc9004f0d11c0",
        "type": "inject",
        "z": "1c38872debedfd03",
        "g": "220f83ebf102e7bf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 190,
        "y": 600,
        "wires": [
            [
                "4d958da5dde3b87f"
            ]
        ]
    },
    {
        "id": "4d958da5dde3b87f",
        "type": "function",
        "z": "1c38872debedfd03",
        "g": "220f83ebf102e7bf",
        "name": "1 Day Data",
        "func": "// Get the current date and time\nvar endDate = new Date();\n\n// Calculate the date 1 day before the current date\nvar startDate = new Date();\nstartDate.setDate(endDate.getDate() - 1);\n\n// Create the query object\nmsg.payload = {\n    \"timestamp\": {\n        \"$gte\": startDate,\n        \"$lte\": endDate\n    },\n    \"device_id\": \"eui-a8404111d1881c80\"\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 600,
        "wires": [
            [
                "f32fdd924cba25ea"
            ]
        ]
    },
    {
        "id": "c5603f384540afdf",
        "type": "function",
        "z": "1c38872debedfd03",
        "g": "220f83ebf102e7bf",
        "name": "Temperature",
        "func": "var results = msg.payload; \nvar temperature_data = [];\n\nfor (var i = 0; i < results.length; i++) {\n\n    var temp = parseFloat(results[i].data.temp_soil).toFixed(2);\n\n    temperature_data.push({\n        \"x\": results[i].timestamp,\n        \"y\": parseFloat(temp)\n    })\n}\n\nmsg.payload = [{\n    \"series\": [\"Temperature of Soil\"],\n    \"data\": [\n        temperature_data\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 520,
        "wires": [
            [
                "a782c5d65e93a488",
                "692a313a9995febf"
            ]
        ]
    },
    {
        "id": "fe1357f062f19c0b",
        "type": "ui_form",
        "z": "1c38872debedfd03",
        "g": "220f83ebf102e7bf",
        "name": "Select Time",
        "label": "Select Time",
        "group": "ab874b0e93334cc4",
        "order": 7,
        "width": 4,
        "height": 5,
        "options": [
            {
                "label": "From",
                "value": "startDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "To",
                "value": "endDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "Download Data",
                "value": "dataDownload",
                "type": "switch",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "startDate": "",
            "endDate": "",
            "dataDownload": false
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": false,
        "className": "",
        "x": 190,
        "y": 680,
        "wires": [
            [
                "4ebf79e0bb35e80c"
            ]
        ]
    },
    {
        "id": "4ebf79e0bb35e80c",
        "type": "function",
        "z": "1c38872debedfd03",
        "g": "220f83ebf102e7bf",
        "name": "User Request",
        "func": "var endDate = new Date(msg.payload.endDate);\nvar startDate = new Date(msg.payload.startDate);\n\nif (msg.payload.dataDownload) {\n    var dataDownload = msg.payload.dataDownload;\n    msg.action = 'normal';\n}\n\nif (msg.payload.dataDownload1) {\n    var dataDownload = msg.payload.dataDownload1;\n    msg.action = 'seperate';\n}\n\n\nmsg.payload = {\n    \"timestamp\": {\n        \"$gte\": startDate,\n        \"$lte\": endDate\n    },\n    \"device_id\": \"eui-a8404111d1881c80\"\n};\n\nmsg.dataDownload = dataDownload;\nmsg.device_id = \"device2\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 680,
        "wires": [
            [
                "f32fdd924cba25ea"
            ]
        ]
    },
    {
        "id": "0afbf0b606022e64",
        "type": "function",
        "z": "1c38872debedfd03",
        "g": "220f83ebf102e7bf",
        "name": "Water",
        "func": "var results = msg.payload;\nvar water_data = [];\n\nfor (var i = 0; i < results.length; i++) {\n\n    var temp = parseFloat(results[i].data.water_soil).toFixed(2);\n\n    water_data.push({\n        \"x\": results[i].timestamp,\n        \"y\": parseFloat(temp)\n    })\n}\n\nmsg.payload = [{\n    \"series\": [\"Water in Soil\"],\n    \"data\": [\n        water_data\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 580,
        "wires": [
            [
                "8d49cae4cd85336f",
                "37859277b31c3929"
            ]
        ]
    },
    {
        "id": "181351b71577372b",
        "type": "ui_button",
        "z": "1c38872debedfd03",
        "g": "220f83ebf102e7bf",
        "name": "",
        "group": "ab874b0e93334cc4",
        "order": 10,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "red",
        "bgcolor": "white",
        "className": "",
        "icon": "fa-refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 190,
        "y": 520,
        "wires": [
            [
                "4d958da5dde3b87f"
            ]
        ]
    },
    {
        "id": "9aeb3026fd8cb2c8",
        "type": "function",
        "z": "1c38872debedfd03",
        "g": "220f83ebf102e7bf",
        "name": "Conductivity",
        "func": "var results = msg.payload;\nvar conduct_soil = [];\n\nfor (var i = 0; i < results.length; i++) {\n\n    var temp = parseFloat(results[i].data.conduct_soil).toFixed(2);\n\n    conduct_soil.push({\n        \"x\": results[i].timestamp,\n        \"y\": parseFloat(temp)\n    })\n}\n\nmsg.payload = [{\n    \"series\": [\"Water in Soil\"],\n    \"data\": [\n        conduct_soil\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 640,
        "wires": [
            [
                "40e17e7b437448d5",
                "90218ac850cdfa75"
            ]
        ]
    },
    {
        "id": "7068949c7b8f75cf",
        "type": "function",
        "z": "1c38872debedfd03",
        "g": "220f83ebf102e7bf",
        "name": "Battery Voltage",
        "func": "var results = msg.payload;\nvar battery_voltage = [];\n\nfor (var i = 0; i < results.length; i++) {\n\n    var temp = parseFloat(results[i].data.battery_voltage).toFixed(2);\n\n    battery_voltage.push({\n        \"x\": results[i].timestamp,\n        \"y\": parseFloat(temp)\n    })\n}\n\nmsg.payload = [{\n    \"series\": [\"Water in Soil\"],\n    \"data\": [\n        battery_voltage\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 700,
        "wires": [
            [
                "9296969863a71256",
                "625346b025c599b9"
            ]
        ]
    },
    {
        "id": "a782c5d65e93a488",
        "type": "ui_chart",
        "z": "1c38872debedfd03",
        "g": "220f83ebf102e7bf",
        "name": "Temperature of Soil",
        "group": "ab874b0e93334cc4",
        "order": 8,
        "width": 11,
        "height": 6,
        "label": "Temperature of Soil (°C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 950,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "8d49cae4cd85336f",
        "type": "ui_chart",
        "z": "1c38872debedfd03",
        "g": "220f83ebf102e7bf",
        "name": "Water in Soil",
        "group": "ab874b0e93334cc4",
        "order": 9,
        "width": 11,
        "height": 6,
        "label": "Water in Soil",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 930,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "40e17e7b437448d5",
        "type": "ui_chart",
        "z": "1c38872debedfd03",
        "g": "220f83ebf102e7bf",
        "name": "Conductivity of Soil",
        "group": "ab874b0e93334cc4",
        "order": 11,
        "width": 13,
        "height": 6,
        "label": "Conductivity of Soil",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "2",
        "removeOlderPoints": "500",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 950,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "9296969863a71256",
        "type": "ui_chart",
        "z": "1c38872debedfd03",
        "g": "220f83ebf102e7bf",
        "name": "Battery Voltage",
        "group": "ab874b0e93334cc4",
        "order": 12,
        "width": 13,
        "height": 6,
        "label": "Battery Voltage (volt)",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 940,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "f575953f1065b21d",
        "type": "ui_text",
        "z": "1c38872debedfd03",
        "g": "220f83ebf102e7bf",
        "group": "ab874b0e93334cc4",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Device 2",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "20",
        "color": "#0f22ae",
        "x": 540,
        "y": 460,
        "wires": []
    },
    {
        "id": "0835a79f9f026a5c",
        "type": "mongodb4",
        "z": "1c38872debedfd03",
        "g": "899d9b9e2b22d539",
        "clientNode": "6c246c6eea0c6943",
        "mode": "collection",
        "collection": "soil_sensor",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 530,
        "y": 960,
        "wires": [
            [
                "823baa25b683013b",
                "3fb0a6501f8b0d8d",
                "97d4b26bd53d79ff",
                "a889d076333d1739",
                "6d78a181feba120c"
            ]
        ]
    },
    {
        "id": "0a33242b81c3aaab",
        "type": "inject",
        "z": "1c38872debedfd03",
        "g": "899d9b9e2b22d539",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 190,
        "y": 960,
        "wires": [
            [
                "6138042e238c887a"
            ]
        ]
    },
    {
        "id": "6138042e238c887a",
        "type": "function",
        "z": "1c38872debedfd03",
        "g": "899d9b9e2b22d539",
        "name": "1 Day Data",
        "func": "// Get the current date and time\nvar endDate = new Date();\n\n// Calculate the date 1 day before the current date\nvar startDate = new Date();\nstartDate.setDate(endDate.getDate() - 1);\n\n// Create the query object\nmsg.payload = {\n    \"timestamp\": {\n        \"$gte\": startDate,\n        \"$lte\": endDate\n    },\n    \"device_id\": \"eui-a84041e0c1881c65\"\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 960,
        "wires": [
            [
                "0835a79f9f026a5c"
            ]
        ]
    },
    {
        "id": "823baa25b683013b",
        "type": "function",
        "z": "1c38872debedfd03",
        "g": "899d9b9e2b22d539",
        "name": "Temperature",
        "func": "var results = msg.payload; \nvar temperature_data = [];\n\nfor (var i = 0; i < results.length; i++) {\n\n    var temp = parseFloat(results[i].data.temp_soil).toFixed(2);\n\n    temperature_data.push({\n        \"x\": results[i].timestamp,\n        \"y\": parseFloat(temp)\n    })\n}\n\nmsg.payload = [{\n    \"series\": [\"Temperature of Soil\"],\n    \"data\": [\n        temperature_data\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 880,
        "wires": [
            [
                "e3e2e3c5b7fd7eca",
                "9da01625e14bc862"
            ]
        ]
    },
    {
        "id": "f54a20d23c9b844b",
        "type": "ui_form",
        "z": "1c38872debedfd03",
        "g": "899d9b9e2b22d539",
        "name": "Select Time",
        "label": "Select Time",
        "group": "a60134d115fb105c",
        "order": 7,
        "width": 4,
        "height": 5,
        "options": [
            {
                "label": "From",
                "value": "startDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "To",
                "value": "endDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "Download Data",
                "value": "dataDownload",
                "type": "switch",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "startDate": "",
            "endDate": "",
            "dataDownload": false
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": false,
        "className": "",
        "x": 190,
        "y": 1040,
        "wires": [
            [
                "2986385bc9c2db71"
            ]
        ]
    },
    {
        "id": "2986385bc9c2db71",
        "type": "function",
        "z": "1c38872debedfd03",
        "g": "899d9b9e2b22d539",
        "name": "User Request",
        "func": "var endDate = new Date(msg.payload.endDate);\nvar startDate = new Date(msg.payload.startDate);\n\nif (msg.payload.dataDownload) {\n    var dataDownload = msg.payload.dataDownload;\n    msg.action = 'normal';\n}\n\nif (msg.payload.dataDownload1) {\n    var dataDownload = msg.payload.dataDownload1;\n    msg.action = 'seperate';\n}\n\nmsg.payload = {\n    \"timestamp\": {\n        \"$gte\": startDate,\n        \"$lte\": endDate\n    },\n    \"device_id\": \"eui-a84041e0c1881c65\"\n};\n\nmsg.dataDownload = dataDownload;\nmsg.device_id = \"device3\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1040,
        "wires": [
            [
                "0835a79f9f026a5c"
            ]
        ]
    },
    {
        "id": "3fb0a6501f8b0d8d",
        "type": "function",
        "z": "1c38872debedfd03",
        "g": "899d9b9e2b22d539",
        "name": "Water",
        "func": "var results = msg.payload;\nvar water_data = [];\n\nfor (var i = 0; i < results.length; i++) {\n\n    var temp = parseFloat(results[i].data.water_soil).toFixed(2);\n\n    water_data.push({\n        \"x\": results[i].timestamp,\n        \"y\": parseFloat(temp)\n    })\n}\n\nmsg.payload = [{\n    \"series\": [\"Water in Soil\"],\n    \"data\": [\n        water_data\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 940,
        "wires": [
            [
                "2d98ee66a4f0edf0",
                "ed843ec4d5a1fba1"
            ]
        ]
    },
    {
        "id": "8c61d14d7363bd9b",
        "type": "ui_button",
        "z": "1c38872debedfd03",
        "g": "899d9b9e2b22d539",
        "name": "",
        "group": "a60134d115fb105c",
        "order": 10,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "red",
        "bgcolor": "white",
        "className": "",
        "icon": "fa-refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 190,
        "y": 880,
        "wires": [
            [
                "6138042e238c887a"
            ]
        ]
    },
    {
        "id": "97d4b26bd53d79ff",
        "type": "function",
        "z": "1c38872debedfd03",
        "g": "899d9b9e2b22d539",
        "name": "Conductivity",
        "func": "var results = msg.payload;\nvar conduct_soil = [];\n\nfor (var i = 0; i < results.length; i++) {\n\n    var temp = parseFloat(results[i].data.conduct_soil).toFixed(2);\n\n    conduct_soil.push({\n        \"x\": results[i].timestamp,\n        \"y\": parseFloat(temp)\n    })\n}\n\nmsg.payload = [{\n    \"series\": [\"Water in Soil\"],\n    \"data\": [\n        conduct_soil\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1000,
        "wires": [
            [
                "908960c771344a49",
                "a7d838d661e714ea"
            ]
        ]
    },
    {
        "id": "a889d076333d1739",
        "type": "function",
        "z": "1c38872debedfd03",
        "g": "899d9b9e2b22d539",
        "name": "Battery Voltage",
        "func": "var results = msg.payload;\nvar battery_voltage = [];\n\nfor (var i = 0; i < results.length; i++) {\n\n    var temp = parseFloat(results[i].data.battery_voltage).toFixed(2);\n\n    battery_voltage.push({\n        \"x\": results[i].timestamp,\n        \"y\": parseFloat(temp)\n    })\n}\n\nmsg.payload = [{\n    \"series\": [\"Water in Soil\"],\n    \"data\": [\n        battery_voltage\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1060,
        "wires": [
            [
                "480f22d087345714",
                "6706c4602dbb65fc"
            ]
        ]
    },
    {
        "id": "e3e2e3c5b7fd7eca",
        "type": "ui_chart",
        "z": "1c38872debedfd03",
        "g": "899d9b9e2b22d539",
        "name": "Temperature of Soil",
        "group": "a60134d115fb105c",
        "order": 8,
        "width": 11,
        "height": 6,
        "label": "Temperature of Soil (°C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 950,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "2d98ee66a4f0edf0",
        "type": "ui_chart",
        "z": "1c38872debedfd03",
        "g": "899d9b9e2b22d539",
        "name": "Water in Soil",
        "group": "a60134d115fb105c",
        "order": 9,
        "width": 11,
        "height": 6,
        "label": "Water in Soil",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 930,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "908960c771344a49",
        "type": "ui_chart",
        "z": "1c38872debedfd03",
        "g": "899d9b9e2b22d539",
        "name": "Conductivity of Soil",
        "group": "a60134d115fb105c",
        "order": 11,
        "width": 13,
        "height": 6,
        "label": "Conductivity of Soil",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "2",
        "removeOlderPoints": "500",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 950,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "480f22d087345714",
        "type": "ui_chart",
        "z": "1c38872debedfd03",
        "g": "899d9b9e2b22d539",
        "name": "Battery Voltage",
        "group": "a60134d115fb105c",
        "order": 12,
        "width": 13,
        "height": 6,
        "label": "Battery Voltage (volt)",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 940,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "d65df08e9bb56e6f",
        "type": "ui_text",
        "z": "1c38872debedfd03",
        "g": "899d9b9e2b22d539",
        "group": "a60134d115fb105c",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Device 3",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "20",
        "color": "#0f22ae",
        "x": 540,
        "y": 820,
        "wires": []
    },
    {
        "id": "37cbbd7344bd9c13",
        "type": "mongodb4",
        "z": "1c38872debedfd03",
        "g": "2162d783c16cd16b",
        "clientNode": "6c246c6eea0c6943",
        "mode": "collection",
        "collection": "soil_sensor",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 530,
        "y": 1340,
        "wires": [
            [
                "1c17e83ab9d0ce91",
                "1a114dc9544c98de",
                "920756b72688880c",
                "97c0df4690822f27",
                "6d78a181feba120c"
            ]
        ]
    },
    {
        "id": "3be916bbf9ed6c64",
        "type": "inject",
        "z": "1c38872debedfd03",
        "g": "2162d783c16cd16b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 190,
        "y": 1340,
        "wires": [
            [
                "4bebbe95db146bd0"
            ]
        ]
    },
    {
        "id": "4bebbe95db146bd0",
        "type": "function",
        "z": "1c38872debedfd03",
        "g": "2162d783c16cd16b",
        "name": "1 Day Data",
        "func": "// Get the current date and time\nvar endDate = new Date();\n\n// Calculate the date 1 day before the current date\nvar startDate = new Date();\nstartDate.setDate(endDate.getDate() - 1);\n\n// Create the query object\nmsg.payload = {\n    \"timestamp\": {\n        \"$gte\": startDate,\n        \"$lte\": endDate\n    },\n    \"device_id\": \"eui-a84041ffb1881c77\"\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1340,
        "wires": [
            [
                "37cbbd7344bd9c13"
            ]
        ]
    },
    {
        "id": "1c17e83ab9d0ce91",
        "type": "function",
        "z": "1c38872debedfd03",
        "g": "2162d783c16cd16b",
        "name": "Temperature",
        "func": "var results = msg.payload; \nvar temperature_data = [];\n\nfor (var i = 0; i < results.length; i++) {\n\n    var temp = parseFloat(results[i].data.temp_soil).toFixed(2);\n\n    temperature_data.push({\n        \"x\": results[i].timestamp,\n        \"y\": parseFloat(temp)\n    })\n}\n\nmsg.payload = [{\n    \"series\": [\"Temperature of Soil\"],\n    \"data\": [\n        temperature_data\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1260,
        "wires": [
            [
                "c8b26d17098f772f",
                "38a01fcf8fd63456"
            ]
        ]
    },
    {
        "id": "63cafb1db38492c6",
        "type": "ui_form",
        "z": "1c38872debedfd03",
        "g": "2162d783c16cd16b",
        "name": "Select Time",
        "label": "Select Time",
        "group": "f5ba2cb56977521d",
        "order": 7,
        "width": 4,
        "height": 5,
        "options": [
            {
                "label": "From",
                "value": "startDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "To",
                "value": "endDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "Download Data",
                "value": "dataDownload",
                "type": "switch",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "startDate": "",
            "endDate": "",
            "dataDownload": false
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": false,
        "className": "",
        "x": 190,
        "y": 1420,
        "wires": [
            [
                "390be2e866892975"
            ]
        ]
    },
    {
        "id": "390be2e866892975",
        "type": "function",
        "z": "1c38872debedfd03",
        "g": "2162d783c16cd16b",
        "name": "User Request",
        "func": "var endDate = new Date(msg.payload.endDate);\nvar startDate = new Date(msg.payload.startDate);\n\nif (msg.payload.dataDownload) {\n    var dataDownload = msg.payload.dataDownload;\n    msg.action = 'normal';\n}\n\nif (msg.payload.dataDownload1) {\n    var dataDownload = msg.payload.dataDownload1;\n    msg.action = 'seperate';\n}\n\nmsg.payload = {\n    \"timestamp\": {\n        \"$gte\": startDate,\n        \"$lte\": endDate\n    },\n    \"device_id\": \"eui-a84041ffb1881c77\"\n};\n\nmsg.dataDownload = dataDownload;\nmsg.device_id = \"device4\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1420,
        "wires": [
            [
                "37cbbd7344bd9c13"
            ]
        ]
    },
    {
        "id": "1a114dc9544c98de",
        "type": "function",
        "z": "1c38872debedfd03",
        "g": "2162d783c16cd16b",
        "name": "Water",
        "func": "var results = msg.payload;\nvar water_data = [];\n\nfor (var i = 0; i < results.length; i++) {\n\n    var temp = parseFloat(results[i].data.water_soil).toFixed(2);\n\n    water_data.push({\n        \"x\": results[i].timestamp,\n        \"y\": parseFloat(temp)\n    })\n}\n\nmsg.payload = [{\n    \"series\": [\"Water in Soil\"],\n    \"data\": [\n        water_data\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1320,
        "wires": [
            [
                "5785e9b0d1305e49",
                "97281af6ee6cd475"
            ]
        ]
    },
    {
        "id": "9eed662a5c8f61b6",
        "type": "ui_button",
        "z": "1c38872debedfd03",
        "g": "2162d783c16cd16b",
        "name": "",
        "group": "f5ba2cb56977521d",
        "order": 10,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "red",
        "bgcolor": "white",
        "className": "",
        "icon": "fa-refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 190,
        "y": 1260,
        "wires": [
            [
                "4bebbe95db146bd0"
            ]
        ]
    },
    {
        "id": "920756b72688880c",
        "type": "function",
        "z": "1c38872debedfd03",
        "g": "2162d783c16cd16b",
        "name": "Conductivity",
        "func": "var results = msg.payload;\nvar conduct_soil = [];\n\nfor (var i = 0; i < results.length; i++) {\n\n    var temp = parseFloat(results[i].data.conduct_soil).toFixed(2);\n\n    conduct_soil.push({\n        \"x\": results[i].timestamp,\n        \"y\": parseFloat(temp)\n    })\n}\n\nmsg.payload = [{\n    \"series\": [\"Water in Soil\"],\n    \"data\": [\n        conduct_soil\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1380,
        "wires": [
            [
                "1aa148a2f7bebf9a",
                "b12104ace572564c"
            ]
        ]
    },
    {
        "id": "97c0df4690822f27",
        "type": "function",
        "z": "1c38872debedfd03",
        "g": "2162d783c16cd16b",
        "name": "Battery Voltage",
        "func": "var results = msg.payload;\nvar battery_voltage = [];\n\nfor (var i = 0; i < results.length; i++) {\n\n    var temp = parseFloat(results[i].data.battery_voltage).toFixed(2);\n\n    battery_voltage.push({\n        \"x\": results[i].timestamp,\n        \"y\": parseFloat(temp)\n    })\n}\n\nmsg.payload = [{\n    \"series\": [\"Water in Soil\"],\n    \"data\": [\n        battery_voltage\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1440,
        "wires": [
            [
                "31714ee08fa90aa4",
                "017df30556722f8c"
            ]
        ]
    },
    {
        "id": "c8b26d17098f772f",
        "type": "ui_chart",
        "z": "1c38872debedfd03",
        "g": "2162d783c16cd16b",
        "name": "Temperature of Soil",
        "group": "f5ba2cb56977521d",
        "order": 8,
        "width": 11,
        "height": 6,
        "label": "Temperature of Soil (°C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 950,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "5785e9b0d1305e49",
        "type": "ui_chart",
        "z": "1c38872debedfd03",
        "g": "2162d783c16cd16b",
        "name": "Water in Soil",
        "group": "f5ba2cb56977521d",
        "order": 9,
        "width": 11,
        "height": 6,
        "label": "Water in Soil",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 930,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "1aa148a2f7bebf9a",
        "type": "ui_chart",
        "z": "1c38872debedfd03",
        "g": "2162d783c16cd16b",
        "name": "Conductivity of Soil",
        "group": "f5ba2cb56977521d",
        "order": 11,
        "width": 13,
        "height": 6,
        "label": "Conductivity of Soil",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "2",
        "removeOlderPoints": "500",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 950,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "31714ee08fa90aa4",
        "type": "ui_chart",
        "z": "1c38872debedfd03",
        "g": "2162d783c16cd16b",
        "name": "Battery Voltage",
        "group": "f5ba2cb56977521d",
        "order": 12,
        "width": 13,
        "height": 6,
        "label": "Battery Voltage (volt)",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 940,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "ed82df83cea119a5",
        "type": "ui_text",
        "z": "1c38872debedfd03",
        "g": "2162d783c16cd16b",
        "group": "f5ba2cb56977521d",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Device 4",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "20",
        "color": "#0f22ae",
        "x": 540,
        "y": 1200,
        "wires": []
    },
    {
        "id": "a2576b5b5a7818c9",
        "type": "mongodb4",
        "z": "1c38872debedfd03",
        "g": "ef945f45d99b1f23",
        "clientNode": "6c246c6eea0c6943",
        "mode": "collection",
        "collection": "soil_sensor",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 530,
        "y": 1720,
        "wires": [
            [
                "12935e482d2dcd27",
                "3b39a85a4401bf3f",
                "50052891df74f02b",
                "1708858422042adc",
                "6d78a181feba120c"
            ]
        ]
    },
    {
        "id": "cedc44a87f2a7ea0",
        "type": "inject",
        "z": "1c38872debedfd03",
        "g": "ef945f45d99b1f23",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 190,
        "y": 1720,
        "wires": [
            [
                "652ad9493fbda555"
            ]
        ]
    },
    {
        "id": "652ad9493fbda555",
        "type": "function",
        "z": "1c38872debedfd03",
        "g": "ef945f45d99b1f23",
        "name": "1 Day Data",
        "func": "// Get the current date and time\nvar endDate = new Date();\n\n// Calculate the date 1 day before the current date\nvar startDate = new Date();\nstartDate.setDate(endDate.getDate() - 1);\n\n// Create the query object\nmsg.payload = {\n    \"timestamp\": {\n        \"$gte\": startDate,\n        \"$lte\": endDate\n    },\n    \"device_id\": \"eui-a840416c21881c78\"\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1720,
        "wires": [
            [
                "a2576b5b5a7818c9"
            ]
        ]
    },
    {
        "id": "12935e482d2dcd27",
        "type": "function",
        "z": "1c38872debedfd03",
        "g": "ef945f45d99b1f23",
        "name": "Temperature",
        "func": "var results = msg.payload; \nvar temperature_data = [];\n\nfor (var i = 0; i < results.length; i++) {\n\n    var temp = parseFloat(results[i].data.temp_soil).toFixed(2);\n\n    temperature_data.push({\n        \"x\": results[i].timestamp,\n        \"y\": parseFloat(temp)\n    })\n}\n\nmsg.payload = [{\n    \"series\": [\"Temperature of Soil\"],\n    \"data\": [\n        temperature_data\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1640,
        "wires": [
            [
                "8c52e8f5a76a03db",
                "512dc37d40698c7b"
            ]
        ]
    },
    {
        "id": "72e785f783461f6b",
        "type": "ui_form",
        "z": "1c38872debedfd03",
        "g": "ef945f45d99b1f23",
        "name": "Select Time",
        "label": "Select Time",
        "group": "7e566a81e6655eca",
        "order": 7,
        "width": 4,
        "height": 5,
        "options": [
            {
                "label": "From",
                "value": "startDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "To",
                "value": "endDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "Download Data",
                "value": "dataDownload",
                "type": "switch",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "startDate": "",
            "endDate": "",
            "dataDownload": false
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": false,
        "className": "",
        "x": 190,
        "y": 1800,
        "wires": [
            [
                "e08d9d3911020d7e"
            ]
        ]
    },
    {
        "id": "e08d9d3911020d7e",
        "type": "function",
        "z": "1c38872debedfd03",
        "g": "ef945f45d99b1f23",
        "name": "User Request",
        "func": "var endDate = new Date(msg.payload.endDate);\nvar startDate = new Date(msg.payload.startDate);\n\nif (msg.payload.dataDownload) {\n    var dataDownload = msg.payload.dataDownload;\n    msg.action = 'normal';\n}\n\nif (msg.payload.dataDownload1) {\n    var dataDownload = msg.payload.dataDownload1;\n    msg.action = 'seperate';\n}\n\nmsg.payload = {\n    \"timestamp\": {\n        \"$gte\": startDate,\n        \"$lte\": endDate\n    },\n    \"device_id\": \"eui-a840416c21881c78\"\n};\n\nmsg.dataDownload = dataDownload;\nmsg.device_id = \"device5\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1800,
        "wires": [
            [
                "a2576b5b5a7818c9"
            ]
        ]
    },
    {
        "id": "3b39a85a4401bf3f",
        "type": "function",
        "z": "1c38872debedfd03",
        "g": "ef945f45d99b1f23",
        "name": "Water",
        "func": "var results = msg.payload;\nvar water_data = [];\n\nfor (var i = 0; i < results.length; i++) {\n\n    var temp = parseFloat(results[i].data.water_soil).toFixed(2);\n\n    water_data.push({\n        \"x\": results[i].timestamp,\n        \"y\": parseFloat(temp)\n    })\n}\n\nmsg.payload = [{\n    \"series\": [\"Water in Soil\"],\n    \"data\": [\n        water_data\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1700,
        "wires": [
            [
                "62b661bb42354d96",
                "063b562d2c8b6208"
            ]
        ]
    },
    {
        "id": "09367483814a4375",
        "type": "ui_button",
        "z": "1c38872debedfd03",
        "g": "ef945f45d99b1f23",
        "name": "",
        "group": "7e566a81e6655eca",
        "order": 10,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "red",
        "bgcolor": "white",
        "className": "",
        "icon": "fa-refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 190,
        "y": 1640,
        "wires": [
            [
                "652ad9493fbda555"
            ]
        ]
    },
    {
        "id": "50052891df74f02b",
        "type": "function",
        "z": "1c38872debedfd03",
        "g": "ef945f45d99b1f23",
        "name": "Conductivity",
        "func": "var results = msg.payload;\nvar conduct_soil = [];\n\nfor (var i = 0; i < results.length; i++) {\n\n    var temp = parseFloat(results[i].data.conduct_soil).toFixed(2);\n\n    conduct_soil.push({\n        \"x\": results[i].timestamp,\n        \"y\": parseFloat(temp)\n    })\n}\n\nmsg.payload = [{\n    \"series\": [\"Water in Soil\"],\n    \"data\": [\n        conduct_soil\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1760,
        "wires": [
            [
                "b7906842e32ca339",
                "35106a0763f0643c"
            ]
        ]
    },
    {
        "id": "1708858422042adc",
        "type": "function",
        "z": "1c38872debedfd03",
        "g": "ef945f45d99b1f23",
        "name": "Battery Voltage",
        "func": "var results = msg.payload;\nvar battery_voltage = [];\n\nfor (var i = 0; i < results.length; i++) {\n\n    var temp = parseFloat(results[i].data.battery_voltage).toFixed(2);\n\n    battery_voltage.push({\n        \"x\": results[i].timestamp,\n        \"y\": parseFloat(temp)\n    })\n}\n\nmsg.payload = [{\n    \"series\": [\"Water in Soil\"],\n    \"data\": [\n        battery_voltage\n    ],\n    \"labels\": [\"\"]\n}]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1820,
        "wires": [
            [
                "683652e61fb6c32a",
                "a21b6429ee7db35a"
            ]
        ]
    },
    {
        "id": "8c52e8f5a76a03db",
        "type": "ui_chart",
        "z": "1c38872debedfd03",
        "g": "ef945f45d99b1f23",
        "name": "Temperature of Soil",
        "group": "7e566a81e6655eca",
        "order": 8,
        "width": 11,
        "height": 6,
        "label": "Temperature of Soil (°C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 950,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "62b661bb42354d96",
        "type": "ui_chart",
        "z": "1c38872debedfd03",
        "g": "ef945f45d99b1f23",
        "name": "Water in Soil",
        "group": "7e566a81e6655eca",
        "order": 9,
        "width": 11,
        "height": 6,
        "label": "Water in Soil",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 930,
        "y": 1700,
        "wires": [
            []
        ]
    },
    {
        "id": "b7906842e32ca339",
        "type": "ui_chart",
        "z": "1c38872debedfd03",
        "g": "ef945f45d99b1f23",
        "name": "Conductivity of Soil",
        "group": "7e566a81e6655eca",
        "order": 11,
        "width": 13,
        "height": 6,
        "label": "Conductivity of Soil",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "2",
        "removeOlderPoints": "500",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 950,
        "y": 1760,
        "wires": [
            []
        ]
    },
    {
        "id": "683652e61fb6c32a",
        "type": "ui_chart",
        "z": "1c38872debedfd03",
        "g": "ef945f45d99b1f23",
        "name": "Battery Voltage",
        "group": "7e566a81e6655eca",
        "order": 12,
        "width": 13,
        "height": 6,
        "label": "Battery Voltage (volt)",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 940,
        "y": 1820,
        "wires": [
            []
        ]
    },
    {
        "id": "1befddb440ebe0e1",
        "type": "ui_text",
        "z": "1c38872debedfd03",
        "g": "ef945f45d99b1f23",
        "group": "7e566a81e6655eca",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Device 5",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "20",
        "color": "#0f22ae",
        "x": 540,
        "y": 1580,
        "wires": []
    },
    {
        "id": "786ac98442c97dbd",
        "type": "ui_button",
        "z": "1c38872debedfd03",
        "g": "13194d74ba141af5",
        "name": "",
        "group": "07177cef4a16e738",
        "order": 10,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "red",
        "bgcolor": "white",
        "className": "",
        "icon": "fa-refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 190,
        "y": 120,
        "wires": [
            [
                "18b7c18450f89d38"
            ]
        ]
    },
    {
        "id": "a162f7827e4eba45",
        "type": "ui_form",
        "z": "1c38872debedfd03",
        "g": "13194d74ba141af5",
        "name": "Select Time",
        "label": "Select Time",
        "group": "07177cef4a16e738",
        "order": 7,
        "width": 4,
        "height": 5,
        "options": [
            {
                "label": "From",
                "value": "startDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "To",
                "value": "endDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "Download Data",
                "value": "dataDownload1",
                "type": "switch",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "startDate": "",
            "endDate": "",
            "dataDownload1": false
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": false,
        "className": "",
        "x": 190,
        "y": 360,
        "wires": [
            [
                "f186890926bb32cf"
            ]
        ]
    },
    {
        "id": "24a63a3a845b9b18",
        "type": "ui_chart",
        "z": "1c38872debedfd03",
        "g": "13194d74ba141af5",
        "name": "Temperature of Soil",
        "group": "07177cef4a16e738",
        "order": 8,
        "width": 11,
        "height": 6,
        "label": "Temperature of Soil (°C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1190,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "d787a026ead01c66",
        "type": "ui_chart",
        "z": "1c38872debedfd03",
        "g": "13194d74ba141af5",
        "name": "Water in Soil",
        "group": "07177cef4a16e738",
        "order": 9,
        "width": 11,
        "height": 6,
        "label": "Water in Soil",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1170,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "62edc8a7a73d5ac5",
        "type": "ui_chart",
        "z": "1c38872debedfd03",
        "g": "13194d74ba141af5",
        "name": "Conductivity of Soil",
        "group": "07177cef4a16e738",
        "order": 11,
        "width": 13,
        "height": 6,
        "label": "Conductivity of Soil",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "2",
        "removeOlderPoints": "500",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1190,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "7ca135f2c347d9c2",
        "type": "ui_chart",
        "z": "1c38872debedfd03",
        "g": "13194d74ba141af5",
        "name": "Battery Voltage",
        "group": "07177cef4a16e738",
        "order": 12,
        "width": 13,
        "height": 6,
        "label": "Battery Voltage (volt)",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1180,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "66b726f81813406e",
        "type": "ui_text",
        "z": "1c38872debedfd03",
        "g": "13194d74ba141af5",
        "group": "07177cef4a16e738",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Device 1",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "20",
        "color": "#0f22ae",
        "x": 1160,
        "y": 100,
        "wires": []
    },
    {
        "id": "e1d0560fe496fb2f",
        "type": "ui_button",
        "z": "1c38872debedfd03",
        "g": "220f83ebf102e7bf",
        "name": "",
        "group": "dcfb4c81b704c5b9",
        "order": 10,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "red",
        "bgcolor": "white",
        "className": "",
        "icon": "fa-refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 190,
        "y": 480,
        "wires": [
            [
                "4d958da5dde3b87f"
            ]
        ]
    },
    {
        "id": "4d8140ddb77db6f8",
        "type": "ui_form",
        "z": "1c38872debedfd03",
        "g": "220f83ebf102e7bf",
        "name": "Select Time",
        "label": "Select Time",
        "group": "dcfb4c81b704c5b9",
        "order": 7,
        "width": 4,
        "height": 5,
        "options": [
            {
                "label": "From",
                "value": "startDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "To",
                "value": "endDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "Download Data",
                "value": "dataDownload1",
                "type": "switch",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "startDate": "",
            "endDate": "",
            "dataDownload1": false
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": false,
        "className": "",
        "x": 190,
        "y": 720,
        "wires": [
            [
                "4ebf79e0bb35e80c"
            ]
        ]
    },
    {
        "id": "692a313a9995febf",
        "type": "ui_chart",
        "z": "1c38872debedfd03",
        "g": "220f83ebf102e7bf",
        "name": "Temperature of Soil",
        "group": "dcfb4c81b704c5b9",
        "order": 8,
        "width": 11,
        "height": 6,
        "label": "Temperature of Soil (°C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1190,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "37859277b31c3929",
        "type": "ui_chart",
        "z": "1c38872debedfd03",
        "g": "220f83ebf102e7bf",
        "name": "Water in Soil",
        "group": "dcfb4c81b704c5b9",
        "order": 9,
        "width": 11,
        "height": 6,
        "label": "Water in Soil",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1170,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "90218ac850cdfa75",
        "type": "ui_chart",
        "z": "1c38872debedfd03",
        "g": "220f83ebf102e7bf",
        "name": "Conductivity of Soil",
        "group": "dcfb4c81b704c5b9",
        "order": 11,
        "width": 13,
        "height": 6,
        "label": "Conductivity of Soil",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "2",
        "removeOlderPoints": "500",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1190,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "625346b025c599b9",
        "type": "ui_chart",
        "z": "1c38872debedfd03",
        "g": "220f83ebf102e7bf",
        "name": "Battery Voltage",
        "group": "dcfb4c81b704c5b9",
        "order": 12,
        "width": 13,
        "height": 6,
        "label": "Battery Voltage (volt)",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1180,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "b61c98bb5263e9fc",
        "type": "ui_text",
        "z": "1c38872debedfd03",
        "g": "220f83ebf102e7bf",
        "group": "dcfb4c81b704c5b9",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Device 2",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "20",
        "color": "#0f22ae",
        "x": 1160,
        "y": 460,
        "wires": []
    },
    {
        "id": "d3607e2a7017495d",
        "type": "ui_button",
        "z": "1c38872debedfd03",
        "g": "899d9b9e2b22d539",
        "name": "",
        "group": "2ace20c313dc6130",
        "order": 10,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "red",
        "bgcolor": "white",
        "className": "",
        "icon": "fa-refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 190,
        "y": 840,
        "wires": [
            [
                "6138042e238c887a"
            ]
        ]
    },
    {
        "id": "828183f93bec7bdf",
        "type": "ui_form",
        "z": "1c38872debedfd03",
        "g": "899d9b9e2b22d539",
        "name": "Select Time",
        "label": "Select Time",
        "group": "2ace20c313dc6130",
        "order": 7,
        "width": 4,
        "height": 5,
        "options": [
            {
                "label": "From",
                "value": "startDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "To",
                "value": "endDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "Download Data",
                "value": "dataDownload1",
                "type": "switch",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "startDate": "",
            "endDate": "",
            "dataDownload1": false
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": false,
        "className": "",
        "x": 190,
        "y": 1080,
        "wires": [
            [
                "2986385bc9c2db71"
            ]
        ]
    },
    {
        "id": "9da01625e14bc862",
        "type": "ui_chart",
        "z": "1c38872debedfd03",
        "g": "899d9b9e2b22d539",
        "name": "Temperature of Soil",
        "group": "2ace20c313dc6130",
        "order": 8,
        "width": 11,
        "height": 6,
        "label": "Temperature of Soil (°C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1190,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "ed843ec4d5a1fba1",
        "type": "ui_chart",
        "z": "1c38872debedfd03",
        "g": "899d9b9e2b22d539",
        "name": "Water in Soil",
        "group": "2ace20c313dc6130",
        "order": 9,
        "width": 11,
        "height": 6,
        "label": "Water in Soil",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1170,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "a7d838d661e714ea",
        "type": "ui_chart",
        "z": "1c38872debedfd03",
        "g": "899d9b9e2b22d539",
        "name": "Conductivity of Soil",
        "group": "2ace20c313dc6130",
        "order": 11,
        "width": 13,
        "height": 6,
        "label": "Conductivity of Soil",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "2",
        "removeOlderPoints": "500",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1190,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "6706c4602dbb65fc",
        "type": "ui_chart",
        "z": "1c38872debedfd03",
        "g": "899d9b9e2b22d539",
        "name": "Battery Voltage",
        "group": "2ace20c313dc6130",
        "order": 12,
        "width": 13,
        "height": 6,
        "label": "Battery Voltage (volt)",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1180,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "058035e3adfa90f2",
        "type": "ui_text",
        "z": "1c38872debedfd03",
        "g": "899d9b9e2b22d539",
        "group": "2ace20c313dc6130",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Device 3",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "20",
        "color": "#0f22ae",
        "x": 1160,
        "y": 820,
        "wires": []
    },
    {
        "id": "88d5d41b67325d09",
        "type": "ui_button",
        "z": "1c38872debedfd03",
        "g": "2162d783c16cd16b",
        "name": "",
        "group": "c9e43854125296e0",
        "order": 10,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "red",
        "bgcolor": "white",
        "className": "",
        "icon": "fa-refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 190,
        "y": 1220,
        "wires": [
            [
                "4bebbe95db146bd0"
            ]
        ]
    },
    {
        "id": "4c87f51099aa2c0a",
        "type": "ui_form",
        "z": "1c38872debedfd03",
        "g": "2162d783c16cd16b",
        "name": "Select Time",
        "label": "Select Time",
        "group": "c9e43854125296e0",
        "order": 7,
        "width": 4,
        "height": 5,
        "options": [
            {
                "label": "From",
                "value": "startDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "To",
                "value": "endDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "Download Data",
                "value": "dataDownload1",
                "type": "switch",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "startDate": "",
            "endDate": "",
            "dataDownload1": false
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": false,
        "className": "",
        "x": 190,
        "y": 1460,
        "wires": [
            [
                "390be2e866892975"
            ]
        ]
    },
    {
        "id": "38a01fcf8fd63456",
        "type": "ui_chart",
        "z": "1c38872debedfd03",
        "g": "2162d783c16cd16b",
        "name": "Temperature of Soil",
        "group": "c9e43854125296e0",
        "order": 8,
        "width": 11,
        "height": 6,
        "label": "Temperature of Soil (°C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1190,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "97281af6ee6cd475",
        "type": "ui_chart",
        "z": "1c38872debedfd03",
        "g": "2162d783c16cd16b",
        "name": "Water in Soil",
        "group": "c9e43854125296e0",
        "order": 9,
        "width": 11,
        "height": 6,
        "label": "Water in Soil",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1170,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "b12104ace572564c",
        "type": "ui_chart",
        "z": "1c38872debedfd03",
        "g": "2162d783c16cd16b",
        "name": "Conductivity of Soil",
        "group": "c9e43854125296e0",
        "order": 11,
        "width": 13,
        "height": 6,
        "label": "Conductivity of Soil",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "2",
        "removeOlderPoints": "500",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1190,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "017df30556722f8c",
        "type": "ui_chart",
        "z": "1c38872debedfd03",
        "g": "2162d783c16cd16b",
        "name": "Battery Voltage",
        "group": "c9e43854125296e0",
        "order": 12,
        "width": 13,
        "height": 6,
        "label": "Battery Voltage (volt)",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1180,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "b6628e5521baf231",
        "type": "ui_text",
        "z": "1c38872debedfd03",
        "g": "2162d783c16cd16b",
        "group": "c9e43854125296e0",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Device 4",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "20",
        "color": "#0f22ae",
        "x": 1160,
        "y": 1200,
        "wires": []
    },
    {
        "id": "8de9768da415dad6",
        "type": "ui_button",
        "z": "1c38872debedfd03",
        "g": "ef945f45d99b1f23",
        "name": "",
        "group": "3ab557bf8f377e10",
        "order": 10,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "red",
        "bgcolor": "white",
        "className": "",
        "icon": "fa-refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 190,
        "y": 1600,
        "wires": [
            [
                "652ad9493fbda555"
            ]
        ]
    },
    {
        "id": "c6c8965321be71a2",
        "type": "ui_form",
        "z": "1c38872debedfd03",
        "g": "ef945f45d99b1f23",
        "name": "Select Time",
        "label": "Select Time",
        "group": "3ab557bf8f377e10",
        "order": 7,
        "width": 4,
        "height": 5,
        "options": [
            {
                "label": "From",
                "value": "startDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "To",
                "value": "endDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "Download Data",
                "value": "dataDownload1",
                "type": "switch",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "startDate": "",
            "endDate": "",
            "dataDownload1": false
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": false,
        "className": "",
        "x": 190,
        "y": 1840,
        "wires": [
            [
                "e08d9d3911020d7e"
            ]
        ]
    },
    {
        "id": "512dc37d40698c7b",
        "type": "ui_chart",
        "z": "1c38872debedfd03",
        "g": "ef945f45d99b1f23",
        "name": "Temperature of Soil",
        "group": "3ab557bf8f377e10",
        "order": 8,
        "width": 11,
        "height": 6,
        "label": "Temperature of Soil (°C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1190,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "063b562d2c8b6208",
        "type": "ui_chart",
        "z": "1c38872debedfd03",
        "g": "ef945f45d99b1f23",
        "name": "Water in Soil",
        "group": "3ab557bf8f377e10",
        "order": 9,
        "width": 11,
        "height": 6,
        "label": "Water in Soil",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1170,
        "y": 1700,
        "wires": [
            []
        ]
    },
    {
        "id": "35106a0763f0643c",
        "type": "ui_chart",
        "z": "1c38872debedfd03",
        "g": "ef945f45d99b1f23",
        "name": "Conductivity of Soil",
        "group": "3ab557bf8f377e10",
        "order": 11,
        "width": 13,
        "height": 6,
        "label": "Conductivity of Soil",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "2",
        "removeOlderPoints": "500",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1190,
        "y": 1760,
        "wires": [
            []
        ]
    },
    {
        "id": "a21b6429ee7db35a",
        "type": "ui_chart",
        "z": "1c38872debedfd03",
        "g": "ef945f45d99b1f23",
        "name": "Battery Voltage",
        "group": "3ab557bf8f377e10",
        "order": 12,
        "width": 13,
        "height": 6,
        "label": "Battery Voltage (volt)",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "5000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1180,
        "y": 1820,
        "wires": [
            []
        ]
    },
    {
        "id": "9b82a7bef292b644",
        "type": "ui_text",
        "z": "1c38872debedfd03",
        "g": "ef945f45d99b1f23",
        "group": "3ab557bf8f377e10",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Device 5",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "20",
        "color": "#0f22ae",
        "x": 1160,
        "y": 1580,
        "wires": []
    },
    {
        "id": "38faa1b3336dd7a3",
        "type": "function",
        "z": "1c38872debedfd03",
        "name": "Data Download",
        "func": "var results = msg.payload;\nvar dataDownload = msg.dataDownload;\n\nvar processedData = [];\n\nif (dataDownload) {\n    for (var i = 0; i < results.length; i++) {\n        processedData.push({\n            device_id: results[i].device_id,\n            time: results[i].timestamp,\n            temp_soil: results[i].data.temp_soil,\n            water_soil: results[i].data.water_soil,\n            battery_voltage: results[i].data.battery_voltage,\n            conduct_soil: results[i].data.conduct_soil,\n            mod: results[i].data.mod,\n            i_flag: results[i].data.i_flag,\n            s_flag: results[i].data.s_flag\n        });\n    }\n}\n\nmsg.payload = processedData;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 760,
        "wires": [
            [
                "4d0aa44a432fd785"
            ]
        ]
    },
    {
        "id": "4d0aa44a432fd785",
        "type": "csv",
        "z": "1c38872debedfd03",
        "name": "",
        "spec": "rfc",
        "sep": ",",
        "hdrin": "",
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": true,
        "include_null_values": true,
        "x": 1910,
        "y": 760,
        "wires": [
            [
                "024a49e7a8fc037e"
            ]
        ]
    },
    {
        "id": "024a49e7a8fc037e",
        "type": "function",
        "z": "1c38872debedfd03",
        "name": "File Path",
        "func": "msg.path = '.node-red/data/static_files/soil_sensor.csv';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2080,
        "y": 760,
        "wires": [
            [
                "fdf207e61c35d108"
            ]
        ]
    },
    {
        "id": "fdf207e61c35d108",
        "type": "file",
        "z": "1c38872debedfd03",
        "name": "",
        "filename": "path",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 2260,
        "y": 760,
        "wires": [
            [
                "2f3b76bb4e07f3ef"
            ]
        ]
    },
    {
        "id": "2f3b76bb4e07f3ef",
        "type": "trigger",
        "z": "1c38872debedfd03",
        "name": "",
        "op1": "open",
        "op2": "reset",
        "op1type": "str",
        "op2type": "str",
        "duration": "500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2460,
        "y": 760,
        "wires": [
            [
                "243cf21f76882347"
            ]
        ]
    },
    {
        "id": "243cf21f76882347",
        "type": "ui_template",
        "z": "1c38872debedfd03",
        "group": "b0ba5a219f0523bb",
        "name": "",
        "order": 13,
        "width": 0,
        "height": 0,
        "format": "<script>\n    (function(scope) {\n        scope.$watch('msg', function(msg) {\n            if (msg.payload == \"open\") {\n                window.open(\"http://78.46.151.191:1880/soil_sensor\",\"_blank\");\n                \n            }\n        })\n    })(scope);\n\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2660,
        "y": 760,
        "wires": [
            [
                "b31af473f6b7a5c7"
            ]
        ]
    },
    {
        "id": "b31af473f6b7a5c7",
        "type": "debug",
        "z": "1c38872debedfd03",
        "name": "debug 42",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2820,
        "y": 760,
        "wires": []
    },
    {
        "id": "d7a6e55d7b034ba4",
        "type": "http in",
        "z": "1c38872debedfd03",
        "name": "",
        "url": "soil_sensor",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1540,
        "y": 1160,
        "wires": [
            [
                "1a0c985ce93243e7"
            ]
        ]
    },
    {
        "id": "1a0c985ce93243e7",
        "type": "file in",
        "z": "1c38872debedfd03",
        "name": "",
        "filename": ".node-red/data/static_files/soil_sensor.csv",
        "filenameType": "str",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1880,
        "y": 1160,
        "wires": [
            [
                "c62ed3556a7ec667"
            ]
        ]
    },
    {
        "id": "c62ed3556a7ec667",
        "type": "http response",
        "z": "1c38872debedfd03",
        "name": "",
        "statusCode": "",
        "headers": {
            "Content-Disposition": "attachment; filename=\"Soil_sensor_data.csv\"",
            "Content-Type": "text/csv"
        },
        "x": 2150,
        "y": 1160,
        "wires": []
    },
    {
        "id": "6d78a181feba120c",
        "type": "switch",
        "z": "1c38872debedfd03",
        "name": "",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "normal",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "seperate",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1510,
        "y": 860,
        "wires": [
            [
                "38faa1b3336dd7a3"
            ],
            [
                "4a5bb8b987688acf"
            ]
        ]
    },
    {
        "id": "4a5bb8b987688acf",
        "type": "switch",
        "z": "1c38872debedfd03",
        "name": "",
        "property": "device_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "device1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "device2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "device3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "device4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "device5",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 1670,
        "y": 980,
        "wires": [
            [
                "01f5611c48d6f503"
            ],
            [
                "f10e5aa8c862e2f2"
            ],
            [
                "949cc41721da5114"
            ],
            [
                "46fe5cf164364a12"
            ],
            [
                "5bae6dcf05480f7e"
            ]
        ]
    },
    {
        "id": "01f5611c48d6f503",
        "type": "function",
        "z": "1c38872debedfd03",
        "name": "Data Download",
        "func": "var results = msg.payload;\nvar dataDownload = msg.dataDownload;\n\nvar processedData = [];\n\nif (dataDownload) {\n    for (var i = 0; i < results.length; i++) {\n        processedData.push({\n            device_id: results[i].device_id,\n            time: results[i].timestamp,\n            temp_soil: results[i].data.temp_soil,\n            water_soil: results[i].data.water_soil,\n            battery_voltage: results[i].data.battery_voltage,\n            conduct_soil: results[i].data.conduct_soil,\n            mod: results[i].data.mod,\n            i_flag: results[i].data.i_flag,\n            s_flag: results[i].data.s_flag\n        });\n    }\n}\n\nmsg.payload = processedData;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 900,
        "wires": [
            [
                "972ecd92acbc7d88"
            ]
        ]
    },
    {
        "id": "972ecd92acbc7d88",
        "type": "csv",
        "z": "1c38872debedfd03",
        "name": "",
        "spec": "rfc",
        "sep": ",",
        "hdrin": "",
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": true,
        "include_null_values": true,
        "x": 2050,
        "y": 900,
        "wires": [
            [
                "b64b2b5b873375e9"
            ]
        ]
    },
    {
        "id": "b64b2b5b873375e9",
        "type": "function",
        "z": "1c38872debedfd03",
        "name": "File Path",
        "func": "msg.path = '.node-red/data/static_files/soil_sensor.csv';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2220,
        "y": 900,
        "wires": [
            [
                "572498a8012547fa"
            ]
        ]
    },
    {
        "id": "572498a8012547fa",
        "type": "file",
        "z": "1c38872debedfd03",
        "name": "",
        "filename": "path",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 2400,
        "y": 900,
        "wires": [
            [
                "c4d5d35ae9a900f6"
            ]
        ]
    },
    {
        "id": "c4d5d35ae9a900f6",
        "type": "trigger",
        "z": "1c38872debedfd03",
        "name": "",
        "op1": "open",
        "op2": "reset",
        "op1type": "str",
        "op2type": "str",
        "duration": "500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2600,
        "y": 900,
        "wires": [
            [
                "e814be0b9c98937c"
            ]
        ]
    },
    {
        "id": "e814be0b9c98937c",
        "type": "ui_template",
        "z": "1c38872debedfd03",
        "group": "07177cef4a16e738",
        "name": "",
        "order": 13,
        "width": 0,
        "height": 0,
        "format": "<script>\n    (function(scope) {\n        scope.$watch('msg', function(msg) {\n            if (msg.payload == \"open\") {\n                window.open(\"http://78.46.151.191:1880/soil_sensor\",\"_blank\");\n                \n            }\n        })\n    })(scope);\n\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2800,
        "y": 900,
        "wires": [
            [
                "a4f776808a17223b"
            ]
        ]
    },
    {
        "id": "a4f776808a17223b",
        "type": "debug",
        "z": "1c38872debedfd03",
        "name": "debug 49",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2960,
        "y": 900,
        "wires": []
    },
    {
        "id": "f10e5aa8c862e2f2",
        "type": "function",
        "z": "1c38872debedfd03",
        "name": "Data Download",
        "func": "var results = msg.payload;\nvar dataDownload = msg.dataDownload;\n\nvar processedData = [];\n\nif (dataDownload) {\n    for (var i = 0; i < results.length; i++) {\n        processedData.push({\n            device_id: results[i].device_id,\n            time: results[i].timestamp,\n            temp_soil: results[i].data.temp_soil,\n            water_soil: results[i].data.water_soil,\n            battery_voltage: results[i].data.battery_voltage,\n            conduct_soil: results[i].data.conduct_soil,\n            mod: results[i].data.mod,\n            i_flag: results[i].data.i_flag,\n            s_flag: results[i].data.s_flag\n        });\n    }\n}\n\nmsg.payload = processedData;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 940,
        "wires": [
            [
                "f5b8e8f0d35b2f48"
            ]
        ]
    },
    {
        "id": "f5b8e8f0d35b2f48",
        "type": "csv",
        "z": "1c38872debedfd03",
        "name": "",
        "spec": "rfc",
        "sep": ",",
        "hdrin": "",
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": true,
        "include_null_values": true,
        "x": 2050,
        "y": 940,
        "wires": [
            [
                "ecd0ea69624c7a4c"
            ]
        ]
    },
    {
        "id": "ecd0ea69624c7a4c",
        "type": "function",
        "z": "1c38872debedfd03",
        "name": "File Path",
        "func": "msg.path = '.node-red/data/static_files/soil_sensor.csv';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2220,
        "y": 940,
        "wires": [
            [
                "19e2777a21dfe4d8"
            ]
        ]
    },
    {
        "id": "19e2777a21dfe4d8",
        "type": "file",
        "z": "1c38872debedfd03",
        "name": "",
        "filename": "path",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 2400,
        "y": 940,
        "wires": [
            [
                "fd6c2f491ebde1aa"
            ]
        ]
    },
    {
        "id": "fd6c2f491ebde1aa",
        "type": "trigger",
        "z": "1c38872debedfd03",
        "name": "",
        "op1": "open",
        "op2": "reset",
        "op1type": "str",
        "op2type": "str",
        "duration": "500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2600,
        "y": 940,
        "wires": [
            [
                "0d50b60d7cfa0c38"
            ]
        ]
    },
    {
        "id": "0d50b60d7cfa0c38",
        "type": "ui_template",
        "z": "1c38872debedfd03",
        "group": "dcfb4c81b704c5b9",
        "name": "",
        "order": 13,
        "width": 0,
        "height": 0,
        "format": "<script>\n    (function(scope) {\n        scope.$watch('msg', function(msg) {\n            if (msg.payload == \"open\") {\n                window.open(\"http://78.46.151.191:1880/soil_sensor\",\"_blank\");\n                \n            }\n        })\n    })(scope);\n\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2800,
        "y": 940,
        "wires": [
            [
                "27e73adfae11aaaa"
            ]
        ]
    },
    {
        "id": "27e73adfae11aaaa",
        "type": "debug",
        "z": "1c38872debedfd03",
        "name": "debug 50",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2960,
        "y": 940,
        "wires": []
    },
    {
        "id": "949cc41721da5114",
        "type": "function",
        "z": "1c38872debedfd03",
        "name": "Data Download",
        "func": "var results = msg.payload;\nvar dataDownload = msg.dataDownload;\n\nvar processedData = [];\n\nif (dataDownload) {\n    for (var i = 0; i < results.length; i++) {\n        processedData.push({\n            device_id: results[i].device_id,\n            time: results[i].timestamp,\n            temp_soil: results[i].data.temp_soil,\n            water_soil: results[i].data.water_soil,\n            battery_voltage: results[i].data.battery_voltage,\n            conduct_soil: results[i].data.conduct_soil,\n            mod: results[i].data.mod,\n            i_flag: results[i].data.i_flag,\n            s_flag: results[i].data.s_flag\n        });\n    }\n}\n\nmsg.payload = processedData;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 980,
        "wires": [
            [
                "2ed422b6c49772ee"
            ]
        ]
    },
    {
        "id": "2ed422b6c49772ee",
        "type": "csv",
        "z": "1c38872debedfd03",
        "name": "",
        "spec": "rfc",
        "sep": ",",
        "hdrin": "",
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": true,
        "include_null_values": true,
        "x": 2050,
        "y": 980,
        "wires": [
            [
                "cf6fba20d276b9e3"
            ]
        ]
    },
    {
        "id": "cf6fba20d276b9e3",
        "type": "function",
        "z": "1c38872debedfd03",
        "name": "File Path",
        "func": "msg.path = '.node-red/data/static_files/soil_sensor.csv';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2220,
        "y": 980,
        "wires": [
            [
                "2a6f1232be56a62b"
            ]
        ]
    },
    {
        "id": "2a6f1232be56a62b",
        "type": "file",
        "z": "1c38872debedfd03",
        "name": "",
        "filename": "path",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 2400,
        "y": 980,
        "wires": [
            [
                "25fa7129fcf2a7f1"
            ]
        ]
    },
    {
        "id": "25fa7129fcf2a7f1",
        "type": "trigger",
        "z": "1c38872debedfd03",
        "name": "",
        "op1": "open",
        "op2": "reset",
        "op1type": "str",
        "op2type": "str",
        "duration": "500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2600,
        "y": 980,
        "wires": [
            [
                "1a62828e817fcf5c"
            ]
        ]
    },
    {
        "id": "1a62828e817fcf5c",
        "type": "ui_template",
        "z": "1c38872debedfd03",
        "group": "2ace20c313dc6130",
        "name": "",
        "order": 13,
        "width": 0,
        "height": 0,
        "format": "<script>\n    (function(scope) {\n        scope.$watch('msg', function(msg) {\n            if (msg.payload == \"open\") {\n                window.open(\"http://78.46.151.191:1880/soil_sensor\",\"_blank\");\n                \n            }\n        })\n    })(scope);\n\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2800,
        "y": 980,
        "wires": [
            [
                "5e40d0f8190d8c7d"
            ]
        ]
    },
    {
        "id": "5e40d0f8190d8c7d",
        "type": "debug",
        "z": "1c38872debedfd03",
        "name": "debug 51",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2960,
        "y": 980,
        "wires": []
    },
    {
        "id": "46fe5cf164364a12",
        "type": "function",
        "z": "1c38872debedfd03",
        "name": "Data Download",
        "func": "var results = msg.payload;\nvar dataDownload = msg.dataDownload;\n\nvar processedData = [];\n\nif (dataDownload) {\n    for (var i = 0; i < results.length; i++) {\n        processedData.push({\n            device_id: results[i].device_id,\n            time: results[i].timestamp,\n            temp_soil: results[i].data.temp_soil,\n            water_soil: results[i].data.water_soil,\n            battery_voltage: results[i].data.battery_voltage,\n            conduct_soil: results[i].data.conduct_soil,\n            mod: results[i].data.mod,\n            i_flag: results[i].data.i_flag,\n            s_flag: results[i].data.s_flag\n        });\n    }\n}\n\nmsg.payload = processedData;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 1020,
        "wires": [
            [
                "29994ec349a97217"
            ]
        ]
    },
    {
        "id": "29994ec349a97217",
        "type": "csv",
        "z": "1c38872debedfd03",
        "name": "",
        "spec": "rfc",
        "sep": ",",
        "hdrin": "",
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": true,
        "include_null_values": true,
        "x": 2050,
        "y": 1020,
        "wires": [
            [
                "bdd61be740b5461a"
            ]
        ]
    },
    {
        "id": "bdd61be740b5461a",
        "type": "function",
        "z": "1c38872debedfd03",
        "name": "File Path",
        "func": "msg.path = '.node-red/data/static_files/soil_sensor.csv';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2220,
        "y": 1020,
        "wires": [
            [
                "6bccc0b70c2e7b45"
            ]
        ]
    },
    {
        "id": "6bccc0b70c2e7b45",
        "type": "file",
        "z": "1c38872debedfd03",
        "name": "",
        "filename": "path",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 2400,
        "y": 1020,
        "wires": [
            [
                "a58509c947bb951e"
            ]
        ]
    },
    {
        "id": "a58509c947bb951e",
        "type": "trigger",
        "z": "1c38872debedfd03",
        "name": "",
        "op1": "open",
        "op2": "reset",
        "op1type": "str",
        "op2type": "str",
        "duration": "500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2600,
        "y": 1020,
        "wires": [
            [
                "c2209a5bc9bce3cc"
            ]
        ]
    },
    {
        "id": "c2209a5bc9bce3cc",
        "type": "ui_template",
        "z": "1c38872debedfd03",
        "group": "c9e43854125296e0",
        "name": "",
        "order": 13,
        "width": 0,
        "height": 0,
        "format": "<script>\n    (function(scope) {\n        scope.$watch('msg', function(msg) {\n            if (msg.payload == \"open\") {\n                window.open(\"http://78.46.151.191:1880/soil_sensor\",\"_blank\");\n                \n            }\n        })\n    })(scope);\n\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2800,
        "y": 1020,
        "wires": [
            [
                "c686724c5f6a4f0e"
            ]
        ]
    },
    {
        "id": "c686724c5f6a4f0e",
        "type": "debug",
        "z": "1c38872debedfd03",
        "name": "debug 52",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2960,
        "y": 1020,
        "wires": []
    },
    {
        "id": "5bae6dcf05480f7e",
        "type": "function",
        "z": "1c38872debedfd03",
        "name": "Data Download",
        "func": "var results = msg.payload;\nvar dataDownload = msg.dataDownload;\n\nvar processedData = [];\n\nif (dataDownload) {\n    for (var i = 0; i < results.length; i++) {\n        processedData.push({\n            device_id: results[i].device_id,\n            time: results[i].timestamp,\n            temp_soil: results[i].data.temp_soil,\n            water_soil: results[i].data.water_soil,\n            battery_voltage: results[i].data.battery_voltage,\n            conduct_soil: results[i].data.conduct_soil,\n            mod: results[i].data.mod,\n            i_flag: results[i].data.i_flag,\n            s_flag: results[i].data.s_flag\n        });\n    }\n}\n\nmsg.payload = processedData;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 1060,
        "wires": [
            [
                "1c48984875253a5a"
            ]
        ]
    },
    {
        "id": "1c48984875253a5a",
        "type": "csv",
        "z": "1c38872debedfd03",
        "name": "",
        "spec": "rfc",
        "sep": ",",
        "hdrin": "",
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": true,
        "include_null_values": true,
        "x": 2050,
        "y": 1060,
        "wires": [
            [
                "8cb6f5e0dedeb4a3"
            ]
        ]
    },
    {
        "id": "8cb6f5e0dedeb4a3",
        "type": "function",
        "z": "1c38872debedfd03",
        "name": "File Path",
        "func": "msg.path = '.node-red/data/static_files/soil_sensor.csv';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2220,
        "y": 1060,
        "wires": [
            [
                "4cf01fe581f8189e"
            ]
        ]
    },
    {
        "id": "4cf01fe581f8189e",
        "type": "file",
        "z": "1c38872debedfd03",
        "name": "",
        "filename": "path",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 2400,
        "y": 1060,
        "wires": [
            [
                "2543b7814c797125"
            ]
        ]
    },
    {
        "id": "2543b7814c797125",
        "type": "trigger",
        "z": "1c38872debedfd03",
        "name": "",
        "op1": "open",
        "op2": "reset",
        "op1type": "str",
        "op2type": "str",
        "duration": "500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2600,
        "y": 1060,
        "wires": [
            [
                "7f98dba17965d922"
            ]
        ]
    },
    {
        "id": "7f98dba17965d922",
        "type": "ui_template",
        "z": "1c38872debedfd03",
        "group": "3ab557bf8f377e10",
        "name": "",
        "order": 13,
        "width": 0,
        "height": 0,
        "format": "<script>\n    (function(scope) {\n        scope.$watch('msg', function(msg) {\n            if (msg.payload == \"open\") {\n                window.open(\"http://78.46.151.191:1880/soil_sensor\",\"_blank\");\n                \n            }\n        })\n    })(scope);\n\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2800,
        "y": 1060,
        "wires": [
            [
                "cd13e3ca73a8836e"
            ]
        ]
    },
    {
        "id": "cd13e3ca73a8836e",
        "type": "debug",
        "z": "1c38872debedfd03",
        "name": "debug 53",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2960,
        "y": 1060,
        "wires": []
    }
]